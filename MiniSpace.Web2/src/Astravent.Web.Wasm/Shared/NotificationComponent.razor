@using Astravent.Web.Wasm.Areas.Notifications
@using Astravent.Web.Wasm.DTO.Notifications
@using Microsoft.Extensions.Logging
@using System.Globalization
@inject INotificationsService NotificationsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<SignalRService> Logger

@if (!showNotifications)
{
    <div class="notification-toggle-container" @onclick="ToggleNotifications" style="position: fixed; top: 10%; right: 10px; z-index: 1001;">
        <div class="notification-circle circle1">
            N
            @if (hasNewNotification)
            {
                <div class="notification-new-circle"></div>
            }
        </div>
        <div class="notification-circle circle2"></div>
        <div class="notification-circle circle3"></div>
    </div>
}

<div class="notification-panel @(!showNotifications ? "hidden" : "")">
    <div style="display: flex; justify-content: space-between; align-items: center; padding: 1rem;">
        <h3 style="background-color: #30445F; color: white; padding: 10px; border-radius: 5px; margin: 0;">Notifications</h3>
        <button @onclick="ToggleNotifications" style="background: none; border: none; color: #30445F; font-size: 1.5em;">&times;</button>
    </div>
    <div class="notification-content" style="border: 1px solid #dee2e6; border-radius: 5px; padding: 10px; margin-top: 10px; overflow-y: auto; max-height: 70vh;">
        @if (notifications != null && notifications.Any())
        {
            <ul style="list-style: none; padding: 0; margin: 0;">
                @foreach (var notification in notifications)
                {
                    <li @onclick="() => NavigateToNotificationDetail(notification.NotificationId)"
                        class="notification-item"
                        style="padding: 8px 12px; border-bottom: 1px solid #dee2e6; cursor: pointer;">
                        <span style="display: block; color: #333; margin-bottom: 4px;">
                            @RenderHtml(TruncateMessage(notification.Message))
                        </span>
                        <span style="display: block; font-size: 0.8em; color: #666;">
                            @notification.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)
                        </span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p style="text-align: center; color: #888;">No new notifications.</p>
        }
    </div>
</div>

<style>
.notification-toggle-container {
    position: fixed;
    top: 10%;
    right: 10px;
    z-index: 1001;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 5px;
}

.notification-circle {
    background-color: #30445F;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5em;
    font-weight: bold;
    position: relative;
}

.circle1 {
    width: 60px;
    height: 60px;
}

.circle2 {
    width: 45px;
    height: 45px;
}

.circle3 {
    width: 30px;
    height: 30px;
}

.notification-new-circle {
    position: absolute;
    top: -10px;
    left: -10px;
    width: 20px;
    height: 20px;
    background-color: rgb(0, 187, 255);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.75em;
    font-weight: bold;
    border: 2px solid white;
}

.notification-panel {
    position: fixed;
    top: 10%;
    right: 1%;
    width: 300px;
    max-height: 80vh;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    z-index: 1000;
    transition: transform 0.3s ease-in-out;
}

.notification-panel.hidden {
    transform: translateX(105%);
}
</style>

@code {
    private List<NotificationDto> notifications = new List<NotificationDto>();
    private SignalRService SignalRService;
    private Guid userId;
    private bool showNotifications = false; 
    private bool hasNewNotification = false;

    protected override async Task OnInitializedAsync()
    {
        userId = IdentityService.GetCurrentUserId();
        SignalRService = new SignalRService(NavigationManager, IdentityService);

        SignalRService.NotificationReceived += OnNotificationReceived;

        await SignalRService.StartAsync(userId);  

        await JSRuntime.InvokeVoidAsync("setUserId", userId.ToString());

        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        try
        {
            var paginatedResponse = await NotificationsService.GetNotificationsByUserAsync(userId, pageSize: 15, sortOrder: "desc", status: "Unread");
            notifications = paginatedResponse.Results;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error loading notifications: {ex.Message}");
        }
    }

    private void OnNotificationReceived(NotificationDto notification)
    {
        Logger.LogInformation($"Received notification for user {notification.UserId}");
        if (notification.UserId == userId)
        {
            notifications.Insert(0, notification); // Add to the top of the list
            hasNewNotification = true;
            InvokeAsync(StateHasChanged); // Ensure the UI updates
            PlayNotificationSound();
        }
    }

    private void PlayNotificationSound()
    {
        JSRuntime.InvokeVoidAsync("playNotificationSound");
    }

    private void NavigateToNotificationDetail(Guid notificationId)
    {
        NavigationManager.NavigateTo($"/notification/{notificationId}", true);
    }

    private string TruncateMessage(string message)
    {
        return message.Length > 80 ? message.Substring(0, 80) + "..." : message;
    }

    private void ToggleNotifications()
    {
        showNotifications = !showNotifications;
        if (showNotifications)
        {
            hasNewNotification = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        SignalRService.NotificationReceived -= OnNotificationReceived;
        await SignalRService.StopAsync();
    }

    private MarkupString RenderHtml(string htmlContent)
    {
        return new MarkupString(htmlContent);
    }
}
