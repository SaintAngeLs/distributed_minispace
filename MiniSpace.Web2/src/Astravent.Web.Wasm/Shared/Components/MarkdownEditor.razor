@using MudBlazor

<MudPaper Class="pa-4" Style="background-color:#f9f9f9; border-radius: 12px;">
    <MudTextField @bind-Value="MarkdownText" Label="Markdown Text" Multiline="true" Lines="10" FullWidth Immediate="true" Class="mb-2" Required="true" id="markdown-editor" />

    <!-- Display the character counter and highlight if limit exceeded -->
    <MudText Typo="Typo.caption" Style="@GetCharacterCounterStyle()">
        @($"Characters: {MarkdownText.Length}/{CharacterLimit}")
    </MudText>
    <MudProgressLinear Value="@(MarkdownText.Length * 100 / CharacterLimit)" Color="@GetProgressColor()" Class="mt-2" />

    <MudGrid Class="mt-2" Gutter="2">
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("bold"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.FormatBold" Class="toolbar-btn">
                Bold
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("italic"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.FormatItalic" Class="toolbar-btn">
                Italic
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("heading"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Title" Class="toolbar-btn">
                Heading
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("link"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Link" Class="toolbar-btn">
                Link
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("code"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Code" Class="toolbar-btn">
                Code
            </MudButton>
        </MudItem>

        <!-- Emoji Picker Button -->
        <MudItem>
            <MudButton OnClick="ToggleEmojiPicker" Color="Color.Secondary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.EmojiEmotions" Class="toolbar-btn">
                Emoji
            </MudButton>
        </MudItem>
    </MudGrid>

    <!-- Emoji Picker Popover -->
    <MudPopover Open="@IsEmojiPickerOpen" CloseOnOutsideClick="true">
        <MudPaper Class="pa-2" Style="max-width: 300px; max-height: 300px; overflow-y: auto;">
            <MudGrid Gutter="2">
                @foreach (var emoji in EmojiList.Emojis) 
                {
                    <MudItem xs="3">
                        <MudButton Class="emoji-btn" OnClick="@(() => InsertEmoji(emoji))">
                            @emoji
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudPopover>

    <style>
        .toolbar-btn {
            margin: 0 2px;
            min-width: 48px;
            height: 36px;
        }

        #markdown-editor {
            font-size: 1rem;
            border-radius: 8px;
        }

        .emoji-btn {
            font-size: 1.5rem;
            min-width: 40px;
            height: 40px;
        }
    </style>
</MudPaper>

@code {
    [Parameter]
    public string MarkdownText { get; set; } = string.Empty;

    [Parameter]
    public int CharacterLimit { get; set; } = 5000; // Default limit

    [Parameter]
    public EventCallback<string> MarkdownTextChanged { get; set; }

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    private bool IsEmojiPickerOpen { get; set; } = false;

    // Toggle emoji picker
    private void ToggleEmojiPicker()
    {
        IsEmojiPickerOpen = !IsEmojiPickerOpen;
    }

    // Insert emoji into the MarkdownText
    private void InsertEmoji(string emoji)
    {
        MarkdownText += emoji;
        IsEmojiPickerOpen = false;
        MarkdownTextChanged.InvokeAsync(MarkdownText);
    }

    // JavaScript interop to manipulate selected text
    private async Task ApplyMarkdown(string action)
    {
        var selectedText = await JSRuntime.InvokeAsync<string>("getSelectedText", "markdown-editor");

        switch (action)
        {
            case "bold":
                InsertText("**", "**", selectedText);
                break;
            case "italic":
                InsertText("_", "_", selectedText);
                break;
            case "heading":
                InsertText("### ", "", selectedText);
                break;
            case "link":
                InsertText("[", "]()", selectedText);
                break;
            case "code":
                InsertText("`", "`", selectedText);
                break;
        }
    }

    private void InsertText(string prefix, string suffix, string selectedText)
    {
        if (!string.IsNullOrEmpty(selectedText))
        {
            var newText = $"{prefix}{selectedText}{suffix}";
            MarkdownText = MarkdownText.Replace(selectedText, newText);
        }
        else
        {
            MarkdownText += $"{prefix}{suffix}";
        }

        MarkdownTextChanged.InvokeAsync(MarkdownText);
    }

    // Get the style for the character counter based on the character limit
    private string GetCharacterCounterStyle()
    {
        return MarkdownText.Length > CharacterLimit ? "color:red;" : "color:gray;";
    }

    // Get the color of the progress bar
    private Color GetProgressColor()
    {
        return MarkdownText.Length > CharacterLimit ? Color.Error : Color.Primary;
    }
}
