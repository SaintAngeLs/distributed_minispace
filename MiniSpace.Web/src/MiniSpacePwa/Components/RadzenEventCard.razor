@using MiniSpacePwa.DTO
@using Radzen
@using System.Globalization
@using MiniSpacePwa.Areas.Events
@inject IEventsService EventsService
@inject NavigationManager NavigationManager

<RadzenCard Class="@GetCardClass(Event.Status)" Style="max-width: 1080px; border-radius: 15px; overflow: hidden; box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1); cursor: pointer"
            @onclick="@(() => NavigationManager.NavigateTo($"/events/{Event.Id}"))">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
        <RadzenStack Gap="0">
            <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Event name</RadzenText>
            <RadzenText TextStyle="TextStyle.H4" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left event-name {GetFontSizeClass(Event.Name)}")">@Event.Name</RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organization</RadzenText>
            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@Event.Organizer.OrganizationName</RadzenText>
        </RadzenStack>
    </RadzenStack>
    <RadzenCard Class="gradient-background rz-shadow-0 rz-border-radius-5 rz-p-8" Style="margin: 1rem calc(-1 * var(--rz-card-padding)); border-radius: 0;">
        <RadzenRow RowGap="0">
            <RadzenColumn SizeSM="6">
                <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Start date</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@Event.StartDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</RadzenText>
                <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">End date</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@Event.EndDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</RadzenText>
            </RadzenColumn>
            <RadzenColumn SizeSM="6">
                <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Location</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@Event.Location?.BuildingName</RadzenText>
                <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Fee</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@String.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", Event?.Fee)</RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenRow RowGap="0">
        <RadzenColumn SizeSM="9">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-p-6 rz-border-top">
                <RadzenIcon Icon="grade" Style="color: #30445f;"/>
                <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left rz-pr-8">@Event.InterestedStudents</RadzenText>
                <RadzenIcon Icon="account_circle" Style="color: #30445f;" />
                <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@Event.SignedUpStudents/@Event.Capacity</RadzenText>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn SizeSM="3">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-p-4 rz-border-top">
                @if (Event.Status == "Archived" && eventRating != null)
                {
                    <RadzenIcon Icon="rating" Style="color: #30445f;"/>
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-font-weight-bold rz-pt-2">
                        @(eventRating.TotalRatings > 0 ? $"{@eventRating.AverageRating:F2} out of 5 ({@eventRating.TotalRatings} reviews)" :
                        "No ratings yet")
                    </RadzenText>
                }
                else if(Event.Status == "Cancelled" )
                {
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-font-weight-bold rz-pt-2">Cancelled</RadzenText>
                }
                else if(Event.Status == "ToBePublished")
                {
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-font-weight-bold rz-pt-2">Planned to publish</RadzenText>
                }
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<style>
    :root {
        --rz-card-padding: 10px;
        overflow: auto;
    }

    .rz-datalist-data {
      border-radius: 15px;
      overflow: auto;
    }
    
    .rz-g > div, .rz-datalist-data > li {
      padding: 0rem !important;
      border-radius: 15px;
      background-color: transparent;
      border-color: transparent;
    }
    
    .event-name {
        word-break: break-word;
    }
    
    .small-font {
        font-size: 1.35em;
    }
    
    .medium-font {
        font-size: 1.85em;
    }
    
    .large-font {
        font-size: 2.5em;
    }

    .gradient-background {
        background: linear-gradient(90deg, rgba(48,68,95,1) 0%, rgba(16,35,56,1) 100%);
    }
    
    .archived-event {
        border: 2px solid grey;
        opacity: 0.65;
    }
    
    .cancelled-event {
        border: 2px solid red;
        opacity: 0.65;
    }
    
    .to-be-published-event {
        border: 2px solid orange;
        opacity: 0.85;
    }

</style>

@code
{
    [Parameter]
    public EventDto Event { get; set; }
    
    private EventRatingDto eventRating = null;
    
    protected override async Task OnInitializedAsync()
    {
        if (Event.Status == "Archived")
        {
            var response = await EventsService.GetEventRatingAsync(Event.Id);
            if (response != null)
            {
                eventRating = response;
                StateHasChanged();
            }
        }
    }
    
    private string GetFontSizeClass(string eventName)
    {
        if (eventName.Length <= 50)
        {
            return "large-font";
        }
        else if (eventName.Length <= 100)
        {
            return "medium-font";
        }
        else
        {
            return "small-font";
        }
    }
    
    private string GetCardClass(string status)
    {
        switch (status)
        {
            case "Archived":
                return "archived-event rz-mx-auto";
            case "Cancelled":
                return "cancelled-event rz-mx-auto";
            case "ToBePublished":
                return "to-be-published-event rz-mx-auto";
            default:
                return "rz-mx-auto";
        }
    }
}
