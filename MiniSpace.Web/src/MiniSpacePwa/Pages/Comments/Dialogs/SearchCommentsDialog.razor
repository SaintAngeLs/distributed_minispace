@page "/comments/search/dialog"
@using MiniSpacePwa.Models.Comments
@using Radzen
@using Blazorise.DeepCloner
@inject Radzen.DialogService DialogService

<RadzenFieldset>
    <RadzenStack Gap="1rem">
        <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="12" SizeSM="4">
                <RadzenStack>
                    <RadzenFormField Text="Results on loading" Variant="Variant.Outlined">
                        <RadzenNumeric @bind-Value="@TempSearchCommentsModel.Pageable.Size" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="4">
                <RadzenStack>
                    <RadzenFormField Text="Sort direction for comments" Variant="Variant.Outlined">
                        <RadzenDropDown Data=@directions @bind-Value="@TempSearchCommentsModel.Pageable.Sort.Direction"
                                        TextProperty="Key" ValueProperty="Value" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="4">
                <RadzenStack>
                    <RadzenFormField Text="Sort direction for replies" Variant="Variant.Outlined">
                        <RadzenDropDown Data=@directions @bind-Value="@TempSearchSubCommentsDirection"
                                        TextProperty="Key" ValueProperty="Value" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenPickList @bind-Source="@notSelectedSortParams" @bind-Target="@selectedSortParams" Style="height: 180px; width: 100%;"
                                Orientation="@Orientation.Horizontal" TextProperty="Key" AllowFiltering="false" Multiple="false"
                                ShowHeader="true" ButtonGap="12px" ButtonJustifyContent="JustifyContent.Center"
                                ButtonStyle="@ButtonStyle.Secondary" ButtonSize="@ButtonSize.Medium" ButtonVariant="Variant.Outlined">
                    <SourceHeader>
                        <h4>Not selected parameters:</h4>
                    </SourceHeader>
                    <TargetHeader>
                        <h4>Sorting parameters (order important):</h4>
                    </TargetHeader>
                    <Template>
                        @context.Key
                    </Template>
                </RadzenPickList>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
    
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Click="@HandleFiltering" Variant="Variant.Flat" Text="Submit" Style="width: 120px"/>
            <RadzenButton Click="@(() => DialogService.Close(true))" Variant="Variant.Flat" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenStack>
</RadzenFieldset>

@code {
    [Parameter]
    public SearchCommentsModel SearchCommentsModel { get; set; }
    [Parameter]
    public SearchCommentsModel SearchSubCommentsModel { get; set; }

    private SearchCommentsModel TempSearchCommentsModel { get; set; }
    private string TempSearchSubCommentsDirection { get; set; }
    
    private List<KeyValuePair<string, string>> directions =
    [
        new KeyValuePair<string, string>("Descending", "des"),
        new KeyValuePair<string, string>("Ascending", "asc")
    ];

    private List<KeyValuePair<string, string>> initialSortParams =
    [
        new KeyValuePair<string, string>("Author name", "studentName"),
        new KeyValuePair<string, string>("Text content", "textContent"),
        new KeyValuePair<string, string>("Created at", "createdAt"),
        new KeyValuePair<string, string>("Last updated at", "lastUpdatedAt"),
        new KeyValuePair<string, string>("Last reply at", "lastReplyAt"),
        new KeyValuePair<string, string>("Replies count", "repliesCount")
    ];
    
    private IEnumerable<KeyValuePair<string, string>> notSelectedSortParams = [];
    private IEnumerable<KeyValuePair<string, string>> selectedSortParams = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        TempSearchCommentsModel = SearchCommentsModel.DeepClone();
        TempSearchSubCommentsDirection = SearchSubCommentsModel.Pageable.Sort.Direction;
        
        List<KeyValuePair<string, string>> selectedTmp = new();
        
        foreach (var value in TempSearchCommentsModel.Pageable.Sort.SortBy)
        {
            var element = initialSortParams.FirstOrDefault(sortParam => sortParam.Value == value);
            initialSortParams.Remove(element);
            selectedTmp.Add(element);
        }

        notSelectedSortParams = initialSortParams;
        selectedSortParams = selectedTmp;
    }
    
    private void HandleFiltering()
    {
        SearchCommentsModel.Pageable = TempSearchCommentsModel.Pageable.DeepClone();
        SearchCommentsModel.Pageable.Sort.SortBy = selectedSortParams != null
            ? selectedSortParams.Select(sortParam => sortParam.Value) : [];
        SearchCommentsModel.SearchingSubmitted = true;

        SearchSubCommentsModel.Pageable = TempSearchCommentsModel.Pageable.DeepClone();
        SearchSubCommentsModel.Pageable.Sort.Direction = TempSearchSubCommentsDirection;

        DialogService.Close(true);
    }
}
