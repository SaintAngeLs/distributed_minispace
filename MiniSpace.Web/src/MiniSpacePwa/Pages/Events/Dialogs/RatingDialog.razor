@using MiniSpacePwa.DTO.Enums
@using Radzen
@using MudBlazor
@using Orientation = Radzen.Orientation
@using AlignItems = Radzen.AlignItems
@inject Radzen.DialogService DialogService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-p-4 rz-border-top">
    @foreach(var i in Enumerable.Range(1, 5).ToArray())
    {
        <RadzenButton Click="@(() => SelectReaction(i))" Size="ButtonSize.Medium" Text="@i.ToString()"
                      class="@(StudentRating == i ? "selected-reaction" : "separate-button")"/>
    }
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Click="@Close" />
</RadzenStack>

<style>
    .separate-button {
        margin: 10px; 
        width: 50px;  
        height: 50px;
        border: 1px solid #ccc; 
        border-radius: 5px; 
        padding: 12px;
        color: #333; 
        transition: background-color 0.3s ease; 
    }
    
    .selected-reaction {
        margin: 10px;
        width: 50px; 
        height: 50px;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 12px;
        color: #333;
        background-color: #ccc; /* Highlight color */
        transition: background-color 0.3s ease;
    }
    
</style>

@code {
    [Parameter] public int? StudentRating { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private void SelectReaction(int? rating)
    {
        if(rating == StudentRating)
        {
            rating = null;
        }
        DialogService.Close(rating);
    }
    
    private void Close()
    {
        DialogService.Close(StudentRating);
    }
}
