@using MiniSpacePwa.Areas.Identity
@using MiniSpacePwa.Areas.Friends
@using MiniSpacePwa.DTO
@using Radzen
@using System.Globalization
@using MiniSpacePwa.Areas.Events
@inject Radzen.DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject NavigationManager NavigationManager

<RadzenFieldset>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                    Data="@Students" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn Property="Name" Title="Full Name" Frozen="true" Width="150px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Frozen="true" TItem="ParticipantDto" Context="friend" Width="100px" TextAlign="TextAlign.Center">
                <Template Context="friend">
                    <RadzenButton Size="ButtonSize.Medium" Text="Show" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => OpenParticipantDetailsDialog(friend, "participant"))" />
                    <RadzenButton Size="ButtonSize.Medium" Text="Remove" ButtonStyle="ButtonStyle.Warning"
                                  Click="@(() => RemoveEventParticipant(friend))"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    
    <RadzenStack Gap="1rem" class="rz-pt-5" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Click="@(() => Close())" Variant="Variant.Flat" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenStack>
</RadzenFieldset>
@code {
    [Parameter] public IEnumerable<ParticipantDto> Students { get; set; }
    [Parameter] public Guid EventId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private void Close()
    {
        DialogService.Close();
    }
    
    private async void RemoveEventParticipant(ParticipantDto participant)
    {
        await EventsService.RemoveEventParticipantAsync(EventId, participant.StudentId);
        Students = Students.Where(s => s.StudentId != participant.StudentId).ToList();
    }
    
    private async Task OpenParticipantDetailsDialog(ParticipantDto participantDto, string term)
    {
        await DialogService.OpenAsync<ParticipantDetailsDialog>($"Details of the {term}:",
            new Dictionary<string, object>()
            {
                { "EventId", EventId.ToString() },
                { "ParticipantDto", participantDto }
            },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
}
