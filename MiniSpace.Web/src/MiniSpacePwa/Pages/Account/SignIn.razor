@page "/signin"
@using MiniSpacePwa.Models.Identity
@using MiniSpacePwa.Areas.Identity
@using MiniSpacePwa.Areas.Students
@using Radzen
@using MiniSpacePwa.Areas.Http
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>

    /* General body and font styles */
    body {
        margin: 0;
        font-family: 'Roboto', sans-serif;
        background: #f4f4f9;
        color: #333;
    }

    /* Flexbox container for video and form */
    .split-container {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    /* Styling for the video and form sections */
    .left-side, .right-side {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Specific styles for video background */
    .left-side {
        @* margin-top: 5rem !important; *@
        background: black; /* Fallback for non-supported browsers */
        position: relative;
    }
     .right-side {
        margin-top: 5rem !important;
     
    }

    /* Fullscreen background video */
    video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Form container with adaptive sizing and padding */
    .form-container {
        width: 100%;
        max-width: 400px;
        background: rgba(255, 255, 255, 0.85);
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    /* Responsive adjustments */
    @* @media (max-width: 768px) {
        .split-container {
            flex-direction: column;
            height: auto;
        }

        .left-side, .right-side {
            width: 100%;
            flex: none;
        }

        video {
            height: 50vh; /* Adjust video height on smaller screens */
        }

        .form-container {
            margin-top: -50px; /* Overlap form on video slightly */
            border-radius: 10px 10px 0 0;
        }
    } *@

    /* Link and button styles for interaction */
    a, button {
        transition: color 0.3s ease, background-color 0.3s ease;
    }

    a:hover, button:hover {
        color: #007BFF; /* Highlight color on hover */
    }

    /* Custom styles for Radzen components can be added here */
</style>


<div class="split-container">
    <div class="left-side">
        <video id="videoPlayer" autoplay muted loop>
            <source src="videos/video-component/video_1.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>
    <div class="right-side">
        <div class="form-container">
            <div class="sign-in-up-pre-info">
                <h2>Welcome to MiniSpace</h2>
                <p>Please sign in to access your account and manage your details.</p>
                <h3>Sign In</h3>
            </div>
            <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" Close="@OnAlertClose">
                @errorMessage
            </RadzenAlert>
            <RadzenTemplateForm Data="@signInModel" Submit="@(async (SignInModel args) => { await HandleSignIn(); })">
                <RadzenFieldset>
                    <RadzenStack Gap="1rem">
                        <RadzenTextBox Name="email" Placeholder="Email" Style="width: 100%;" @bind-Value="signInModel.Email" />
                        <RadzenRequiredValidator Component="email" Text="Email is required" />
                        <RadzenEmailValidator Component="email" Text="Email is invalid" />

                        <RadzenPassword Name="password" Placeholder="Password" Style="width: 100%;" @bind-Value="signInModel.Password" />
                        <RadzenRequiredValidator Component="password" Text="Password is required" />

                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Text="Sign In"/>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenTemplateForm>

            <div style="text-align: center; margin-top: 3rem !important;">
                <a href="/forgot-password">Forgot Password?</a> | <a href="/signup">Create Account</a>
            </div>
        </div>
    </div>
</div>
@code {
    private SignInModel signInModel = new SignInModel();
    private bool showError = false;
    private string errorMessage = string.Empty;

    private void OnAlertClose()
    {
        showError = false;
        errorMessage = string.Empty;
    }
    
    @* private async Task HandleSignIn()
    {
        var response = await IdentityService.SignInAsync(signInModel.Email, signInModel.Password);
        var jwtDto = response.Content;
        if (jwtDto != null && !string.IsNullOrEmpty(jwtDto.AccessToken))
        {
            await StudentsService.UpdateStudentDto(IdentityService.UserDto.Id);
            NavigationManager.NavigateTo(StudentsService.StudentDto.State == "incomplete" ? "/signup/complete" : "/account");
        }
        else
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
            StateHasChanged(); // Force the component to re-render
        }
    } *@

    private async Task HandleSignIn()
    {
        try
        {
            var response = await IdentityService.SignInAsync(signInModel.Email, signInModel.Password);
            if (response != null && response.Content != null && !string.IsNullOrEmpty(response.Content.AccessToken))
            {
                await StudentsService.UpdateStudentDto(IdentityService.UserDto.Id);
                var nextPage = StudentsService.StudentDto.State == "incomplete" ? "/signin/first" : "/";
                // Force a page reload when navigating
                NavigationManager.NavigateTo(nextPage, true);
            }
            else
            {
                showError = true;
                errorMessage = $"Error during sign in: {response?.ErrorMessage.Reason}";
                StateHasChanged(); 
            }
        }
        catch (Exception ex)
        {
        
            showError = true;
            errorMessage = $"Error during sign in: {ex.Message}";
            StateHasChanged(); 
        }
    }
}
