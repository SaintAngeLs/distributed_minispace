@page "/reset-password/"
@page "/reset-password/{token}/page"
@using MiniSpacePwa.Models.Identity
@using MiniSpacePwa.Areas.Identity
@using Radzen
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MiniSpacePwa.DTO

<style>
    /* General body and font styles */
    body {
        margin: 0;
        font-family: 'Roboto', sans-serif;
        background: #f4f4f9;
        color: #333;
    }

    /* Flexbox container for video and form */
    .split-container {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    /* Styling for the video and form sections */
    .left-side, .right-side {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Specific styles for video background */
    .left-side {
        background: black; /* Fallback for non-supported browsers */
        position: relative;
    }
    .right-side {
        margin-top: 5rem !important;
    }

    /* Fullscreen background video */
    video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Form container with adaptive sizing and padding */
    .form-container {
        width: 100%;
        max-width: 400px;
        background: rgba(255, 255, 255, 0.85);
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    /* Link and button styles for interaction */
    a, button {
        transition: color 0.3s ease, background-color 0.3s ease;
    }

    a:hover, button:hover {
        color: #007BFF; /* Highlight color on hover */
    }

    /* Custom styles for Radzen components can be added here */
</style>

<div class="split-container">
    <div class="left-side">
        <video id="videoPlayer" autoplay muted loop>
            <source src="videos/video-component/video_1.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>
    <div class="right-side">
        <div class="form-container">
            <div class="reset-password-pre-info">
                <h2>Reset Your Password</h2>
                <p>Please enter your new password below.</p>
            </div>
            <RadzenTemplateForm TItem="ResetPasswordModel" Data="@resetPasswordModel" Submit="HandleResetPassword">
                <RadzenFieldset>
                    <RadzenStack Gap="1rem">
                        <RadzenTextBox Name="email" Placeholder="Email" Style="width: 100%;" @bind-Value="resetPasswordModel.Email" />
                        <RadzenRequiredValidator Component="email" Text="Email is required" />
                        <RadzenEmailValidator Component="email" Text="Email is invalid" />

                        <RadzenPassword Name="newPassword" Placeholder="New Password" Style="width: 100%;" @bind-Value="resetPasswordModel.NewPassword" />
                        <RadzenRequiredValidator Component="newPassword" Text="New Password is required" />

                        <RadzenPassword Name="confirmPassword" Placeholder="Confirm Password" Style="width: 100%;" @bind-Value="resetPasswordModel.ConfirmPassword" />
                        @* <RadzenCompareValidator Component="confirmPassword" CompareTo="newPassword" Text="Passwords do not match" /> *@

                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Text="Reset Password"/>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenTemplateForm>

            @if (showError)
            {
                <div class="error-message" style="color: red; margin-top: 1rem;">
                    @errorMessage
                </div>
            }

            <div style="text-align: center; margin-top: 3rem !important;">
                <a href="/signin">Back to Sign In</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Token { get; set; } = "";

    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private bool showError = false;
    private string errorMessage = string.Empty;

    
protected override void OnInitialized()
{
    Console.WriteLine($"Current URL: {NavigationManager.Uri}");
    Console.WriteLine($"Token received: {Token}");

    if (string.IsNullOrEmpty(Token))
    {
        showError = true;
        errorMessage = "Invalid token.";
    }
    else
    {
        resetPasswordModel.Token = Token;
    }
}


    private async Task HandleResetPassword()
    {
          Console.WriteLine($"NewPassword: {resetPasswordModel.NewPassword}, ConfirmPassword: {resetPasswordModel.ConfirmPassword}");
        try
        {
            var response = await IdentityService.ResetPasswordAsync(resetPasswordModel.Token, resetPasswordModel.Email, resetPasswordModel.NewPassword);
            if (response != null)
            {
                NavigationManager.NavigateTo("/signin", true);
            }
            else
            {
                showError = true;
                errorMessage = "Failed to reset password. Please try again.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            showError = true;
            errorMessage = $"Error during password reset: {ex.Message}";
            StateHasChanged();
        }
    }
}
