@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using MiniSpacePwa.Areas.Identity
@using MiniSpacePwa.Areas.Students
@inherits LayoutComponentBase
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(AuthenticatedLayout)" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(AuthenticatedLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>Ra

<RadzenLayout style="width: 100%; min-width: 100vw; min-height: 100vh; text-align: center;" id="radzen-layout">
    <header>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                @if (IsUserAuthenticated() && StudentsService.StudentDto.State == "valid")
                {
                    <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)" />
                }
                <div class="logo-container" @onclick="NavigateToHome">
                    <RadzenLabel Text="MiniSpace" />
                </div>
            </RadzenStack>

             <RadzenMenu Class="rz-menu">
                <div class="rz-menu-stack">
                    
                </div>
            </RadzenMenu>
        </RadzenStack>
    </header>
    <div style="display: flex; flex: 1; flex-direction: row;">
        @if (IsUserAuthenticated() && StudentsService.StudentDto.State == "valid")
        {
            <RadzenSidebar @bind-Expanded="@_sidebarExpanded">
                <RadzenPanelMenu>
                    <RadzenPanelMenuItem Text="Home" Icon="home" Click="@(() => NavigationManager.NavigateTo(""))" />
                    <RadzenPanelMenuItem Text="Account" Icon="account_box" Click="@(() => NavigationManager.NavigateTo("account"))" />
                    <RadzenPanelMenuItem Text="Events" Icon="event" Click="@(() => NavigationManager.NavigateTo("events"))" />
                    <RadzenPanelMenuItem Text="Friends" Icon="group" Click="@(() => NavigationManager.NavigateTo("friends"))" />
                </RadzenPanelMenu>
            </RadzenSidebar>
        }
        <RadzenBody class="radzen-body">
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>    
    </div>
    <CustomRadzenFooter />
</RadzenLayout>
<RadzenDialog />

@code {
    bool _sidebarExpanded = true;

    public bool IsUserAuthenticated() => IdentityService.IsAuthenticated;

    void NavigateToHome() {
        NavigationManager.NavigateTo("/home");
    }

    async Task SignOut() {
        await localStorage.RemoveItemAsync("accessToken");
        await localStorage.RemoveItemAsync("jwtDto");
        NavigationManager.NavigateTo("signin", forceLoad: true);
    }
}
