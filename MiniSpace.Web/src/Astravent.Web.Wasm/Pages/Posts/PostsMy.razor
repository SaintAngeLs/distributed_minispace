@page "/posts/my"
@inject IPostsService PostsService
@inject IStudentsService StudentsService
@inject IIdentityService IdentityService
@inject IReactionsService ReactionsService
@inject ICommentsService CommentsService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Astravent.Web.Wasm.DTO
@using Astravent.Web.Wasm.DTO.Wrappers
@using MudBlazor
@using Astravent.Web.Wasm.Pages.Posts.Components
@using System.Linq
@using System.Collections.Generic
@using System.Threading.Tasks

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Class="my-4" />
    }
    else if (!posts.Any())
    {
        <MudText Typo="Typo.body1" Align="Align.Center">You haven't created any posts yet.</MudText>
    }
    else
    {
        <MudGrid Justify="Justify.Center">
            @foreach (var post in posts)
            {
                <MudItem xs="12">
                    <PostItem 
                        Post="@post"
                        FirstName="@GetUserFirstName(post.UserId)"
                        LastName="@GetUserLastName(post.UserId)"
                        UserProfileImage="@GetUserAvatar(post.UserId)"
                        PostDate="@post.CreatedAt.ToString("g")"
                        ReactionsSummaries="@reactionsSummaries"
                        OnViewPost="NavigateToPostDetails"
                        OnReaction="HandleReaction"
                        OnSubmitComment="SubmitCommentAsync"
                    />
                </MudItem>
            }
        </MudGrid>
        <MudGrid Justify="Justify.Center" Class="mt-4">
            <MudItem>
                <MudPagination @bind-CurrentPage="currentPage" TotalItems="@totalItems" ItemsPerPage="pageSize" OnPageChanged="OnPageChanged" />
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private List<PostDto> posts = new();
    private Dictionary<Guid, StudentDto> studentsCache = new();
    private Dictionary<Guid, ReactionsSummaryDto> reactionsSummaries = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private bool isLoading = true;
    private Guid? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                currentUserId = IdentityService.GetCurrentUserId();

                if (currentUserId.HasValue)
                {
                    await LoadPostsAsync();
                }
                else
                {
                    throw new InvalidOperationException("Failed to retrieve the current user ID.");
                }
            }
            else
            {
                Snackbar.Add("You need to be logged in to view your posts.", Severity.Warning);
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPostsAsync()
    {
        if (!currentUserId.HasValue)
            return;

        var searchParams = new SearchPosts
        {
            Pageable = new PageableDto
            {
                Page = currentPage,
                Size = pageSize,
                Sort = new SortDto
                {
                    SortBy = new[] { "CreatedAt" },
                    Direction = "desc"
                }
            },
            UserId = currentUserId.Value
        };

        try
        {
            var response = await PostsService.SearchPostsAsync(searchParams);

            if (response.IsSuccessStatusCode)
            {
                var result = response.Content;

                if (result != null && result.Items != null)
                {
                    posts = result.Items.ToList();
                    totalItems = result.TotalItems;

                    foreach (var post in posts.Where(p => p.UserId.HasValue))
                    {
                        if (!studentsCache.ContainsKey(post.UserId.Value))
                        {
                            var student = await StudentsService.GetStudentAsync(post.UserId.Value);
                            if (student != null)
                            {
                                studentsCache[post.UserId.Value] = student;
                            }
                        }

                        reactionsSummaries[post.Id] = await ReactionsService.GetReactionsSummaryAsync(post.Id, ReactionContentType.Post);
                    }
                }
                else
                {
                    Snackbar.Add("No posts found.", Severity.Warning);
                    posts = new List<PostDto>();
                }
            }
            else
            {
                Snackbar.Add($"Failed to load posts: {response.ErrorMessage?.Reason}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading posts: {ex.Message}", Severity.Error);
        }
    }

    private string GetUserAvatar(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return studentsCache[userId.Value].ProfileImageUrl ?? string.Empty;
        }
        return string.Empty;
    }

    private string GetUserFirstName(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return studentsCache[userId.Value].FirstName ?? "Unknown";
        }
        return "Unknown";
    }

    private string GetUserLastName(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return studentsCache[userId.Value].LastName ?? "User";
        }
        return "User";
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadPostsAsync();
    }

    private void NavigateToPostDetails(Guid postId)
    {
        NavigationManager.NavigateTo($"/posts/details/{postId}");
    }

    private async Task HandleReaction((Guid postId, ReactionType reactionType) reactionInfo)
    {
        var (postId, reactionType) = reactionInfo;
        var existingReaction = await ReactionsService.GetReactionsAsync(postId, ReactionContentType.Post);

        var command = new UpdateReactionDto
        {
            ReactionId = existingReaction.FirstOrDefault()?.Id ?? Guid.NewGuid(),
            UserId = currentUserId.Value,
            NewReactionType = reactionType.ToString(),
            ContentType = "Post",
            TargetType = "User"
        };

        var result = await ReactionsService.UpdateReactionAsync(command);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Reaction updated successfully!", Severity.Success);
            await LoadPostsAsync();
        }
        else
        {
            Snackbar.Add($"Failed to update reaction: {result.ErrorMessage?.Reason}", Severity.Error);
        }
    }

    private async Task SubmitCommentAsync((PostDto post, string commentText) commentInfo)
    {
        var (post, commentText) = commentInfo;
        if (string.IsNullOrWhiteSpace(commentText))
        {
            Snackbar.Add("Comment cannot be empty.", Severity.Warning);
            return;
        }

        var command = new CreateCommentCommand(
            commentId: Guid.NewGuid(),
            contextId: post.Id,
            commentContext: "UserPost",
            userId: currentUserId.Value,
            parentId: Guid.Empty,
            textContent: commentText
        );

        var response = await CommentsService.CreateCommentAsync(command);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Comment added successfully!", Severity.Success);
            await LoadPostsAsync();
        }
        else
        {
            Snackbar.Add($"Failed to add comment: {response.ErrorMessage?.Reason}", Severity.Error);
        }
    }
}
