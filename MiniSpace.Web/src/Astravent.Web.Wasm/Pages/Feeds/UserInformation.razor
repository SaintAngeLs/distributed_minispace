@page "/user-information/{UserId:guid}"
@using Astravent.Web.Wasm.DTO
@using Astravent.Web.Wasm.Areas.Students
@using Astravent.Web.Wasm.Areas.Events
@inject IStudentsService StudentsService
@inject IEventsService EventsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using MudBlazor

<MudPaper Class="profile-paper">
    <MudGrid>
        <!-- Profile Section -->
        <MudItem xs="12">
            <MudCard Class="profile-card">
                <MudCardContent>
                    @if (profileLoadFailed)
                    {
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">Failed to load user profile. Please try again later.</MudText>
                    }
                    else if (student != null)
                    {
                        <div class="profile-header">
                            <MudAvatar Image="@GetProfileImage()" Style="height:150px; width:150px;" Class="profile-avatar" />
                            <div class="profile-info">
                                <MudText Typo="Typo.h4" Class="profile-name">@($"{student.FirstName} {student.LastName}")</MudText>
                                <MudText Typo="Typo.subtitle1" Class="profile-description">@student.Description</MudText>
                                <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@NavigateToProfileSettings">Edit Profile</MudButton>
                                <MudButton Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Primary" OnClick="@NavigateToPublicProfile">Public Profile</MudButton>
                            </div>
                        </div>
                    }
                    else
                    {
                        <MudPaper Class="loading-placeholder profile-placeholder"></MudPaper>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Education Section -->
        @if (educationLoadFailed)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">Failed to load education details.</MudText>
            </MudItem>
        }
        else if (student?.Education != null && student.Education.Any())
        {
            <MudItem xs="12">
                <MudCard Class="info-card modern-card">
                    <MudCardHeader>
                        <MudIcon Icon="@Icons.Material.Filled.School" Class="icon-margin" />
                        <MudText Typo="Typo.h6">Education</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @foreach (var education in student.Education)
                        {
                            <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.School" /> @education.Degree at @education.InstitutionName</MudText>
                            <MudText Typo="Typo.caption" Class="text-muted">@education.StartDate?.ToString("MMMM yyyy") - @education.EndDate?.ToString("MMMM yyyy")</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudPaper Class="loading-placeholder"></MudPaper>
            </MudItem>
        }

        <!-- Work Experience Section -->
        @if (workLoadFailed)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">Failed to load work experience.</MudText>
            </MudItem>
        }
        else if (student?.Work != null && student.Work.Any())
        {
            <MudItem xs="12">
                <MudCard Class="info-card modern-card">
                    <MudCardHeader>
                        <MudIcon Icon="@Icons.Material.Filled.Work" Class="icon-margin" />
                        <MudText Typo="Typo.h6">Work Experience</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @foreach (var work in student.Work)
                        {
                            <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.BusinessCenter" /> @work.Position at @work.Company</MudText>
                            <MudText Typo="Typo.caption" Class="text-muted">@work.StartDate?.ToString("MMMM yyyy") - @work.EndDate?.ToString("MMMM yyyy")</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudPaper Class="loading-placeholder"></MudPaper>
            </MudItem>
        }

        <!-- Languages and Interests Section -->
        @if (languagesLoadFailed)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">Failed to load languages and interests.</MudText>
            </MudItem>
        }
        else if ((student?.Languages != null && student.Languages.Any()) || (student?.Interests != null && student.Interests.Any()))
        {
            <MudItem xs="12">
                <MudCard Class="info-card modern-card">
                    <MudCardHeader>
                        <MudIcon Icon="@Icons.Material.Filled.Interests" Class="icon-margin" />
                        <MudText Typo="Typo.h6">Skills and Interests</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (student.Languages != null && student.Languages.Any())
                        {
                            <MudText Typo="Typo.body2" Class="skill-interest-text">
                                <MudIcon Icon="@Icons.Material.Filled.Language" /> Languages:
                                    @foreach (var language in student.Languages)
                                    {
                                        <MudChip Color="Color.Primary">@language</MudChip>
                                    }
                            </MudText>
                        }
                        @if (student.Interests != null && student.Interests.Any())
                        {
                            <MudText Typo="Typo.body2" Class="skill-interest-text">
                                <MudIcon Icon="@Icons.Material.Filled.Star" /> Interests:
                                    @foreach (var interest in student.Interests)
                                    {
                                        <MudChip Color="Color.Secondary">@interest</MudChip>
                                    }
                            </MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudPaper Class="loading-placeholder"></MudPaper>
            </MudItem>
        }

        <!-- Events Section -->
        @if (eventsLoadFailed)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">Failed to load events.</MudText>
            </MudItem>
        }
        else if (loadingEvents)
        {
            <MudItem xs="12">
                <MudPaper Class="loading-placeholder event-placeholder"></MudPaper>
            </MudItem>
        }
        else if (InterestedInEventsDetails.Any() || SignedUpEventsDetails.Any())
        {
            <MudItem xs="12">
                <MudCard Class="info-card modern-card">
                    <MudCardHeader>
                        <MudIcon Icon="@Icons.Material.Filled.Event" Class="icon-margin" />
                        <MudText Typo="Typo.h6">Events</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (InterestedInEventsDetails.Any())
                        {
                            <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.EventAvailable" /> Interested in:</MudText>
                            @foreach (var eventDetail in InterestedInEventsDetails)
                            {
                                <MudLink Href="@($"/events/event/{eventDetail.Id}")" Style="text-decoration: none;">
                                    <div>@eventDetail.Name - @eventDetail.StartDate.ToString("MMMM dd, yyyy")</div>
                                </MudLink>
                            }
                        }
                        @if (SignedUpEventsDetails.Any())
                        {
                            <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.EventNote" /> Signed Up for:</MudText>
                            @foreach (var eventDetail in SignedUpEventsDetails)
                            {
                                <MudLink Href="@($"/events/event/{eventDetail.Id}")" Style="text-decoration: none;">
                                    <div>@eventDetail.Name - @eventDetail.StartDate.ToString("MMMM dd, yyyy")</div>
                                </MudLink>
                            }
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public Guid UserId { get; set; }

    private StudentDto student;
    private List<EventDto> InterestedInEventsDetails = new List<EventDto>();
    private List<EventDto> SignedUpEventsDetails = new List<EventDto>();

    // Individual section loading and error state flags
    private bool profileLoadFailed = false;
    private bool educationLoadFailed = false;
    private bool workLoadFailed = false;
    private bool languagesLoadFailed = false;
    private bool loadingEvents = true;
    private bool eventsLoadFailed = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfileAsync();
        await Task.WhenAll(LoadEventsAsync(), LoadEducationAsync(), LoadWorkExperienceAsync(), LoadLanguagesAndInterestsAsync());
    }

    private async Task LoadProfileAsync()
    {
        try
        {
            student = await StudentsService.GetStudentAsync(UserId);
        }
        catch (Exception ex)
        {
            profileLoadFailed = true;
            Snackbar.Add($"Error loading user profile: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadEducationAsync()
    {
        try
        {
            // Assume the education details are part of the student data
        }
        catch (Exception ex)
        {
            educationLoadFailed = true;
            Snackbar.Add($"Error loading education details: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadWorkExperienceAsync()
    {
        try
        {
            // Assume work details are part of the student data
        }
        catch (Exception ex)
        {
            workLoadFailed = true;
            Snackbar.Add($"Error loading work experience: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadLanguagesAndInterestsAsync()
    {
        try
        {
            // Assume languages and interests are part of the student data
        }
        catch (Exception ex)
        {
            languagesLoadFailed = true;
            Snackbar.Add($"Error loading languages and interests: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadEventsAsync()
    {
        try
        {
            if (student?.InterestedInEvents != null)
            {
                foreach (var eventId in student.InterestedInEvents)
                {
                    var eventDetail = await EventsService.GetEventAsync(eventId);
                    InterestedInEventsDetails.Add(eventDetail);
                }
            }

            if (student?.SignedUpEvents != null)
            {
                foreach (var eventId in student.SignedUpEvents)
                {
                    var eventDetail = await EventsService.GetEventAsync(eventId);
                    SignedUpEventsDetails.Add(eventDetail);
                }
            }
        }
        catch (Exception ex)
        {
            eventsLoadFailed = true;
            Snackbar.Add($"Error loading events: {ex.Message}", Severity.Error);
        }
        finally
        {
            loadingEvents = false;
        }
    }

    private string GetProfileImage()
    {
        var defaultImage = "images/default_profile_image.webp";
        return !string.IsNullOrEmpty(student?.ProfileImageUrl) ? student.ProfileImageUrl : defaultImage;
    }

    private void NavigateToProfileSettings()
    {
        NavigationManager.NavigateTo("/account");
    }

    private void NavigateToPublicProfile()
    {
        NavigationManager.NavigateTo($"/user-details/{UserId}");
    }
}

<style>
    .profile-paper {
        margin: 10px auto;
        max-width: 1200px;
        background-color: var(--mud-palette-surface);
        border-radius: 12px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }

    .profile-placeholder {
        width: 100%;
        height: 200px;
        background-color: var(--mud-palette-background);
    }

    .loading-placeholder {
        height: 150px;
        background-color: var(--mud-palette-background);
        border-radius: 8px;
    }

    .event-placeholder {
        height: 100px;
        background-color: var(--mud-palette-background);
        border-radius: 8px;
    }

    .profile-header {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;
        margin-bottom: 25px;
    }

    .profile-avatar {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        margin-bottom: 15px;
        border: 3px solid #e0e0e0;
    }

    .profile-info {
        margin-top: 15px;
    }

    .profile-name {
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .profile-description {
        color: #34495e;
    }

    .info-card {
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .modern-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: var(--mud-palette-surface);
    }

    .icon-margin {
        margin-right: 10px;
        color: #2c3e50;
    }

    a {
        color: #1e88e5;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    .text-muted {
        color: #7f8c8d;
    }

    .skill-interest-text {
        word-wrap: break-word;
        white-space: normal; 
        display: flex; 
        flex-wrap: wrap; 
    }

    .info-card {
        padding: 16px;
    }
</style>
