@page "/notifications-preferences"
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Astravent.Web.Wasm.DTO
@using MudBlazor
@using System.Text.Json

<MudText Typo="Typo.h4" GutterBottom="true">Notifications</MudText>
@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudStack>
        <MudSwitch @bind-Checked="StudentWithGalleryImagesDto.Student.EmailNotifications" Label="Email Notifications" Color="Color.Primary" />
        @if (StudentWithGalleryImagesDto.Student.EmailNotifications)
        {
            <MudSwitch @bind-Checked="NotificationPreferencesDto.AccountChanges" Label="Account Changes" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.SystemLogin" Label="System Login" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.NewEvent" Label="New Event" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.InterestBasedEvents" Label="Interest Based Events" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.EventNotifications" Label="Event Notifications" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.CommentsNotifications" Label="Comments Notifications" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.PostsNotifications" Label="Posts Notifications" Color="Color.Primary" />
            <MudSwitch @bind-Checked="NotificationPreferencesDto.FriendsNotifications" Label="Friends Notifications" Color="Color.Primary" />
        }
    </MudStack>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveNotificationPreferencesAsync">Save preferences</MudButton>
}

@code {
    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public NotificationPreferencesDto NotificationPreferencesDto { get; set; }

    [Parameter]
    public StudentWithGalleryImagesDto StudentWithGalleryImagesDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            var studentId = await IdentityService.GetCurrentUserIdFromJwtAsync(); // Correct method to get user ID from JWT
            StudentWithGalleryImagesDto = await StudentsService.GetStudentWithGalleryImagesAsync(studentId);
            NotificationPreferencesDto = await StudentsService.GetUserNotificationPreferencesAsync(studentId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading preferences: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task SaveNotificationPreferencesAsync()
    {
        try
        {
            var studentId = await IdentityService.GetCurrentUserIdFromJwtAsync(); // Correct method to get user ID from JWT
            await StudentsService.UpdateUserNotificationPreferencesAsync(studentId, NotificationPreferencesDto, StudentWithGalleryImagesDto.Student.EmailNotifications);
            Snackbar.Add("Notification preferences updated successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving notification preferences: {ex.Message}", Severity.Error);
        }
    }
}
