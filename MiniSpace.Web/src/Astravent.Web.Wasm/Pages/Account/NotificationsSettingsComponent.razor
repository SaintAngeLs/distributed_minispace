@page "/notifications-preferences"
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Astravent.Web.Wasm.DTO
@using MudBlazor
@using System.Text.Json

<MudText Typo="Typo.h4" GutterBottom="true">Notification Preferences</MudText>

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudStack>
        <MudSwitch @bind-Checked="StudentWithGalleryImagesDto.Student.EmailNotifications" Label="Enable Email Notifications" Color="Color.Primary" />

        @if (StudentWithGalleryImagesDto.Student.EmailNotifications)
        {
            <MudPaper Class="p-3">
                <MudText Typo="Typo.h5" GutterBottom="true">Account & Security</MudText>
                <MudSwitch @bind-Checked="NotificationPreferencesDto.SystemLogin" Label="System Login Notifications" Color="Color.Primary" />
            </MudPaper>

            <MudPaper Class="p-3 mt-3">
                <MudText Typo="Typo.h5" GutterBottom="true">Event Notifications</MudText>
                <MudSwitch @bind-Checked="NotificationPreferencesDto.InterestBasedEvents" Label="Interest-Based Events" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.EventNotifications" Label="General Event Notifications" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.EventsIAmInterestedInNotification" Label="Events I'm Interested In" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.EventsIAmSignedUpToNotification" Label="Events I'm Signed Up To" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.EventNotificationForPeopleIFollow" Label="Event Notifications for People I Follow" Color="Color.Primary" />
            </MudPaper>

            <MudPaper Class="p-3 mt-3">
                <MudText Typo="Typo.h5" GutterBottom="true">Post Notifications</MudText>
                <MudSwitch @bind-Checked="NotificationPreferencesDto.PostsNotifications" Label="My Posts Notifications" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.CommentsNotifications" Label="Comments on My Posts" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.FriendsPosts" Label="Friends' Posts" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.FriendsPostsNotifications" Label="Friends' Posts Notifications" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.PostsRecommendation" Label="Post Recommendations" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.PostsOfPeopleIFollowNotification" Label="Posts of People I Follow" Color="Color.Primary" />
            </MudPaper>

            <MudPaper Class="p-3 mt-3">
                <MudText Typo="Typo.h5" GutterBottom="true">Friends & Requests</MudText>
                <MudSwitch @bind-Checked="NotificationPreferencesDto.NewFriendsRequests" Label="New Friend Requests" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.MyRequestsAccepted" Label="My Requests Accepted" Color="Color.Primary" />
            </MudPaper>

            <MudPaper Class="p-3 mt-3">
                <MudText Typo="Typo.h5" GutterBottom="true">Recommendations</MudText>
                <MudSwitch @bind-Checked="NotificationPreferencesDto.EventRecommendation" Label="Event Recommendations" Color="Color.Primary" />
                <MudSwitch @bind-Checked="NotificationPreferencesDto.FriendsRecommendation" Label="Friends Recommendations" Color="Color.Primary" />
            </MudPaper>
        }
    </MudStack>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveNotificationPreferencesAsync" Class="mt-3">Save Preferences</MudButton>
}

@code {
    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public NotificationPreferencesDto NotificationPreferencesDto { get; set; }

    [Parameter]
    public StudentWithGalleryImagesDto StudentWithGalleryImagesDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            var studentId = await IdentityService.GetCurrentUserIdFromJwtAsync();
            StudentWithGalleryImagesDto = await StudentsService.GetStudentWithGalleryImagesAsync(studentId);
            NotificationPreferencesDto = await StudentsService.GetUserNotificationPreferencesAsync(studentId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading preferences: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task SaveNotificationPreferencesAsync()
    {
        try
        {
            var studentId = await IdentityService.GetCurrentUserIdFromJwtAsync();
            await StudentsService.UpdateUserNotificationPreferencesAsync(studentId, NotificationPreferencesDto, StudentWithGalleryImagesDto.Student.EmailNotifications);
            Snackbar.Add("Notification preferences updated successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving notification preferences: {ex.Message}", Severity.Error);
        }
    }
}
