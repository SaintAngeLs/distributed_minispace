@page "/profile"
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IMediaFilesService MediaFilesService
@inject IOrganizationsService OrganizationsService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Astravent.Web.Wasm.Utilities
@using Astravent.Web.Wasm.Pages.Reports.Dialogs
@using System.IO
@using MudBlazor
@using System
@using System.Text.Json

<MudText Typo="Typo.h4" GutterBottom="true">Profile</MudText>
@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudGrid>
        <!-- Banner Image Section -->
        <MudItem xs="12">
            <div class="image-upload-container">
                <MudImage Class="banner-image" Src="@GetBanner()" Alt="Banner image" 
                          Style="height:auto; width:100%; max-height:200px; object-fit:cover; font-size:2rem;" />
                <InputFile OnChange="@(async e => await OpenCropper(e, "banner"))" 
                           style="display: none;" id="file-input-banner" accept=".jpeg,.png,.jpg" />
                
                <!-- Centered Buttons Below the Banner -->
                <div style="text-align: center; margin-top: 10px;">
                    <MudIconButton Icon="@Icons.Material.Filled.CloudUpload" 
                        Color="Color.Primary" 
                        Size="Size.Small" 
                        HtmlTag="label" 
                        for="file-input-banner" 
                        Style="top: 10px; right: 60px; background-color: white; border-radius: 50%; box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);" 
                        Title="Upload Banner Image" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                        Color="Color.Secondary" 
                        Size="Size.Small" 
                        OnClick="@(async () => await RemoveImage("banner"))" 
                        Style="top: 10px; right: 10px; background-color: white; border-radius: 50%; box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);" 
                        Title="Delete Banner Image" />
                </div>
            </div>
        </MudItem>

        <!-- Profile Image Section -->
        <MudItem xs="12" md="4">
            <div class="image-upload-container" style="text-align: center;">
                <MudAvatar Class="profile-image" Square="true" Image="@GetImage()" Alt="Profile image" 
                           Style="height:200px; width: 200px; font-size:2rem; margin:auto;" />
                <InputFile OnChange="@(async e => await OpenCropper(e, "profile"))" 
                           style="display: none;" id="file-input-profile" accept=".jpeg,.png,.jpg" />
                <div style="display: inline-block; margin-top: 10px;">
                    <MudIconButton Icon="@Icons.Material.Filled.CloudUpload" 
                        Color="Color.Primary" 
                        Size="Size.Small" 
                        HtmlTag="label" 
                        for="file-input-profile" 
                        Style="bottom: -10px; right: 45%; transform: translateX(70%); background-color: white; border-radius: 50%; box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);" 
                        Title="Upload Profile Image" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                        Color="Color.Secondary" 
                        Size="Size.Small" 
                        OnClick="@(async () => await RemoveImage("profile"))" 
                        Style="bottom: -10px; right: 40%; transform: translateX(30%); background-color: white; border-radius: 50%; box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);" 
                        Title="Delete Profile Image" />
                </div>
            </div>
        </MudItem>

        <!-- Form Section -->
        <MudItem xs="12" md="8">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="StudentWithGalleryImagesDto.Student.FirstName" 
                                  Label="First Name" HelperText="Your first name" 
                                  Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="StudentWithGalleryImagesDto.Student.LastName" 
                                  Label="Last Name" HelperText="Your last name" 
                                  Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="StudentWithGalleryImagesDto.Student.Email" 
                                  Label="Email" HelperText="Your email address" 
                                  Variant="Variant.Outlined" ReadOnly="true" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="StudentWithGalleryImagesDto.Student.Description" 
                                  Label="Description" HelperText="A brief description about yourself" 
                                  Variant="Variant.Outlined" Lines="5" />
                </MudItem>
            </MudGrid>

            <!-- Education Section -->
            <MudItem xs="12">
                <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Education</MudText>
                @foreach (var education in StudentWithGalleryImagesDto.Student.Education)
                {
                    <MudPaper Class=" mb-3">
                        <MudGrid>
                            <MudItem xs="2">
                                <MudAvatar Image="@GetOrganizationImageSafe(education.OrganizationId)" Size="Size.Medium" Class="rounded-circle" />
                            </MudItem>
                            <MudItem xs="12" md="12">
                                <MudTextField @bind-Value="education.InstitutionName" Label="Institution Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" md="12">
                                <MudTextField @bind-Value="education.Degree" Label="Degree" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            
                            <MudItem xs="12" md="12">
                                <MudDatePicker T="DateTime?" Label="Start Date" @bind-Date="education.StartDate" Editable="true" DisableToolbar="true" AutoClose="true" />
                            </MudItem>

                            <MudItem xs="12" md="12">
                                <MudDatePicker T="DateTime?" Label="End Date" @bind-Date="education.EndDate" Editable="true" DisableToolbar="true" AutoClose="true" />
                            </MudItem>

                            <MudItem xs="12" md="12">
                                <MudTextField @bind-Value="education.Description" Label="Description" Variant="Variant.Outlined" Lines="3" Margin="Margin.Dense" />
                            </MudItem>
                            
                            <MudItem xs="12" md="12" class="d-flex justify-content-center align-items-center">
                                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Business"
                                        OnClick="@(() => OpenAssociateOrganizationDialog("Education", education))"
                                        Disabled="@(education.OrganizationId != Guid.Empty)">
                                    Associate with Organization
                                </MudButton>
                                <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                        OnClick="() => RemoveEducation(education)">
                                    Remove
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddEducation">
                    Add Education
                </MudButton>
            </MudItem>

            <!-- Work Experience Section -->
            <MudItem xs="12">
                <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">Work Experience</MudText>
                @foreach (var work in StudentWithGalleryImagesDto.Student.Work)
                {
                    <MudPaper Class="pa-3 mb-3">
                        <MudGrid>
                            <MudItem xs="2">
                                <MudAvatar Image="@GetOrganizationImageSafe(work.OrganizationId)" Size="Size.Medium" Class="rounded-circle" />
                            </MudItem>
                            <MudItem xs="12" md="12">
                                <MudTextField @bind-Value="work.Company" Label="Company" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            
                            <MudItem xs="12" md="12">
                                <MudTextField @bind-Value="work.Position" Label="Position" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" md="12">
                                <MudDatePicker T="DateTime?" Label="Start Date" @bind-Date="work.StartDate" Editable="true" DisableToolbar="true" AutoClose="true" />
                            </MudItem>
                            
                            <MudItem xs="12" md="12">
                                <MudDatePicker T="DateTime?" Label="End Date" @bind-Date="work.EndDate" Editable="true" DisableToolbar="true" AutoClose="true" />
                            </MudItem>

                            <MudItem xs="12" md="12">
                                <MudTextField @bind-Value="work.Description" Label="Description" Variant="Variant.Outlined" Lines="3" Margin="Margin.Dense" />
                            </MudItem>

                            <MudItem xs="12" md="12" class="d-flex justify-content-center align-items-center">
                                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Business"
                                        OnClick="@(() => OpenAssociateOrganizationDialog("Work", work))"
                                        Disabled="@(work.OrganizationId != Guid.Empty)">
                                    Associate with Organization
                                </MudButton>
                                <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                        OnClick="() => RemoveWorkExperience(work)">
                                    Remove
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddWorkExperience">
                    Add Work Experience
                </MudButton>
            </MudItem>
        </MudItem>
    </MudGrid>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveProfile">
        Save profile
    </MudButton>

    @if (IsUploading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
}

<!-- Styling for smaller buttons -->
<style>
    .button-margins {
        margin-right: 8px;
        margin-bottom: 8px;
    }

    .image-upload-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>

<!-- Bootstrap Modal for Cropper -->
<div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="cropper-container" class="img-container"></div>
                @if (!string.IsNullOrEmpty(CroppedImageBase64))
                {
                    <div id="cropped-image-container" class="img-container">
                        <img src="@CroppedImageBase64" style="max-width: 100%;" />
                    </div>
                }
            </div>

            <div class="modal-footer">
                <MudButton Variant="Variant.Text" OnClick="CloseCropper">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await SaveCroppedImage()">Save</MudButton>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public IBrowserFile File { get; set; }
    [Parameter] public StudentWithGalleryImagesDto StudentWithGalleryImagesDto { get; set; }
    [Parameter] public EventCallback SaveChangesAsync { get; set; }
    [Parameter] public EventCallback SaveImageAsync { get; set; }
    [Parameter] public bool IsUploading { get; set; }
    [Inject] public IDialogService DialogService { get; set; }
    private string CroppedImageBase64 { get; set; }
    

    private IBrowserFile croppedImageFile;
    private string currentImageType = string.Empty;

    private Dictionary<Guid, string> _organizationImages = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", DotNetObjectReference.Create(this));
        }
        await LoadOrganizationImagesAsync();
    }

    private async Task LoadOrganizationImagesAsync()
    {
        foreach (var education in StudentWithGalleryImagesDto.Student.Education)
        {
            _organizationImages[education.OrganizationId] = await GetOrganizationImage(education.OrganizationId);
        }

        foreach (var work in StudentWithGalleryImagesDto.Student.Work)
        {
            _organizationImages[work.OrganizationId] = await GetOrganizationImage(work.OrganizationId);
        }
    }

    private string GetImage()
    {
        return !string.IsNullOrEmpty(StudentWithGalleryImagesDto.Student.ProfileImageUrl) 
            ? StudentWithGalleryImagesDto.Student.ProfileImageUrl 
            : "images/default_profile_image.webp";
    }

    private string GetBanner()
    {
        return !string.IsNullOrEmpty(StudentWithGalleryImagesDto.Student.BannerUrl) 
            ? StudentWithGalleryImagesDto.Student.BannerUrl 
            : "images/default_banner_image.png";
    }

    private async Task OpenCropper(InputFileChangeEventArgs e, string imageType)
    {
        const long maxAllowedSize = 10 * 1024 * 1024;
        var inputFile = e.File;
        currentImageType = imageType;

        if (inputFile != null)
        {
            if (inputFile.Size > maxAllowedSize)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"File size exceeds the allowed limit of {maxAllowedSize / (1024 * 1024)} MB.");
                return;
            }

            using var stream = inputFile.OpenReadStream(maxAllowedSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var buffer = ms.ToArray();
            var base64Image = Convert.ToBase64String(buffer);
            await JSRuntime.InvokeVoidAsync("displayImageAndInitializeCropper", base64Image, imageType);
        }
    }

    private void CloseCropper()
    {
        JSRuntime.InvokeVoidAsync("hideCropperModal");
    }

    [JSInvokable]
    public void ReceiveCroppedImage(string base64Image)
    {
        if (!string.IsNullOrEmpty(base64Image))
        {
            CroppedImageBase64 = $"data:image/png;base64,{base64Image}";
            var buffer = Convert.FromBase64String(base64Image);
            var lastModified = DateTimeOffset.Now;  
            croppedImageFile = new BrowserFile(buffer, "cropped-image.png", "image/png", lastModified);
            StateHasChanged();
        }
    }

    private async Task SaveCroppedImage()
    {
        if (croppedImageFile != null)
        {
            IsUploading = true;
            StateHasChanged();

            try
            {
                byte[] fileData;
                using (var stream = croppedImageFile.OpenReadStream(croppedImageFile.Size))
                using (var ms = new MemoryStream())
                {
                    await stream.CopyToAsync(ms);
                    fileData = ms.ToArray();
                }

                string imageType = currentImageType == "profile" ? "StudentProfileImage" : "StudentBannerImage";
                var response = await MediaFilesService.UploadMediaFileAsync(
                    StudentWithGalleryImagesDto.Student.Id,
                    imageType,
                    IdentityService.GetCurrentUserId(),
                    $"{StudentWithGalleryImagesDto.Student.FirstName}_{StudentWithGalleryImagesDto.Student.LastName}_{currentImageType}.png",
                    croppedImageFile.ContentType,
                    fileData);

                StateHasChanged();
                await SaveImageAsync.InvokeAsync(null);

                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
            }

            IsUploading = false;
            StateHasChanged();
            CloseCropper();
        }
    }

    private async Task RemoveImage(string imageType)
    {
        IsUploading = true;
        StateHasChanged();

        try
        {
            string imageUrl = imageType == "profile" ? StudentWithGalleryImagesDto.Student.ProfileImageUrl : StudentWithGalleryImagesDto.Student.BannerUrl;
            await MediaFilesService.DeleteMediaFileAsync(imageUrl);
            if (imageType == "profile")
            {
                StudentWithGalleryImagesDto.Student.ProfileImageUrl = null;
            }
            else
            {
                StudentWithGalleryImagesDto.Student.BannerUrl = null;
            }
            await SaveImageAsync.InvokeAsync(null);

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred while removing the image: {ex.Message}");
        }

        IsUploading = false;
        StateHasChanged();
    }

    private void AddEducation()
    {
        var educationList = StudentWithGalleryImagesDto.Student.Education.ToList();
        educationList.Add(new EducationDto
        {
            OrganizationId = Guid.Empty,
            InstitutionName = string.Empty,
            Degree = string.Empty,
            StartDate = null,
            EndDate = null,
            Description = string.Empty
        });
        StudentWithGalleryImagesDto.Student.Education = educationList;
        StateHasChanged();
    }

    private void RemoveEducation(EducationDto education)
    {
        var educationList = StudentWithGalleryImagesDto.Student.Education.ToList();
        educationList.Remove(education);
        StudentWithGalleryImagesDto.Student.Education = educationList;
        StateHasChanged();
    }


    private void AddWorkExperience()
    {
        var workList = StudentWithGalleryImagesDto.Student.Work.ToList();
        workList.Add(new WorkDto
        {
            OrganizationId = Guid.Empty,
            Company = string.Empty,
            Position = string.Empty,
            StartDate = null, // Initialize as null
            EndDate = null, // Initialize as null
            Description = string.Empty
        });

        StudentWithGalleryImagesDto.Student.Work = workList;
        StateHasChanged();
    }


    private void RemoveWorkExperience(WorkDto work)
    {
        var workList = StudentWithGalleryImagesDto.Student.Work.ToList();
        workList.Remove(work);
        StudentWithGalleryImagesDto.Student.Work = workList;
        StateHasChanged();
    }

    private async Task SaveProfile()
{
    var studentDto = StudentWithGalleryImagesDto.Student;

    try
    {
        // Log Education JSON
        var educationJson = JsonSerializer.Serialize(studentDto.Education, new JsonSerializerOptions { WriteIndented = true });
        Console.WriteLine("Education Data (Before Sending):");
        Console.WriteLine(educationJson);

        // Log Work JSON
        var workJson = JsonSerializer.Serialize(studentDto.Work, new JsonSerializerOptions { WriteIndented = true });
        Console.WriteLine("Work Data (Before Sending):");
        Console.WriteLine(workJson);

        // Proceed to save changes
        await SaveChangesAsync.InvokeAsync(null);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred: {ex.Message}");
    }
}



    private async Task OpenAssociateOrganizationDialog(string type, object entity)
    {
        var parameters = new DialogParameters
        {
            { "Type", type },
            { "Entity", entity }
        };

        var dialog = DialogService.Show<AssociateOrganizationDialog>("Associate with Organization", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // Update the entity with the selected organization
            var organization = (OrganizationDto)result.Data;
            if (type == "Education")
            {
                var education = (EducationDto)entity;
                education.OrganizationId = organization.Id;
                education.InstitutionName = organization.Name;
            }
            else if (type == "Work")
            {
                var work = (WorkDto)entity;
                work.OrganizationId = organization.Id;
                work.Company = organization.Name;
            }
        }
    }

     private async Task<string> GetOrganizationImage(Guid organizationId)
    {
        if (organizationId == Guid.Empty)
        {
            return "images/default_org_image.png"; 
        }

        if (_organizationImages.ContainsKey(organizationId))
        {
            return _organizationImages[organizationId];
        }

        var organization = await OrganizationsService.GetOrganizationAsync(organizationId);
        var imageUrl = organization?.ImageUrl ?? "images/default_org_image.png";
        _organizationImages[organizationId] = imageUrl;

        return imageUrl;
    }

    private string GetOrganizationImageSafe(Guid organizationId)
    {
        if (!_organizationImages.ContainsKey(organizationId))
        {
            return "images/default_org_image.png";
        }

        return _organizationImages[organizationId];
    }
}
