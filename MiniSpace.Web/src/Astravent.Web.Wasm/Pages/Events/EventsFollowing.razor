@page "/events/following"
@inject IEventsService EventsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using MudBlazor
@using Astravent.Web.Wasm.DTO.Events
@using System.Threading.Tasks
@using Astravent.Web.Wasm.Areas.Events.CommandsDto
@using Astravent.Web.Wasm.Pages.Events.Components

<AuthWrapper>
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">Your Events</MudText>

        <MudTabs>
            <MudTab Label="Signed Up">
                <MudGrid Spacing="3" Class="mt-4">
                    @if (isLoading)
                    {
                        <!-- Show Skeletons while loading -->
                        @for (int i = 0; i < 6; i++)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard Class="my-2" Style="position:relative;">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                    <MudCardContent>
                                        <MudSkeleton Width="30%" Height="42px;" />
                                        <MudSkeleton Width="80%" />
                                        <MudSkeleton Width="100%" />
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudSkeleton Width="64px" Height="40px" />
                                        <MudSkeleton Width="105px" Height="40px" />
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    }
                    else if (signedUpEvents?.Any() ?? false)
                    {
                        <!-- Use EventList component for signed-up events -->
                        <EventList Events="signedUpEvents" OnViewEvent="ViewEvent" OnSignUpToEvent="SignUpToEvent" OnShowInterestInEvent="ShowInterestInEvent" />
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-6">No signed-up events found.</MudText>
                    }
                </MudGrid>
            </MudTab>

            <MudTab Label="Interested">
                <MudGrid Spacing="3" Class="mt-4">
                    @if (isLoading)
                    {
                        <!-- Show Skeletons while loading -->
                        @for (int i = 0; i < 6; i++)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard Class="my-2" Style="position:relative;">
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                                    <MudCardContent>
                                        <MudSkeleton Width="30%" Height="42px;" />
                                        <MudSkeleton Width="80%" />
                                        <MudSkeleton Width="100%" />
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudSkeleton Width="64px" Height="40px" />
                                        <MudSkeleton Width="105px" Height="40px" />
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    }
                    else if (interestedEvents?.Any() ?? false)
                    {
                        <!-- Use EventList component for interested events -->
                        <EventList Events="interestedEvents" OnViewEvent="ViewEvent" OnSignUpToEvent="SignUpToEvent" OnShowInterestInEvent="ShowInterestInEvent" />
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-6">No events of interest found.</MudText>
                    }
                </MudGrid>
            </MudTab>
        </MudTabs>
    </MudContainer>
</AuthWrapper>

@code {
    private List<EventDto> signedUpEvents = new();
    private List<EventDto> interestedEvents = new();
    private bool isLoading = true;  // Loading indicator
    private bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Ensure the user is authenticated
            await IdentityService.InitializeAuthenticationState();
            _isAuthenticated = IdentityService.IsAuthenticated;

            if (_isAuthenticated)
            {
                await LoadUserEvents();
            }
            else
            {
                NavigationManager.NavigateTo("/signin", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
            Snackbar.Add($"Initialization error: {ex.Message}", Severity.Error);
            isLoading = false;
        }
    }

   private async Task LoadUserEvents()
{
    try
    {
        isLoading = true;  // Start loading
        var userId = await IdentityService.GetCurrentUserIdFromJwtAsync();

        if (userId == Guid.Empty)
        {
            throw new InvalidOperationException("User ID could not be retrieved.");
        }

        // Load signed-up events
        var signedUpEventsResult = await EventsService.GetUserEventsAsync(userId, 1, int.MaxValue, "SignedUp");
        signedUpEvents = signedUpEventsResult?.Items?.ToList() ?? new List<EventDto>();

        Console.WriteLine("Signed Up Events:");
        foreach (var evt in signedUpEvents)
        {
            Console.WriteLine(evt.Name);  // Print event names to see if data is being assigned
        }

        // Load interested events
        var interestedEventsResult = await EventsService.GetUserEventsAsync(userId, 1, int.MaxValue, "InterestedIn");
        interestedEvents = interestedEventsResult?.Items?.ToList() ?? new List<EventDto>();

        Console.WriteLine("Interested Events:");
        foreach (var evt in interestedEvents)
        {
            Console.WriteLine(evt.Name);  // Print event names to see if data is being assigned
        }

        if (!signedUpEvents.Any() && !interestedEvents.Any())
        {
            Snackbar.Add("No events found that match your criteria.", Severity.Info);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading user events: {ex.Message}");
        Snackbar.Add($"Error loading your events: {ex.Message}", Severity.Error);
    }
    finally
    {
        isLoading = false;  // Stop loading
    }
}


    private void ViewEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/events/event/{eventId}");
    }

    private async Task SignUpToEvent(Guid eventId)
    {
        if (!_isAuthenticated)
        {
            Snackbar.Add("Please sign in to sign up for events.", Severity.Warning);
            NavigationManager.NavigateTo("/signin");
            return;
        }

        try
        {
            var command = new SignUpToEventCommand
            {
                EventId = eventId,
                StudentId = await IdentityService.GetCurrentUserIdFromJwtAsync()
            };

            await EventsService.SignUpToEventAsync(command);
            Snackbar.Add("Successfully signed up for the event.", Severity.Success);
            await LoadUserEvents(); // Refresh events to reflect the updated status
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while signing up: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowInterestInEvent(Guid eventId)
    {
        if (!_isAuthenticated)
        {
            Snackbar.Add("Please sign in to show interest in events.", Severity.Warning);
            NavigationManager.NavigateTo("/signin");
            return;
        }

        try
        {
            var command = new ShowInterestInEventCommand
            {
                EventId = eventId,
                StudentId = await IdentityService.GetCurrentUserIdFromJwtAsync()
            };

            await EventsService.ShowInterestInEventAsync(command);
            Snackbar.Add("Your interest in the event has been noted.", Severity.Info);
            await LoadUserEvents(); // Refresh events to reflect the updated status
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while showing interest: {ex.Message}", Severity.Error);
        }
    }

    private string GetBannerUrl(EventDto eventDto)
    {
        return eventDto != null && !string.IsNullOrWhiteSpace(eventDto.BannerUrl) ? eventDto.BannerUrl : "/images/default_media_file_image.png";
    }
}
