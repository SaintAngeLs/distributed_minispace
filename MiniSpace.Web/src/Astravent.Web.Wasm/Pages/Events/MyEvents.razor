@page "/events/my-events"
@inject IEventsService EventsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@using Astravent.Web.Wasm.Pages.Events.Components
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">My Events</MudText>

    @if (isLoading)
    {
        <!-- Show Skeletons while loading -->
        <MudGrid Spacing="3">
            @for (int i = 0; i < 6; i++) // Placeholder skeletons while loading
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="my-2" Style="position:relative;">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                        <MudCardContent>
                            <MudSkeleton Width="30%" Height="42px;" />
                            <MudSkeleton Width="80%" />
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudSkeleton Width="64px" Height="40px" />
                            <MudSkeleton Width="105px" Height="40px" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <!-- Event List -->
        <EventList Events="events" OnViewEvent="ViewEvent" OnSignUpToEvent="SignUpToEvent" OnShowInterestInEvent="ShowInterestInEvent" />
    }

    <MudDivider Class="my-4" />

    <!-- Pagination -->
    <MudPagination @bind-SelectedPage="currentPage" PageSizeOptions="@pageSizeOptions" PageSize="pageSize"
                   TotalItems="totalItems" OnPageChanged="OnPageChanged" />
</MudContainer>

<MudSnackbarProvider />

@code {
    private List<EventDto> events = new();
    private int totalItems;
    private int currentPage = 1;
    private int pageSize = 9;
    private readonly int[] pageSizeOptions = { 6, 9, 12 };
    private bool isLoading = false;  // Loading indicator

    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Start loading
        await LoadEvents();
        isLoading = false; // Stop loading
    }

    private async Task LoadEvents()
    {
        try
        {
            var organizerId = await IdentityService.GetCurrentUserIdFromJwtAsync(); // Get user ID from JWT
            var response = await EventsService.GetMyEventsAsync(organizerId, currentPage, pageSize);

            events = response.Items.ToList();
            totalItems = response.TotalItems;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadEvents();
    }

    private void ViewEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/events/event/{eventId}");
    }

    private async Task SignUpToEvent(Guid eventId)
    {
        try
        {
            var command = new SignUpToEventCommand
            {
                EventId = eventId,
                StudentId = await IdentityService.GetCurrentUserIdFromJwtAsync() // Get user ID from JWT
            };
            await EventsService.SignUpToEventAsync(command);
            Snackbar.Add("Successfully signed up for the event.", Severity.Success);
            await LoadEvents(); // Reload to reflect sign-up changes
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while signing up: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowInterestInEvent(Guid eventId)
    {
        try
        {
            var command = new ShowInterestInEventCommand
            {
                EventId = eventId,
                StudentId = await IdentityService.GetCurrentUserIdFromJwtAsync() // Get user ID from JWT
            };
            await EventsService.ShowInterestInEventAsync(command);
            Snackbar.Add("Your interest in the event has been noted.", Severity.Info);
            await LoadEvents(); // Reload to reflect interest changes
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while showing interest: {ex.Message}", Severity.Error);
        }
    }
}
