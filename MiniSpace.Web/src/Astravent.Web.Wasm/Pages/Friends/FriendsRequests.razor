@page "/friends/requests"
@using Astravent.Web.Wasm.HttpClients
@using MudBlazor
@inject NavigationManager NavigationManager
@using Astravent.Web.Wasm.Areas.Friends
@inject IFriendsService FriendsService
@using Astravent.Web.Wasm.DTO
@using Astravent.Web.Wasm.Areas.Identity
@inject IIdentityService IdentityService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime


<AuthWrapper>
    <MudContainer>
        <div class="breadcrumbs-container">
            <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
        </div>

        <h3>Incoming Friend Requests</h3>

        <div style="display: flex;">
            <div class="left-panel">
                <div class="search-bar">
                    <MudTextField @bind-Value="searchTerm" Placeholder="Search incoming requests..." Style="width: 75%;" />
                    <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@SearchIncomingRequests" Style="margin-left: 10px; width: 23%;">
                        <MudIcon Icon="@Icons.Material.Filled.Search" />
                        <span class="button-text">Search</span>
                    </MudButton>
                </div>
                @if (!pageInitialized)
                {
                    <div style="display: flex; justify-content: center; align-items: center;">
                        <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                    </div>
                }
                else if (filteredIncomingRequests != null && filteredIncomingRequests.Any())
                {
                    @foreach (var request in filteredIncomingRequests)
                    {
                        <div class="friend-card" @onclick="@(() => RedirectToDetails(request.InviterId))">
                            <div class="friend-row">
                                <img src="@GetProfileImageUrl(request.InviterImage)" alt="Inviter Image" class="friend-img" onerror="this.onerror=null;this.src='images/default_profile_image.webp';">
                                <div class="friend-info">
                                    <h5>@request.InviterName</h5>
                                    <p>@request.InviterEmail</p>
                                    <p>@request.RequestedAt.ToLocalTime().ToString("yyyy-MM-dd")</p>
                                    <p>@request.State</p>
                                </div>
                                <div class="buttons">
                                    <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@(() => DeclineRequest(request.Id))" Class="action-button">
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" />
                                        <span class="button-text">Decline</span>
                                    </MudButton>
                                    <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@(() => AcceptRequest(request.Id))" Class="action-button" Style="margin-right: 10px;">
                                        <MudIcon Icon="@Icons.Material.Filled.Check" />
                                        <span class="button-text">Accept</span>
                                    </MudButton>
                                </div>
                            </div>
                        </div>
                    }

                    @if (hasMorePages)
                    {
                        <MudButton Variant="MudBlazor.Variant.Text" OnClick="LoadMoreRequests" Style="width: 100%;">
                            <MudIcon Icon="@Icons.Material.Filled.MoreHoriz" />
                            <span>Load More</span>
                        </MudButton>
                    }
                }
                else
                {
                    <p>No incoming requests.</p>
                }
            </div>
        </div>
    </MudContainer>
</AuthWrapper>

<style>
    .notification-block {
        position: fixed; 
        top: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 300px;
    }

    .main-container { 
        overflow: visible; 
        display: flex;   
        align-items: 
        flex-start; 
    }

    .left-panel {  
        width: 100%;   
        overflow-y: auto; 
    }

    .right-panel {
        width: 70%; 
        padding: 25px;
        position: sticky;
        top: 100px; 
        background-color: white; 
    }

    .left-panel, .right-panel {
        background-color: #f7f7f7; 
        border-radius: 8px;

        box-shadow: 0 4px 10px rgba(0,0,0,0.05); 
    }
    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
        }
    
    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-row {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #007BFF;
        margin-right: 20px;
    }

    .friend-info {
        flex: 2;
    }

    .buttons {
        display: flex;
        flex-direction: row;
        gap: 8px;
        margin-left: auto;
    }

    .action-button {
        display: flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .button-text {
        display: inline-block;
        margin-left: 8px;
    }

    .search-bar input:focus {
        outline: none;
        border: 2px solid #0056b3;
        box-shadow: 0 0 5px rgba(0, 86, 179, 0.5);
    }

</style>

@code {
    private string searchTerm;
    private List<FriendRequestDto> incomingRequests = new List<FriendRequestDto>();
    private List<FriendRequestDto> filteredIncomingRequests = new List<FriendRequestDto>();
    private bool pageInitialized = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRequests;
    private bool hasMorePages => incomingRequests.Count < totalRequests;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/home", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", icon: Icons.Material.Filled.PersonSearch),
        new BreadcrumbItem("Friends", href: "/friends", icon: Icons.Material.Filled.LibraryAddCheck),
        new BreadcrumbItem("Requests", href: "/friends/requests", disabled: true, icon: Icons.Material.Filled.GroupAdd),
    };

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();

        if (IdentityService.IsAuthenticated)
        {
            await LoadIncomingRequests();
            pageInitialized = true;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private string GetProfileImageUrl(string profileImageUrl)
    {
        return string.IsNullOrEmpty(profileImageUrl) ? "images/default_profile_image.webp" : profileImageUrl;
    }

    private async Task LoadIncomingRequests()
    {
        try
        {
            var result = await FriendsService.GetIncomingFriendRequestsAsync(currentPage, pageSize);
            if (result != null)
            {
                incomingRequests.AddRange(result.Items);
                totalRequests = result.TotalItems;
                filteredIncomingRequests = incomingRequests;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Failed to Load Requests", $"An error occurred: {ex.Message}", 5000);
        }
    }

    private async Task LoadMoreRequests()
    {
        currentPage++;
        await LoadIncomingRequests();
    }

    private void SearchIncomingRequests()
    {
        filteredIncomingRequests = string.IsNullOrWhiteSpace(searchTerm)
            ? incomingRequests
            : incomingRequests.Where(x => x.InviterName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void RedirectToDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/user-details/{id}");
    }

    private async Task AcceptRequest(Guid requestId)
    {
        var request = incomingRequests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            await FriendsService.AcceptFriendRequestAsync(new FriendRequestActionDto
            {
                RequestId = requestId,
                RequesterId = request.InviterId,
                FriendId = request.InviteeId
            });
            await JSRuntime.InvokeVoidAsync("playNotificationSound");
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Friend Request Accepted", duration: 4000);
            incomingRequests.Remove(request);
            SearchIncomingRequests(); // Reapply search filter to update the UI
        }
    }

    private async Task DeclineRequest(Guid requestId)
    {
        var request = incomingRequests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            await FriendsService.DeclineFriendRequestAsync(new FriendRequestActionDto
            {
                RequestId = requestId,
                RequesterId = request.InviterId,
                FriendId = request.InviteeId
            });
            incomingRequests.Remove(request);
            SearchIncomingRequests(); // Reapply search filter to update the UI
            NotificationService.Notify(Radzen.NotificationSeverity.Warning, "Request Declined", duration: 4000);
        }
    }
}