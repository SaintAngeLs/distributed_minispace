@page "/organizations/{OrganizationId:guid}/suborganizations"
@inject IOrganizationsService OrganizationsService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using Astravent.Web.Wasm.DTO.Organizations
@using MudBlazor

<MudContainer Class="pa-4">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Class="my-4" />
    }
    else if (subOrganizations == null || !subOrganizations.Any())
    {
        <MudText Color="Color.Secondary">No sub-organizations found.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var subOrg in subOrganizations)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Class="my-4">
                        <MudCardMedia Image="@GetImageUrl(subOrg.ImageUrl)" Height="140" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@subOrg.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@subOrg.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigateToSubOrganization(subOrg.Id))">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }

    <MudPaginator Page="@currentPage" PageSize="@pageSize" TotalItems="@totalItems" OnPageChanged="OnPageChanged" />
</MudContainer>

@code {
    [Parameter]
    public Guid OrganizationId { get; set; }

    private List<OrganizationDto> subOrganizations;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubOrganizations();
    }

    private async Task LoadSubOrganizations()
    {
        isLoading = true;
        try
        {
            var result = await OrganizationsService.GetChildrenOrganizationsAsync(OrganizationId, currentPage, pageSize);
            subOrganizations = result.Items.ToList();
            totalItems = result.TotalItems;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load sub-organizations: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnPageChanged(int page)
    {
        currentPage = page;
        _ = LoadSubOrganizations();
    }

    private void NavigateToSubOrganization(Guid subOrganizationId)
    {
        NavigationManager.NavigateTo($"/organizations/details/{subOrganizationId}");
    }

    private string GetImageUrl(string imageUrl)
    {
        return string.IsNullOrWhiteSpace(imageUrl) ? "/images/default_organization_profile_image.png" : imageUrl;
    }
}
