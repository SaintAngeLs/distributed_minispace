@using MudBlazor

<MudPaper Class="pa-4" Style="background-color:#f9f9f9; border-radius: 12px;">
    <!-- Markdown TextField for Input -->
    <MudTextField @bind-Value="MarkdownText" Label="Markdown Text" Multiline="true" Lines="10" FullWidth Immediate="true" Class="mb-2" Required="true" id="markdown-editor" />

    <!-- Toolbar with Buttons in a Row -->
    <MudGrid Class="mt-2" Gutter="2">
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("bold"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.FormatBold" Class="toolbar-btn">
                Bold
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("italic"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.FormatItalic" Class="toolbar-btn">
                Italic
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("heading"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Title" Class="toolbar-btn">
                Heading
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("link"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Link" Class="toolbar-btn">
                Link
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(async () => await ApplyMarkdown("code"))" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Code" Class="toolbar-btn">
                Code
            </MudButton>
        </MudItem>
    </MudGrid>

    <!-- Styles for a modern toolbar -->
    <style>
        .toolbar-btn {
            margin: 0 6px;
            min-width: 48px;
            height: 36px;
        }

        #markdown-editor {
            font-size: 1rem;
            border-radius: 8px;
        }
    </style>
</MudPaper>

@code {
    [Parameter]
    public string MarkdownText { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> MarkdownTextChanged { get; set; }

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    // JavaScript interop to manipulate selected text
    private async Task ApplyMarkdown(string action)
    {
        var selectedText = await JSRuntime.InvokeAsync<string>("getSelectedText", "markdown-editor");

        switch (action)
        {
            case "bold":
                InsertText("**", "**", selectedText);
                break;
            case "italic":
                InsertText("_", "_", selectedText);
                break;
            case "heading":
                InsertText("### ", "", selectedText);
                break;
            case "link":
                InsertText("[", "]()", selectedText);
                break;
            case "code":
                InsertText("`", "`", selectedText);
                break;
        }
    }

    private void InsertText(string prefix, string suffix, string selectedText)
    {
        if (!string.IsNullOrEmpty(selectedText))
        {
            var newText = $"{prefix}{selectedText}{suffix}";
            MarkdownText = MarkdownText.Replace(selectedText, newText);
        }
        else
        {
            MarkdownText += $"{prefix}{suffix}";
        }

        MarkdownTextChanged.InvokeAsync(MarkdownText);
    }
}
