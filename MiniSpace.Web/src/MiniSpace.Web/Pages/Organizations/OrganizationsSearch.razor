@page "/organizations/search"
@inject IOrganizationsService OrganizationsService
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService
@using MudBlazor
@using MiniSpace.Web.DTO.Organizations
@using System.Threading.Tasks

<AuthWrapper>
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" GutterBottom="true">Discover Organizations</MudText>

        <MudTextField @bind-Value="_searchQuery" Placeholder="Search organizations..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnKeyUp="@(async (e) => await SearchOrganizations())" />

        <MudGrid Class="mt-4">
            @if (_organizations != null && _organizations.Items != null && _organizations.Items.Any())
            {
                @foreach (var organization in _organizations.Items)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class="ma-2" Style="height: 100%;">
                            <MudCardMedia Image="@organization.ImageUrl" Height="140" />
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@organization.Name</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">@organization.Description</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Primary">Users: @organization.Users.Count()</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigateToOrganization(organization.Id)">
                                    View
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
            else if (_organizations == null || _organizations.Items == null)
            {
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Loading organizations...</MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">No organizations found.</MudText>
            }
        </MudGrid>

        <MudDivider Class="my-4" />

        <MudPagination @bind-SelectedPage="_currentPage" PageSizeOptions="@pageSizeOptions" PageSize="@_pageSize" 
                       TotalItems="@_totalItems" OnPageChanged="OnPageChanged" />

        <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">
            Page @_currentPage of @_totalPages
        </MudText>
    </MudPaper>
</AuthWrapper>

@code {
    private string _searchQuery = string.Empty;
    private PagedResult<OrganizationDto> _organizations;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages;
    private int _totalItems;
    private readonly int[] pageSizeOptions = { 6, 10, 15, 20 };
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;

            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                await SearchOrganizations();
            }
            else
            {
                NavigationManager.NavigateTo("/signin", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SearchOrganizations()
    {
        try
        {
            _isLoading = true;
            _organizations = await OrganizationsService.GetPaginatedOrganizationsAsync(_currentPage, _pageSize, _searchQuery);
            _totalPages = _organizations?.TotalPages ?? 0;
            _totalItems = _organizations?.TotalItems ?? 0;
            _isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching organizations: {ex.Message}");
            _isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await SearchOrganizations();
    }

    private void NavigateToOrganization(Guid organizationId)
    {
        NavigationManager.NavigateTo($"/organizations/details/{organizationId}");
    }
}
