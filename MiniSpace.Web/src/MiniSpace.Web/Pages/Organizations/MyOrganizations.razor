@page "/organizations/my"
@inject IOrganizationsService OrganizationsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IIdentityService IdentityService
@using MudBlazor
@using MiniSpace.Web.DTO.Organizations
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks

<AuthWrapper>
    <MudText Typo="Typo.h5" GutterBottom="true">My Organizations</MudText>

    <MudPaper Elevation="1" Class="pa-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateOrganization">
            Create Organization
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.AccountTree" OnClick="ViewTree">
            View Tree
        </MudButton>

        <MudGrid Class="mt-4">
            @if (_isLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            else if (_organizations != null && _organizations.Any())
            {
                @foreach (var organization in _organizations)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="ma-2">
                            <MudCardMedia Image="@organization.ImageUrl" Height="140" />
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@organization.Name</MudText>
                                <MudText Typo="Typo.body2">@organization.Description</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Primary">Users: @organization.UserCount</MudText> 
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Outlined" OnClick="() => NavigateToOrganization(organization.Id)">
                                    View
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
            else
            {
                <MudText>No organizations found.</MudText>
            }
        </MudGrid>
    </MudPaper>
</AuthWrapper>

@code {
    private bool _isLoading = true;
    private List<OrganizationDto> _organizations;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                var userId = IdentityService.GetCurrentUserId();
                var userOrganizations = await OrganizationsService.GetUserOrganizationsAsync(userId);

                _organizations = FlattenOrganizations(userOrganizations).ToList();
            }
            else
            {
                NavigationManager.NavigateTo("/signin", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load organizations: {ex.Message}", Severity.Error);
        }

        _isLoading = false;
    }

    private IEnumerable<OrganizationDto> FlattenOrganizations(IEnumerable<UserOrganizationsDto> userOrganizations)
    {
        foreach (var userOrg in userOrganizations)
        {
            yield return new OrganizationDto
            {
                Id = userOrg.Id,
                Name = userOrg.Name,
                Description = userOrg.Description,
                OwnerId = userOrg.OwnerId,
                ImageUrl = userOrg.ImageUrl,
                BannerUrl = userOrg.BannerUrl,
                Users = userOrg.Users 
            };

            if (userOrg.SubOrganizations != null)
            {
                foreach (var subOrg in FlattenOrganizations(userOrg.SubOrganizations))
                {
                    yield return subOrg;
                }
            }
        }
    }

    private void CreateOrganization()
    {
        NavigationManager.NavigateTo("/organizations/create");
    }

    private void NavigateToOrganization(Guid organizationId)
    {
        NavigationManager.NavigateTo($"/organizations/details/{organizationId}");
    }

    private void ViewTree()
    {
        NavigationManager.NavigateTo("/organizations/tree");
    }
}
