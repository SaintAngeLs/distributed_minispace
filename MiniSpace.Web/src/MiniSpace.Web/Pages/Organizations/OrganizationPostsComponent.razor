@page "/organizations/{OrganizationId:guid}/posts"
@inject IOrganizationsService OrganizationsService
@inject IPostsService PostsService
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Organizations
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Data.Posts
@using MiniSpace.Web.DTO.Enums
@using MudBlazor

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Class="my-4" />
    }
    else
    {
        @if (posts == null || !posts.Any())
        {
            <MudText Typo="Typo.body1" Align="Align.Center">No posts available for this organization.</MudText>
        }
        <MudGrid Justify="Justify.Center">
            @if (canCreatePosts)
            {
                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateNewPost" StartIcon="@Icons.Material.Filled.Add">
                        Create New Post
                    </MudButton>
                </MudItem>
            }

            @foreach (var post in posts)
            {
                <MudItem xs="12">
                    <MudCard Class="post-card mb-4" Elevation="2">
                        <MudCardContent>
                            <MudGrid justify-start  AlignItems="AlignItems.Center">
                                <MudItem xs="1" Class="pr-2">
                                    <MudAvatar Size="Size.Large" Image="@GetUserAvatar(post.UserId.Value)" />
                                </MudItem>
                                <MudItem xs="11">
                                    <MudText Typo="Typo.subtitle1" Class="mb-1">@GetUserName(post.UserId.Value)</MudText>
                                    <MudText Typo="Typo.caption" Class="text-muted">@post.CreatedAt.ToString("g")</MudText>
                                </MudItem>
                            </MudGrid>

                            <MudText Typo="Typo.body1" Class="mt-2">@post.TextContent</MudText>

                            @if (post.MediaFiles != null && post.MediaFiles.Any())
                            {
                                <MudImage Src="@post.MediaFiles.First()" Alt="Post image" Class="mt-2" Style="width: 100%;" />
                            }
                        </MudCardContent>
                        <MudCardActions Class="justify-between">
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToPostDetails(post.Id)">View</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Secondary">Like</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Secondary">Comment</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        <MudGrid Justify="Justify.Center" Class="mt-4">
            <MudItem>
                <MudPagination @bind-CurrentPage="currentPage" TotalItems="@totalItems" ItemsPerPage="pageSize" OnPageChanged="OnPageChanged" />
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid OrganizationId { get; set; }

    private List<PostDto> posts = new();
    private Dictionary<Guid, StudentDto> studentsCache = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private bool isLoading = true;
    private bool canCreatePosts = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganizationPostsAsync();
        await CheckUserPermissionsAsync();
    }

    private async Task LoadOrganizationPostsAsync()
    {
        isLoading = true;

        try
        {
            var searchParams = new SearchPosts
            {
                OrganizationId = OrganizationId,
                Pageable = new PageableDto
                {
                    Page = currentPage,
                    Size = pageSize,
                    Sort = new SortDto
                    {
                        SortBy = new[] { "CreatedAt" },
                        Direction = "desc"
                    }
                }
            };

            var response = await PostsService.SearchPostsAsync(searchParams);

            if (response != null && response.IsSuccessStatusCode)
            {
                var result = response.Content;

                if (result != null && result.Items != null)
                {
                    posts = result.Items.ToList();
                    totalItems = result.TotalItems;

                    foreach (var post in posts.Where(p => p.UserId.HasValue))
                    {
                        if (!studentsCache.ContainsKey(post.UserId.Value))
                        {
                            var student = await StudentsService.GetStudentAsync(post.UserId.Value);
                            if (student != null)
                            {
                                studentsCache[post.UserId.Value] = student;
                            }
                        }
                    }
                }
                else
                {
                    Snackbar.Add("No posts found for this organization.", Severity.Warning);
                    posts = new List<PostDto>();
                }
            }
            else
            {
                Snackbar.Add($"Failed to load posts: {response?.ErrorMessage?.Reason}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

     private async Task CheckUserPermissionsAsync()
    {
        try
        {
            var currentUserId = IdentityService.GetCurrentUserId();

            var organizationDetails = await OrganizationsService.GetOrganizationWithGalleryAndUsersAsync(OrganizationId);

            var organizationDetailsJson = System.Text.Json.JsonSerializer.Serialize(organizationDetails, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            Console.WriteLine("Organization Details: " + organizationDetailsJson);

            if (organizationDetails == null || organizationDetails.OrganizationDetails == null)
            {
                Snackbar.Add("Failed to load organization details.", Severity.Error);
                return;
            }


            if (organizationDetails.Users == null || !organizationDetails.Users.Any())
            {
                Snackbar.Add("No users found in this organization.", Severity.Error);
                return;
            }

            var currentUserRole = organizationDetails.Users.FirstOrDefault(u => u.Id == currentUserId)?.Role;

            if (currentUserRole == null)
            {
                Snackbar.Add("User role not found in this organization.", Severity.Warning);
                return;
            }

            var organizationRole = organizationDetails.OrganizationDetails.Roles.FirstOrDefault(r => r.Id == currentUserRole.Id);

            if (organizationRole == null)
            {
                Snackbar.Add("User's role is not defined in the organization roles.", Severity.Error);
                return;
            }

            if (organizationRole.Permissions != null && organizationRole.Permissions.TryGetValue(Permission.MakePosts, out bool canPost) && canPost)
            {
                canCreatePosts = true;
                Console.WriteLine("User has permission to create posts.");
            }
            else
            {
                Snackbar.Add("User does not have permission to create posts.", Severity.Warning);
                Console.WriteLine("User does NOT have permission to create posts.");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to check user permissions: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception in CheckUserPermissionsAsync: {ex.Message}");
        }
    }






    private string GetUserAvatar(Guid userId)
    {
        if (studentsCache.ContainsKey(userId))
        {
            return studentsCache[userId].ProfileImageUrl ?? string.Empty;
        }
        return string.Empty;
    }

    private string GetUserName(Guid userId)
    {
        if (studentsCache.ContainsKey(userId))
        {
            return $"{studentsCache[userId].FirstName} {studentsCache[userId].LastName}";
        }
        return "Unknown User";
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadOrganizationPostsAsync();
    }

    private void NavigateToPostDetails(Guid postId)
    {
        NavigationManager.NavigateTo($"/organizations/{OrganizationId}/posts/{postId}");
    }

    private void CreateNewPost()
    {
        NavigationManager.NavigateTo($"/organizations/{OrganizationId}/posts/create");
    }
}
