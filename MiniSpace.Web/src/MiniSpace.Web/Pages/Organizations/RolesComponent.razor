@page "/organizations/edit/{OrganizationId:guid}/roles"
@inject IOrganizationsService OrganizationsService
@inject IIdentityService IdentityService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using MiniSpace.Web.DTO.Organizations
@using MiniSpace.Web.DTO.Enums
@using MudBlazor
@code {
    [Parameter] public Guid OrganizationId { get; set; }
    private OrganizationDetailsDto organizationDetails;
    private RoleDto newRole = new RoleDto { Permissions = new Dictionary<Permission, bool>() };
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                organizationDetails = await OrganizationsService.GetOrganizationDetailsAsync(OrganizationId);
                foreach (Permission permission in Enum.GetValues(typeof(Permission)))
                {
                    newRole.Permissions.Add(permission, false);
                }
            }
            else
            {
                NavigationManager.NavigateTo("/signin", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load organization roles.", Severity.Error);
            Console.Error.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateRole()
    {
        try
        {
            var command = new CreateOrganizationRoleCommand
            {
                Name = newRole.Name,
                Description = newRole.Description,
                Permissions = newRole.Permissions
            };

            var response = await OrganizationsService.CreateOrganizationRoleAsync(OrganizationId, command);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Role created successfully.", Severity.Success);
                organizationDetails.Roles.Add(newRole);
                newRole = new RoleDto { Permissions = new Dictionary<Permission, bool>() };
                foreach (Permission permission in Enum.GetValues(typeof(Permission)))
                {
                    newRole.Permissions.Add(permission, false);
                }
            }
            else
            {
                Snackbar.Add("Failed to create role.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while creating the role.", Severity.Error);
            Console.Error.WriteLine(ex);
        }
    }
}

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" Class="my-4" />
}
else if (organizationDetails == null)
{
    <MudText Color="Color.Error">Failed to load organization roles.</MudText>
}
else
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Roles</MudText>
        <MudTable Items="organizationDetails.Roles">
            <HeaderContent>
                <MudTh>Role Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Permissions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>
                    @foreach (var permission in context.Permissions)
                    {
                        <MudChip Label="@permission.Key.ToString()" Color="@(permission.Value ? Color.Success : Color.Default)" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.h6">Create New Role</MudText>
        <MudTextField @bind-Value="newRole.Name" Label="Role Name" Variant="Variant.Outlined" Required="true" />
        <MudTextField @bind-Value="newRole.Description" Label="Description" Variant="Variant.Outlined" Class="mt-3" />

        <MudText Typo="Typo.subtitle1" Class="mt-4">Permissions</MudText>
        <MudGrid>
            @foreach (var permission in newRole.Permissions.Keys.ToList())
            {
                <MudItem xs="12" sm="6">
                    <MudCheckBox @bind-Checked="newRole.Permissions[permission]" Label="@permission.ToString()" />
                </MudItem>
            }
        </MudGrid>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateRole" Class="mt-4">
            Create Role
        </MudButton>
    </MudPaper>
}
