@page "/organizations/details/{OrganizationId:guid}"
@inject IOrganizationsService OrganizationsService
@inject IStudentsService StudentsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@using MiniSpace.Web.DTO.Organizations
@using System.Linq
@using MudBlazor

<MudText Typo="Typo.h4" GutterBottom="true">Organization Details</MudText>

@if (organizationGalleryUsers == null)
{
    <MudText> Loading... </MudText>
}
else
{
    <MudPaper Class="pa-4 my-2">
        <MudText Typo="Typo.h5">@organizationGalleryUsers.OrganizationDetails.Name</MudText>
        <MudText Typo="Typo.body1">@organizationGalleryUsers.OrganizationDetails.Description</MudText>
        <MudAvatar Src="@organizationGalleryUsers.OrganizationDetails.ImageUrl" Size="Size.Large" />

        <!-- Displaying users -->
        <MudText Typo="Typo.h6" GutterBottom="true">Members</MudText>
        <MudList>
            @foreach (var user in organizationGalleryUsers.Users)
            {
                <MudListItem>
                    <MudAvatar Src="@GetUserAvatarUrl(user.Id)" Size="Size.Medium" />
                    <MudText Typo="Typo.body1">@GetUserName(user.Id)</MudText>
                </MudListItem>
            }
        </MudList>

        <!-- Displaying gallery -->
        <MudText Typo="Typo.h6" GutterBottom="true">Gallery</MudText>
        <MudGrid>
            @foreach (var image in organizationGalleryUsers.Gallery)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardMedia Src="@image.ImageUrl" Title="@image.DateAdded.ToString("MMMM dd, yyyy")" />
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        @if (isAdmin)
        {
            <AdminView />
        }
        else
        {
            <UserView />
        }
    </MudPaper>
}

@code {
    [Parameter]
    public Guid OrganizationId { get; set; }

    private OrganizationGalleryUsersDto organizationGalleryUsers;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        organizationGalleryUsers = await OrganizationsService.GetOrganizationWithGalleryAndUsersAsync(OrganizationId);
        isAdmin = CheckIfUserIsAdmin();
    }

    private bool CheckIfUserIsAdmin()
    {
        return IdentityService.GetCurrentUserId() == organizationGalleryUsers.OrganizationDetails.OwnerId;
    }

    private async Task<string> GetUserAvatarUrl(Guid userId)
    {
        var student = await StudentsService.GetStudentAsync(userId);
        return student?.ProfileImageUrl;
    }

    private async Task<string> GetUserName(Guid userId)
    {
        var student = await StudentsService.GetStudentAsync(userId);
        return $"{student?.FirstName} {student?.LastName}";
    }

    private RenderFragment AdminView() => builder =>
    {
        builder.OpenComponent(0, typeof(MudButton));
        builder.AddAttribute(1, "Color", Color.Primary);
        builder.AddAttribute(2, "ChildContent", (RenderFragment)((innerBuilder) =>
        {
            innerBuilder.AddContent(3, "Edit Organization");
        }));
        builder.CloseComponent();

        builder.OpenComponent(4, typeof(MudButton));
        builder.AddAttribute(5, "Color", Color.Error);
        builder.AddAttribute(6, "ChildContent", (RenderFragment)((innerBuilder) =>
        {
            innerBuilder.AddContent(7, "Delete Organization");
        }));
        builder.CloseComponent();
    };

    private RenderFragment UserView() => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddContent(1, "View Only Mode");
        builder.CloseElement();
    };
}
