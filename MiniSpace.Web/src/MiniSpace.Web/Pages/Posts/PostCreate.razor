@page "/events/{EventId}/posts/create"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Http
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.Models.Posts
@using Radzen
@using System.IO
@inject IIdentityService IdentityService
@inject IPostsService PostsService
@inject IMediaFilesService MediaFilesService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager

<AuthWrapper>
<h3>Create new post</h3>

<RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" ShowIcon="false" Variant="Variant.Flat"
                Shade="Shade.Lighter">
        @errorMessage
</RadzenAlert>
<RadzenTemplateForm Data="@createPostModel" Submit="@(async (CreatePostModel args) => { await HandleCreatePost(); })">
    <RadzenFieldset>
        <RadzenStack Gap="1rem">
            
            <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                <RadzenColumn Size="12" SizeSM="8">
                    <RadzenStack>
                        <RadzenFormField Text="Text content" Variant="Variant.Outlined">
                            <RadzenTextArea Style="height: 100px" @bind-Value="@createPostModel.TextContent" Name="text-content"/>
                            <RadzenRequiredValidator Component="text-content" Style="position: relative"
                                                     Text="Text content is required"/>
                            <RadzenLengthValidator Component="text-content" Max="5000" Style="position: relative"
                                                   Text="Text content should have at most 5000 characters"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Publish time" Variant="Variant.Outlined">
                            <RadzenStack Orientation="Orientation.Vertical">
                                <RadzenRadioButtonList @bind-Value="@publishInfo" TValue="int" class="rz-m-4 rz-mt-8">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Publish now" Value="1"/>
                                        <RadzenRadioButtonListItem Text="Publish in future" Value="2"/>
                                    </Items>
                                </RadzenRadioButtonList>
                                @if (publishInfo == 2)
                                {
                                    <RadzenFormField Text="Publish date" Variant="Variant.Outlined">
                                        <RadzenDatePicker @bind-Value="@createPostModel.PublishDate" Name="publish-date"
                                                          ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm"/>
                                        <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                               Validator="@(() => ValidateDate(createPostModel.PublishDate))"
                                                               Text="Minute number has to be divisible by 5"/>
                                    </RadzenFormField>
                                }
                            </RadzenStack>
                        </RadzenFormField>
                        <RadzenLabel Text="Add post images:" Component="post-images" />
                        <RadzenCard>
                            <RadzenRow class="rz-text-align-center rz-border-info-light" Gap="1rem">
                                <RadzenColumn Size="3">
                                    @if (isUploading)
                                    {
                                        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light"
                                                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                                            <Template>Uploading</Template>
                                        </RadzenProgressBarCircular>
                                    }
                                </RadzenColumn>
                                <RadzenColumn Size="6" Offset="3">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Choose files to upload (max 3)</RadzenText>
                                    <RadzenUpload Multiple="true" Change=@OnClientChange class="w-100" Accept="image/*" MaxFileCount="3"
                                                  InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"/>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Submit"/>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenFieldset>
</RadzenTemplateForm>
</AuthWrapper>
@code {
    [Parameter]
    public string EventId { get; set; }
    
    private Guid organizerId;

    private CreatePostModel createPostModel = new()
    {
        TextContent = "Lorem ipsum!",
    };
    private bool showError = false;
    private string errorMessage = string.Empty;
    private int publishInfo = 1;
    private TaskCompletionSource<bool> clientChangeCompletionSource;
    private bool isUploading = false;
    private Dictionary<string, Guid> images = new ();
    
    private static bool ValidateDate(DateTime dateTime)
    {
        return dateTime.Minute % 5 == 0;
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "organizer")
        {
            organizerId = IdentityService.GetCurrentUserId();
            createPostModel.PostId = Guid.NewGuid();
            createPostModel.EventId = new Guid(EventId);
            createPostModel.OrganizerId = organizerId;
        }
    }
    
    private async Task HandleCreatePost()
    {
        if (clientChangeCompletionSource != null)
        {
            await clientChangeCompletionSource.Task;
        }
        var response = await PostsService.CreatePostAsync(createPostModel.PostId, createPostModel.EventId,
            createPostModel.OrganizerId, createPostModel.TextContent, images.Select(i => i.Value),
            publishInfo == 2 ? "ToBePublished" : "Published",
            publishInfo == 2 ? createPostModel.PublishDate.ToUniversalTime() : null);
        
        if (response.ErrorMessage != null)
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
        }
        else
        {
            NavigationManager.NavigateTo($"/events/{EventId}");
        }
    }

    async void OnClientChange(UploadChangeEventArgs args)
    {
        @* Console.WriteLine("Client-side upload changed"); *@
        clientChangeCompletionSource = new TaskCompletionSource<bool>();
        var uploadedImages = new Dictionary<string, Guid>();
        isUploading = true;

        foreach (var file in args.Files)
        {
            StateHasChanged();
            if (images.TryGetValue(file.Name, out var imageId))
            {
                uploadedImages.Add(file.Name, imageId);
                continue;
            }

            try
            {
                long maxFileSize = 10 * 1024 * 1024;
                var stream = file.OpenReadStream(maxFileSize);
                byte[] bytes = await ReadFully(stream);
                var base64Content = Convert.ToBase64String(bytes);
                var response = await MediaFilesService.UploadMediaFileAsync(createPostModel.PostId,
                    MediaFileContextType.Post.ToString(), IdentityService.UserDto.Id,
                    file.Name, file.ContentType, base64Content);
                if (response.Content != null && response.Content.FileId != Guid.Empty)
                {
                    uploadedImages.Add(file.Name, response.Content.FileId);
                }
                stream.Close();
            }
            catch (Exception ex)
            {
                @* Console.WriteLine($"Client-side file read error: {ex.Message}"); *@
            }
            finally
            {
               
            }
        }
        isUploading = false;
        StateHasChanged();
        images = uploadedImages;
        clientChangeCompletionSource.SetResult(true);
    }
    
    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16*1024];
        using MemoryStream ms = new MemoryStream();
        int read;
        while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            ms.Write(buffer, 0, read);
        }
        return ms.ToArray();
    }
}
