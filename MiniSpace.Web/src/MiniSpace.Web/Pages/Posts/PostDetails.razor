@page "/posts/details/{postId:guid}"
@inject IPostsService PostsService
@inject IStudentsService StudentsService
@inject IIdentityService IdentityService
@inject IReactionsService ReactionsService
@inject ICommentsService CommentsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MudBlazor
@using MiniSpace.Web.Areas.Reactions.CommandDto
@using MiniSpace.Web.DTO.Enums
@using System.Linq
@using System.Threading.Tasks
@using System.Collections.Generic

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Class="my-4" />
    }
    else if (post == null)
    {
        <MudText Typo="Typo.body1" Align="Align.Center">Post not found.</MudText>
    }
    else
    {
        <MudCard Class="post-details-card mb-4" Elevation="2">
            <MudCardContent>
                <MudGrid justify-start AlignItems="Center">
                    <MudItem xs="1" Class="pr-2">
                        <MudAvatar Size="Size.Large" Image="@GetUserAvatar(post.UserId)" />
                    </MudItem>
                    <MudItem xs="11">
                        <MudText Typo="Typo.subtitle1" Class="mb-1">@GetUserName(post.UserId)</MudText>
                        <MudText Typo="Typo.caption" Class="text-muted">@post.CreatedAt.ToString("g")</MudText>
                    </MudItem>
                </MudGrid>

                <MudMarkdown Value="@post.TextContent"></MudMarkdown>

                @if (post.MediaFiles != null && post.MediaFiles.Any())
                {
                    @foreach (var mediaFile in post.MediaFiles)
                    {
                        <MudImage Src="@mediaFile" Alt="Post image" Class="mt-2" Style="width: 100%;" />
                    }
                }

                @if (reactionsSummary != null)
                {
                    <MudGrid Class="mt-2" GutterSize="0" AlignItems="Center" Spacing="3">
                        @foreach (var reaction in reactionsSummary.ReactionsWithCounts.OrderByDescending(r => r.Value))
                        {
                            <MudItem Class="d-flex align-center">
                                <MudIcon Icon="@(reaction.Key.GetReactionIcon())" Class="mr-1" />
                                <MudText Typo="Typo.overline">
                                    @reaction.Value
                                </MudText>
                            </MudItem>
                        }
                        <MudItem Class="ml-2">
                            <MudText Typo="Typo.subtitle2">
                                Total: @reactionsSummary.NumberOfReactions
                            </MudText>
                        </MudItem>
                    </MudGrid>
                }
            </MudCardContent>

            <MudDivider />

            <MudCardActions Class="d-flex justify-around">
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ToggleCommentSection">
                    <MudIcon Icon="@Icons.Material.Filled.Comment" Class="mr-1" /> Comment
                </MudButton>

                <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" CloseOnSelection="true">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Color="Color.Secondary">
                            <MudIcon Icon="@Icons.Material.Filled.ThumbUp" Class="mr-1" /> React
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        @foreach (var reactionType in Enum.GetValues(typeof(ReactionType)).Cast<ReactionType>())
                        {
                            <MudMenuItem OnClick="() => HandleReactionAsync(reactionType)" Class="d-flex align-center">
                                <MudIcon Icon="@reactionType.GetReactionIcon()" Class="mr-2" /> @reactionType.GetReactionText()
                            </MudMenuItem>
                        }
                    </ChildContent>
                </MudMenu>
            </MudCardActions>

            @if (isCommentSectionVisible)
            {
                <MudCardContent>
                    <MudTextField @bind-Value="newCommentText" Placeholder="Write a comment..." Variant="Variant.Outlined" FullWidth="true" />
                    <MudButton Color="Color.Primary" OnClick="SubmitCommentAsync">Submit</MudButton>

                    @if (comments.Any())
                    {
                        <MudList>
                            @foreach (var comment in comments.Where(c => c.ParentId == Guid.Empty))
                            {
                                <MudListItem>
                                    <MudGrid justify-start AlignItems="Center">
                                        <MudItem xs="1" Class="pr-2">
                                            <MudAvatar Size="Size.Small" Image="@GetUserAvatar(comment.UserId)" />
                                        </MudItem>
                                        <MudItem xs="11">
                                            <MudText Typo="Typo.subtitle2">@GetUserName(comment.UserId)</MudText>
                                            <MudText Typo="Typo.body2">@comment.TextContent</MudText>
                                            <MudText Typo="Typo.caption" Class="text-muted">@comment.CreatedAt.ToString("g")</MudText>

                                            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => ToggleReplySection(comment.Id)">
                                                <MudIcon Icon="@Icons.Material.Filled.Reply" Class="mr-1" /> Reply
                                            </MudButton>

                                            @if (comment.Id == activeReplyCommentId)
                                            {
                                                <MudTextField @bind-Value="newReplyText" Placeholder="Write a reply..." Variant="Variant.Outlined" FullWidth="true" Class="mt-2" />
                                                <MudButton Color="Color.Primary" OnClick="() => SubmitReplyAsync(comment)">Submit Reply</MudButton>
                                            }

                                            @if (comments.Any(c => c.ParentId == comment.Id))
                                            {
                                                <MudList Class="pl-4">
                                                    @foreach (var reply in comments.Where(c => c.ParentId == comment.Id))
                                                    {
                                                        <MudListItem>
                                                            <MudGrid justify-start AlignItems="Center">
                                                                <MudItem xs="1" Class="pr-2">
                                                                    <MudAvatar Size="Size.Small" Image="@GetUserAvatar(reply.UserId)" />
                                                                </MudItem>
                                                                <MudItem xs="11">
                                                                    <MudText Typo="Typo.subtitle2">@GetUserName(reply.UserId)</MudText>
                                                                    <MudText Typo="Typo.body2">@reply.TextContent</MudText>
                                                                    <MudText Typo="Typo.caption" Class="text-muted">@reply.CreatedAt.ToString("g")</MudText>
                                                                </MudItem>
                                                            </MudGrid>
                                                        </MudListItem>
                                                    }
                                                </MudList>
                                            }
                                        </MudItem>
                                    </MudGrid>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Class="text-muted">No comments available.</MudText>
                    }
                </MudCardContent>
            }
        </MudCard>
    }
</MudContainer>

@code {
    [Parameter] public Guid postId { get; set; }

    private PostDto post;
    private ReactionsSummaryDto reactionsSummary;
    private List<CommentDto> comments = new();
    private Dictionary<Guid, StudentDto> studentsCache = new();
    private bool isLoading = true;
    private bool isCommentSectionVisible = false;
    private Guid? activeReplyCommentId;
    private string newCommentText = string.Empty;
    private string newReplyText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                await LoadPostDetailsAsync();
            }
            else
            {
                NavigationManager.NavigateTo("/signin", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            Snackbar.Add($"Failed to load post details: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPostDetailsAsync()
    {
        post = await PostsService.GetPostAsync(postId);

        if (post != null)
        {
            if (post.UserId.HasValue)
            {
                var student = await StudentsService.GetStudentAsync(post.UserId.Value);
                if (student != null)
                {
                    studentsCache[post.UserId.Value] = student;
                }
            }

            reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(postId, ReactionContentType.Post);
            comments = await LoadCommentsForPostAsync(postId);
        }
        else
        {
            Snackbar.Add("Post not found.", Severity.Warning);
        }
    }

    private string GetUserAvatar(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return studentsCache[userId.Value].ProfileImageUrl ?? string.Empty;
        }
        return string.Empty;
    }

    private string GetUserName(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return $"{studentsCache[userId.Value].FirstName} {studentsCache[userId.Value].LastName}";
        }
        return "Unknown User";
    }

    private async Task HandleReactionAsync(ReactionType reactionType)
    {
        var existingReaction = await GetExistingReactionAsync(post.Id);

        string targetType = post.OrganizationId.HasValue ? "Organization" : "User";

        if (existingReaction != null)
        {
            var updateReaction = new UpdateReactionDto
            {
                ReactionId = existingReaction.Id,
                UserId = IdentityService.UserDto.Id,
                NewReactionType = reactionType.ToString(),
                ContentType = "Post",
                TargetType = targetType
            };

            var updateResult = await ReactionsService.UpdateReactionAsync(updateReaction);

            if (updateResult.IsSuccessStatusCode)
            {
                Snackbar.Add("Reaction updated successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Failed to update reaction: {updateResult.ErrorMessage?.Reason}", Severity.Error);
            }
        }
        else
        {
            var createReaction = new CreateReactionDto
            {
                UserId = IdentityService.UserDto.Id,
                ContentId = post.Id,
                ContentType = "Post",
                ReactionType = reactionType.ToString(),
                TargetType = targetType
            };

            var createResult = await ReactionsService.CreateReactionAsync(createReaction);

            if (createResult.IsSuccessStatusCode)
            {
                Snackbar.Add("Reaction added successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Failed to add reaction: {createResult.ErrorMessage?.Reason}", Severity.Error);
            }
        }

        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(postId, ReactionContentType.Post);
    }

    private async Task<ReactionDto> GetExistingReactionAsync(Guid postId)
    {
        var reactions = await ReactionsService.GetReactionsAsync(postId, ReactionContentType.Post);
        return reactions.FirstOrDefault(r => r.UserId == IdentityService.UserDto.Id);
    }

    private void ToggleCommentSection()
    {
        isCommentSectionVisible = !isCommentSectionVisible;
        newCommentText = string.Empty;
    }

    private void ToggleReplySection(Guid commentId)
    {
        if (activeReplyCommentId == commentId)
        {
            activeReplyCommentId = null;
            newReplyText = string.Empty;
        }
        else
        {
            activeReplyCommentId = commentId;
            newReplyText = string.Empty;
        }
    }

    private async Task<List<CommentDto>> LoadCommentsForPostAsync(Guid postId)
    {
        var command = new SearchRootCommentsCommand(
            contextId: postId,
            commentContext: DetermineCommentContext().ToString(),
            pageable: new PageableDto
            {
                Page = 1,
                Size = 10,
                Sort = new SortDto
                {
                    SortBy = new[] { "CreatedAt" },
                    Direction = "asc"
                }
            }
        );

        var response = await CommentsService.SearchRootCommentsAsync(command);
        var comments = response.Items?.ToList() ?? new List<CommentDto>();

        foreach (var comment in comments)
        {
            if (!studentsCache.ContainsKey(comment.UserId))
            {
                var student = await StudentsService.GetStudentAsync(comment.UserId);
                if (student != null)
                {
                    studentsCache[comment.UserId] = student;
                }
            }

            if (comment.Replies != null)
            {
                foreach (var reply in comment.Replies)
                {
                    if (!studentsCache.ContainsKey(reply.UserId))
                    {
                        var replyAuthor = await StudentsService.GetStudentAsync(reply.UserId);
                        if (replyAuthor != null)
                        {
                            studentsCache[reply.UserId] = replyAuthor;
                        }
                    }
                }
            }
        }

        return comments;
    }

    private CommentContext DetermineCommentContext()
    {
        if (post.OrganizationId.HasValue)
        {
            return post.EventId.HasValue ? CommentContext.OrganizationEvent : CommentContext.OrganizationPost;
        }
        else
        {
            return post.EventId.HasValue ? CommentContext.UserEvent : CommentContext.UserPost;
        }
    }

    private async Task SubmitCommentAsync()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            Snackbar.Add("Comment cannot be empty.", Severity.Warning);
            return;
        }

        var command = new CreateCommentCommand(
            commentId: Guid.NewGuid(),
            contextId: post.Id,
            commentContext: DetermineCommentContext().ToString(),
            userId: IdentityService.GetCurrentUserId(),
            parentId: Guid.Empty,
            textContent: newCommentText
        );

        var response = await CommentsService.CreateCommentAsync(command);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Comment added successfully!", Severity.Success);
            newCommentText = string.Empty;
            comments = await LoadCommentsForPostAsync(postId);
        }
        else
        {
            Snackbar.Add($"Failed to add comment: {response.ErrorMessage?.Reason}", Severity.Error);
        }
    }

    private async Task SubmitReplyAsync(CommentDto parentComment)
    {
        if (string.IsNullOrWhiteSpace(newReplyText))
        {
            Snackbar.Add("Reply cannot be empty.", Severity.Warning);
            return;
        }

        var command = new CreateCommentCommand(
            commentId: Guid.NewGuid(),
            contextId: post.Id,
            commentContext: DetermineCommentContext().ToString(),
            userId: IdentityService.GetCurrentUserId(),
            parentId: parentComment.Id,
            textContent: newReplyText
        );

        var response = await CommentsService.CreateCommentAsync(command);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Reply added successfully!", Severity.Success);
            newReplyText = string.Empty;
            comments = await LoadCommentsForPostAsync(postId);
        }
        else
        {
            Snackbar.Add($"Failed to add reply: {response.ErrorMessage?.Reason}", Severity.Error);
        }
    }
}
