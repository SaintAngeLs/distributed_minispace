@page "/events/{EventId}/posts/{PostId}/update"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Http
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Models.Posts
@using Radzen
@inject IIdentityService IdentityService
@inject IPostsService PostsService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager

<AuthWrapper>
<h3>Update your post</h3>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized && organizerId != Guid.Empty)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" ShowIcon="false" Variant="Variant.Flat"
                 Shade="Shade.Lighter">
            @errorMessage
    </RadzenAlert>
    <RadzenTemplateForm Data="@updatePostModel" Submit="@(async (UpdatePostModel args) => { await HandleUpdatePost(); })">
        <RadzenFieldset>
            <RadzenStack Gap="1rem">
                
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeSM="8">
                        <RadzenStack>
                            <RadzenFormField Text="Text content" Variant="Variant.Outlined">
                                <RadzenTextArea Style="height: 100px" @bind-Value="@updatePostModel.TextContent" Name="text-content"/>
                                <RadzenRequiredValidator Component="text-content" Style="position: relative"
                                                         Text="Text content is required"/>
                                <RadzenLengthValidator Component="text-content" Max="5000" Style="position: relative"
                                                       Text="Text content should have at most 5000 characters"/>
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Submit"/>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenTemplateForm>
}
</AuthWrapper>
@code {
    [Parameter]
    public string EventId { get; set; }
    [Parameter]
    public string PostId { get; set; }
    [Parameter]
    public string AuthorName { get; set; }
    
    private Guid organizerId;
    private PostDto postDto;
    private bool pageInitialized = false;

    private UpdatePostModel updatePostModel = new();
    private bool showError = false;
    private string errorMessage = string.Empty;
    private int publishInfo = 1;
    
    private static bool ValidateDate(DateTime dateTime)
    {
        return dateTime.Minute % 5 == 0;
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "organizer")
        {
            organizerId = IdentityService.GetCurrentUserId();

            postDto = await PostsService.GetPostAsync(new Guid(PostId));
            updatePostModel.PostId = postDto.Id;
            updatePostModel.TextContent = postDto.TextContent;
            updatePostModel.MediaFiles = postDto.MediaFiles;
        }

        pageInitialized = true;
    }
    
    private async Task HandleUpdatePost()
    {
        var response = await PostsService.UpdatePostAsync(updatePostModel.PostId,
            updatePostModel.TextContent, updatePostModel.MediaFiles);
        
        if (response.ErrorMessage != null)
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
        }
        else
        {
            NavigationManager.NavigateTo($"events/{EventId}/posts/{PostId}");
        }
    }
}
