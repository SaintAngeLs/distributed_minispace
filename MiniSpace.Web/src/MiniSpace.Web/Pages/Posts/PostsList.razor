@page "/posts/search"
@inject IPostsService PostsService
@inject IStudentsService StudentsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Data.Posts
@using MudBlazor

<AuthWrapper>
    <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Class="my-4" />
        }
        else if (posts == null || !posts.Any())
        {
            <MudText Typo="Typo.body1" Align="Align.Center">No posts available.</MudText>
        }
        else
        {
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Latest Posts</MudText>
                </MudItem>

                @foreach (var post in posts)
                {
                    <MudItem xs="12">
                        <MudCard Class="post-card mb-4" Elevation="2">
                            <MudCardContent>
                                <MudGrid justify-start AlignItems="AlignItems.Center">
                                    <MudItem xs="1" Class="pr-2">
                                        <MudAvatar Size="Size.Large" Image="@GetUserAvatar(post.UserId)" />
                                    </MudItem>
                                    <MudItem xs="11">
                                        <MudText Typo="Typo.subtitle1" Class="mb-1">@GetUserName(post.UserId)</MudText>
                                        <MudText Typo="Typo.caption" Class="text-muted">@post.CreatedAt.ToString("g")</MudText>
                                    </MudItem>
                                </MudGrid>

                                <MudMarkdown Value="@post.TextContent"></MudMarkdown>

                                @if (post.MediaFiles != null && post.MediaFiles.Any())
                                {
                                    <MudImage Src="@post.MediaFiles.First()" Alt="Post image" Class="mt-2" Style="width: 100%;" />
                                }
                            </MudCardContent>
                            <MudCardActions Class="justify-between">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToPostDetails(post.Id)">View</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Secondary">Like</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Secondary">Comment</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
            <MudGrid Justify="Justify.Center" Class="mt-4">
                <MudItem>
                    <MudPagination @bind-CurrentPage="currentPage" TotalItems="@totalItems" ItemsPerPage="pageSize" OnPageChanged="OnPageChanged" />
                </MudItem>
            </MudGrid>
        }
    </MudContainer>
</AuthWrapper>

@code {
    private List<PostDto> posts = new();
    private Dictionary<Guid, StudentDto> studentsCache = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                await LoadPostsAsync();
            }
            else
            {
                NavigationManager.NavigateTo("/signin", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            Snackbar.Add($"Failed to load posts: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPostsAsync()
    {
        var searchParams = new SearchPosts
        {
            Pageable = new PageableDto
            {
                Page = currentPage,
                Size = pageSize,
                Sort = new SortDto
                {
                    SortBy = new[] { "CreatedAt" },
                    Direction = "desc"
                }
            }
        };

        var response = await PostsService.SearchPostsAsync(searchParams);

        if (response != null && response.IsSuccessStatusCode)
        {
            var result = response.Content;

            if (result != null && result.Items != null)
            {
                posts = result.Items.ToList();
                totalItems = result.TotalItems;

                foreach (var post in posts.Where(p => p.UserId.HasValue))
                {
                    if (post.UserId.HasValue && !studentsCache.ContainsKey(post.UserId.Value))
                    {
                        var student = await StudentsService.GetStudentAsync(post.UserId.Value);
                        if (student != null)
                        {
                            studentsCache[post.UserId.Value] = student;
                        }
                    }
                }
            }
            else
            {
                Snackbar.Add("No posts found.", Severity.Warning);
                posts = new List<PostDto>();
            }
        }
        else
        {
            Snackbar.Add($"Failed to load posts: {response?.ErrorMessage?.Reason}", Severity.Error);
        }
    }

    private string GetUserAvatar(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return studentsCache[userId.Value].ProfileImageUrl ?? string.Empty;
        }
        return string.Empty;
    }

    private string GetUserName(Guid? userId)
    {
        if (userId.HasValue && studentsCache.ContainsKey(userId.Value))
        {
            return $"{studentsCache[userId.Value].FirstName} {studentsCache[userId.Value].LastName}";
        }
        return "Unknown User";
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadPostsAsync();
    }

    private void NavigateToPostDetails(Guid postId)
    {
        NavigationManager.NavigateTo($"/posts/details/{postId}");
    }
}
