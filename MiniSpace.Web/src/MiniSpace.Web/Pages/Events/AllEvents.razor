@page "/events/search"
@inject IEventsService EventsService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using MudBlazor
@using MiniSpace.Web.Areas.Events.CommandsDto
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.DTO.Events

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">Explore Events</MudText>

    <MudGrid Spacing="2">
        <MudItem xs="12" md="6">
            <MudTextField Label="Search Events" @bind-Value="searchQuery" Placeholder="Search by event name..." 
                          Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search" OnAdornmentClick="PerformSearch" 
                          Immediate="true" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelect T="string" Label="Category" @bind-Value="selectedCategory">
                <MudSelectItem T="string" Value="null">All</MudSelectItem>
                @foreach (var category in Enum.GetValues(typeof(Category)).Cast<Category>())
                {
                    <MudSelectItem T="string" Value="@category.ToString()">@category</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="decimal?" Label="Minimum Price" @bind-Value="minPrice" Placeholder="Minimum Price" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="decimal?" Label="Maximum Price" @bind-Value="maxPrice" Placeholder="Maximum Price" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDatePicker Label="Start Date" @bind-Date="startDate" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDatePicker Label="End Date" @bind-Date="endDate" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="12" md="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PerformSearch">Search</MudButton>
        </MudItem>
    </MudGrid>

    <MudGrid Spacing="3" Class="mt-4">
        @if (events?.Any() ?? false)
        {
            @foreach (var eventDto in events)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="mud-card-hover" Style="height: 100%; border-radius: 15px;">
                        <MudCardMedia Image="@GetBannerUrl(eventDto)" Alt="@eventDto.Name" Style="height: 180px;" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@eventDto.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@eventDto.Category</MudText>
                            <MudText Typo="Typo.body2">Starts: @eventDto.StartDate.ToString("MMMM dd, yyyy")</MudText>
                            <MudText Typo="Typo.body2">Ends: @eventDto.EndDate.ToString("MMMM dd, yyyy")</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewEvent(eventDto.Id)">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-6">No events found.</MudText>
        }
    </MudGrid>

    <MudDivider Class="my-4" />

    <MudPagination @bind-SelectedPage="currentPage" PageSizeOptions="@pageSizeOptions" PageSize="pageSize" 
                   TotalItems="totalItems" OnPageChanged="OnPageChanged" />
</MudContainer>

<MudSnackbarProvider />

@code {
    private List<EventDto> events = new();
    private int totalItems;
    private int currentPage = 1;
    private int pageSize = 9;
    private string searchQuery = string.Empty;
    private string selectedCategory = null; // Change "All" to null to represent no filter
    private decimal? minPrice;
    private decimal? maxPrice;
    private DateTime? startDate;
    private DateTime? endDate;
    private readonly int[] pageSizeOptions = { 6, 9, 12 };

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchQuery) && selectedCategory == null && !minPrice.HasValue && !maxPrice.HasValue && !startDate.HasValue && !endDate.HasValue)
            {
                // If no search criteria, load all events using pagination
                var paginatedResult = await EventsService.GetPaginatedEventsAsync(currentPage, pageSize);
                if (paginatedResult != null)
                {
                    events = paginatedResult.Items.ToList();
                    totalItems = paginatedResult.TotalItems;
                }
                else
                {
                    events = new List<EventDto>();
                    totalItems = 0;
                    Snackbar.Add("No events found or failed to load events.", Severity.Warning);
                }
            }
            else
            {
                // Load events based on search criteria
                var command = new SearchEvents
                {
                    Name = searchQuery,
                    Category = selectedCategory,
                    DateFrom = startDate?.ToString("yyyy-MM-dd"),
                    DateTo = endDate?.ToString("yyyy-MM-dd"),
                    Pageable = new PageableDto
                    {
                        Page = currentPage,
                        Size = pageSize
                    }
                };

                var response = await EventsService.SearchEventsAsync(command);

                if (response.IsSuccessStatusCode)
                {
                    var pagedResult = response.Content;
                    if (pagedResult != null)
                    {
                        events = pagedResult.Items.SelectMany(i => i).ToList();  // Flatten the collection if necessary
                        totalItems = pagedResult.TotalItems;
                    }
                    else
                    {
                        events = new List<EventDto>();
                        totalItems = 0;
                        Snackbar.Add("No events found or failed to load events.", Severity.Warning);
                    }
                }
                else
                {
                    events = new List<EventDto>();
                    totalItems = 0;
                    Snackbar.Add($"Failed to load events: {response}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task PerformSearch()
    {
        currentPage = 1;
        await LoadEvents();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadEvents();
    }

    private void ViewEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }

    private string GetBannerUrl(EventDto eventDto)
    {
        return eventDto != null && !string.IsNullOrWhiteSpace(eventDto.BannerUrl) ? eventDto.BannerUrl : "/images/default_media_file_image.png";
    }
}
