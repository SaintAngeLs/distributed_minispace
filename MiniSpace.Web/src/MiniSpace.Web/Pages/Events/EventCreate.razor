@page "/events/create"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Http
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.Areas.Organizations
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.Models.Events
@using Radzen
@using System.IO
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IOrganizationsService OrganizationsService
@inject IMediaFilesService MediaFilesService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager

<AuthWrapper>
<h3>Create new event</h3>

@if (!pageInitialized)
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light" 
                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </div>
}

@if (pageInitialized && !organizationsFound)
{
    <h3 class="rz-p-12">You have been granted the organizer rights, but have not been added to any organization yet!</h3>
    <h3>Therefore, you cannot create any event.</h3>
}

@if (pageInitialized && organizationsFound && organizerId != Guid.Empty)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" ShowIcon="false" Variant="Variant.Flat"
                    Shade="Shade.Lighter">
            @errorMessage
    </RadzenAlert>
    <RadzenTemplateForm Data="@_createEventModel" Submit="@(async (CreateEventModel args) => { await HandleCreateEvent(); })">
        <RadzenFieldset>
            <RadzenStack Gap="1rem">
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeSM="4">
                        <RadzenStack>
                            <RadzenFormField Text="Name" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.Name" Name="name" />
                                <RadzenRequiredValidator Component="name" Style="position: relative"
                                                         Text="Name is required" />
                                <RadzenLengthValidator Component="name"  Max="300" Style="position: relative"
                                                       Text="Name should have at most 300 characters" />
                            </RadzenFormField>
                            <RadzenFormField Text="Start date" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenDatePicker @bind-Value="@_createEventModel.StartDate" Name="start-date"
                                                  ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" />
                                <RadzenCustomValidator Component="start-date" Style="position: relative"
                                                       Validator="@(() => ValidateDateDivisibility(_createEventModel.StartDate))"
                                                       Text="Minute number has to be divisible by 5"/>
                                <RadzenCustomValidator Component="start-date" Style="position: relative"
                                                       Validator="@(() => ValidateDates(_createEventModel.StartDate, DateTime.Now))"
                                                       Text="Start date should be in the future"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Building name" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.BuildingName" Name="building-name" />
                                <RadzenRequiredValidator Component="building-name" Style="position: relative"
                                                         Text="Building name is required" />
                            </RadzenFormField>
                            <RadzenFormField Text="Building number" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.BuildingNumber" Name="building-number" />
                                <RadzenRequiredValidator Component="building-number" Style="position: relative"
                                                         Text="Building number is required"/>
                            </RadzenFormField>
                            <RadzenFormField Text="City" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.City" Name="city" />
                                <RadzenRequiredValidator Component="city" Style="position: relative"
                                                         Text="City is required"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Capacity" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenNumeric @bind-Value="@_createEventModel.Capacity" Name="capacity" />
                                <RadzenNumericRangeValidator Component="capacity" Min="1" Max="1000" Style="position: relative"
                                                             Text="Capacity should be between 1 and 1000" />
                            </RadzenFormField>
                            <RadzenFormField Text="Organization" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenDropDown Data=@organizations @bind-Value="@_createEventModel.Organization"
                                                TextProperty="Name" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeSM="4">
                        <RadzenStack>
                            <RadzenFormField Text="Category" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenDropDown Data=@categories @bind-Value="@_createEventModel.Category" />
                            </RadzenFormField>
                            <RadzenFormField Text="End date" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenDatePicker @bind-Value="@_createEventModel.EndDate" Name="end-date"
                                                  ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" />
                                <RadzenCustomValidator Component="end-date" Style="position: relative"
                                                       Validator="@(() => ValidateDateDivisibility(_createEventModel.EndDate))"
                                                       Text="Minute number has to be divisible by 5"/>
                                <RadzenCustomValidator Component="end-date" Style="position: relative"
                                                       Validator="@(() => ValidateDates(_createEventModel.EndDate, _createEventModel.StartDate))"
                                                       Text="End date should be later than start date"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Street" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.Street" Name="street" />
                                <RadzenRequiredValidator Component="street" Style="position: relative"
                                                         Text="Street is required" />
                            </RadzenFormField>
                            <RadzenFormField Text="Apartment number" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.ApartmentNumber" />
                            </RadzenFormField>
                            <RadzenFormField Text="Zip code" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@_createEventModel.ZipCode" Name="zip-code" />
                                <RadzenRequiredValidator Component="zip-code" Style="position: relative"
                                                         Text="Zip code is required" />
                            </RadzenFormField>
                            <RadzenFormField Text="Fee" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenNumeric @bind-Value="@_createEventModel.Fee" Placeholder="0.00" Step="0.01" Name="fee"/>
                                <RadzenNumericRangeValidator Component="fee" Min="0.0" Max="1000.0" Style="position: relative"
                                                             Text="Fee should be between 0.0 and 1000.0" />
                            </RadzenFormField>
                            <RadzenFormField Text="Publish time" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenRadioButtonList @bind-Value="@publishInfo" TValue="int" class="rz-m-4 rz-mt-8">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="Publish now" Value="1"/>
                                            <RadzenRadioButtonListItem Text="Publish in future" Value="2"/>
                                        </Items>
                                    </RadzenRadioButtonList>
                                    @if (publishInfo == 2)
                                    {
                                        <RadzenFormField Text="Publish date" Variant="Variant.Outlined"
                                                         AllowFloatingLabel="false">
                                            <RadzenDatePicker @bind-Value="@_createEventModel.PublishDate" Name="publish-date"
                                                              ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" />
                                            <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                                   Validator="@(() => ValidateDateDivisibility(_createEventModel.PublishDate))"
                                                                   Text="Minute number has to be divisible by 5"/>
                                            <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                                   Validator="@(() => ValidateDates(_createEventModel.StartDate, _createEventModel.PublishDate))"
                                                                   Text="Publish date should be earlier than start date"/>
                                            <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                                   Validator="@(() => ValidateDates(_createEventModel.PublishDate, DateTime.Now))"
                                                                   Text="Publish date should be in the future"/>
                                        </RadzenFormField>
                                    }
                                </RadzenStack>
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeSM="8">
                        <RadzenStack>
                            <RadzenFormField Text="Description" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextArea Style="height: 100px" @bind-Value="@_createEventModel.Description" Name="description"/>
                                <RadzenRequiredValidator Component="description" Style="position: relative"
                                                         Text="Description is required" />
                                <RadzenLengthValidator Component="description"  Max="1000" Style="position: relative"
                                                       Text="Description should have at most 1000 characters" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeSM="8">
                        <RadzenLabel Text="Add event images:" Component="event-images"/>
                        <RadzenCard class="horizontal-margin">
                            <RadzenRow class="rz-text-align-center rz-border-info-light" Gap="1rem">
                                <RadzenColumn Size="3" class="center-content">
                                    @if (isUploading)
                                    {
                                        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light"
                                                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                                            <Template>Uploading</Template>
                                        </RadzenProgressBarCircular>
                                    }
                                </RadzenColumn>
                                <RadzenColumn Size="6" Offset="3">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Choose files to upload (max 5)</RadzenText>
                                    <RadzenUpload Multiple="true" Change=@OnClientChange class="w-100" Accept="image/*" MaxFileCount="5"
                                                  InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"/>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Submit"/>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenTemplateForm>
}
</AuthWrapper>
@code {
    private Guid organizerId;
    private bool pageInitialized = false;
    private bool organizationsFound = false;
    private TaskCompletionSource<bool> clientChangeCompletionSource;
    private bool isUploading = false;
    private Dictionary<string, Guid> images = new ();
    
    private CreateEventModel _createEventModel = new()
    {
        Name = "One of first events!",
        Category = "Education",
        StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0,0,0),
        EndDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day + 1, 0,0,0),
        BuildingName = "Gmach Główny",
        Street = "Plac Politechniki",
        BuildingNumber = "1",
        ApartmentNumber = "1",
        City = "Warszawa",
        ZipCode = "00-661",
        Description = "Great event!",
        Capacity = 30,
        Fee = 15.00M
    };
    private bool showError = false;
    private string errorMessage = string.Empty;
    private int publishInfo = 1;
    
    private List<string> categories =
    [
        "Music",
        "Sports",
        "Education",
        "Science",
        "Technology",
        "Art",
        "Business",
        "Health",
        "Charity",
        "Other"
    ];
    
    private IEnumerable<OrganizationDto> organizations;
    
    private static bool ValidateDateDivisibility(DateTime dateTime)
    {
        return dateTime.Minute % 5 == 0;
    }
    
    private static bool ValidateDates(DateTime laterDate, DateTime earlierDate)
    {
        return laterDate > earlierDate;
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "organizer")
        {
            organizerId = IdentityService.GetCurrentUserId();
            organizations = await OrganizationsService.GetOrganizerOrganizationsAsync(organizerId);
            
            if (organizations.Any())
            {
                organizationsFound = true;
                _createEventModel.EventId = Guid.NewGuid();
                _createEventModel.OrganizerId = organizerId;
                _createEventModel.Organization = organizations.First();
            }
        }
        
        pageInitialized = true;
    }
    
    private async Task HandleCreateEvent()
    {
        var response = await EventsService.CreateEventAsync(_createEventModel.EventId, _createEventModel.Name,
            _createEventModel.OrganizerId, _createEventModel.Organization.Id, _createEventModel.Organization.RootId,
            _createEventModel.StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            _createEventModel.EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"), 
            _createEventModel.BuildingName, _createEventModel.Street,  _createEventModel.BuildingNumber,
            _createEventModel.ApartmentNumber, _createEventModel.City, _createEventModel.ZipCode, images.Select(o => o.Value),
            _createEventModel.Description, _createEventModel.Capacity, _createEventModel.Fee, _createEventModel.Category,
            publishInfo == 2 ? _createEventModel.PublishDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ") : string.Empty);
        
        if (response.ErrorMessage != null)
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
        }
        else
        {
            NavigationManager.NavigateTo("/events/organize");
        }
    }
    
    async void OnClientChange(UploadChangeEventArgs args)
    {
        clientChangeCompletionSource = new TaskCompletionSource<bool>();
        var uploadedImages = new Dictionary<string, Guid>();
        isUploading = true;

        foreach (var file in args.Files)
        {
            if (images.TryGetValue(file.Name, out var imageId))
            {
                uploadedImages.Add(file.Name, imageId);
                continue;
            }

            try
            {
                long maxFileSize = 10 * 1024 * 1024;
                var stream = file.OpenReadStream(maxFileSize);
                byte[] bytes = await ReadFully(stream);
                var base64Content = Convert.ToBase64String(bytes);
                var response = await MediaFilesService.UploadMediaFileAsync(_createEventModel.EventId,
                    MediaFileContextType.Event.ToString(), IdentityService.UserDto.Id,
                    file.Name, file.ContentType, base64Content);
                if (response.Content != null && response.Content.FileId != Guid.Empty)
                {
                    uploadedImages.Add(file.Name, response.Content.FileId);
                }
                stream.Close();
            }
            catch (Exception ex)
            {
                @* Console.WriteLine($"Client-side file read error: {ex.Message}"); *@
            }
            finally
            {
               
            }
        }
        isUploading = false;
        StateHasChanged();
        images = uploadedImages;
        clientChangeCompletionSource.SetResult(true);
    }
    
    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16*1024];
        using MemoryStream ms = new MemoryStream();
        int read;
        while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            ms.Write(buffer, 0, read);
        }
        return ms.ToArray();
    }
}
