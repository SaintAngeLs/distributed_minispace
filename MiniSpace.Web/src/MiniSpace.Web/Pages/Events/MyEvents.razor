@page "/events/my-events"
@inject IEventsService EventsService
@inject IIdentityService IdentityService
@using MudBlazor
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">My Events</MudText>

    <MudGrid Spacing="3">
        @if (events?.Any() ?? false)
        {
            @foreach (var eventDto in events)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="mud-card-hover" Style="height: 100%; border-radius: 15px;">
                        <MudCardMedia Image="@eventDto.BannerUrl" Alt="@eventDto.Name" Style="height: 180px;" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@eventDto.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@eventDto.Category</MudText>
                            <MudText Typo="Typo.body2">Starts: @eventDto.StartDate.ToString("MMMM dd, yyyy")</MudText>
                            <MudText Typo="Typo.body2">Ends: @eventDto.EndDate.ToString("MMMM dd, yyyy")</MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.HowToReg"  Style="font-size: 1rem;" />
                                Signed Up: @eventDto.SignedUpStudents
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Rounded.ThumbUp"  Style="font-size: 1rem;" />
                                Interested: @eventDto.InterestedStudents
                            </MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewEvent(eventDto.Id)">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-6">No events found.</MudText>
        }
    </MudGrid>

    <MudDivider Class="my-4" />

    <MudPagination @bind-SelectedPage="currentPage" PageSizeOptions="@pageSizeOptions" PageSize="pageSize" 
                   TotalItems="totalItems" OnPageChanged="OnPageChanged" />
</MudContainer>

<MudSnackbarProvider />

@code {
    private List<EventDto> events = new();
    private int totalItems;
    private int currentPage = 1;
    private int pageSize = 9;
    private readonly int[] pageSizeOptions = { 6, 9, 12 };

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var organizerId = IdentityService.GetCurrentUserId();
            var response = await EventsService.GetMyEventsAsync(organizerId, currentPage, pageSize);

            events = response.Items.ToList();
            totalItems = response.TotalItems;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadEvents();
    }

    private void ViewEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }
}
