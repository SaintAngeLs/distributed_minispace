@page "/events/following"
@inject IEventsService EventsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@using MudBlazor
@using MiniSpace.Web.DTO.Events
@using System.Threading.Tasks

<AuthWrapper>
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">Your Events</MudText>

        <MudTabs>
            <MudTab Label="Signed Up">
                <MudGrid Spacing="3" Class="mt-4">
                    @if (signedUpEvents?.Any() ?? false)
                    {
                        @foreach (var eventDto in signedUpEvents)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard Class="mud-card-hover" Style="height: 100%; border-radius: 15px;">
                                    <MudCardMedia Image="@GetBannerUrl(eventDto)" Alt="@eventDto.Name" Style="height: 180px;" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">@eventDto.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@eventDto.Category</MudText>
                                        <MudText Typo="Typo.body2">Starts: @eventDto.StartDate.ToString("MMMM dd, yyyy")</MudText>
                                        <MudText Typo="Typo.body2">Ends: @eventDto.EndDate.ToString("MMMM dd, yyyy")</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewEvent(eventDto.Id)">
                                            <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Style="font-size: 1rem;" /> 
                                            View Details
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-6">You haven't signed up for any events yet.</MudText>
                    }
                </MudGrid>
            </MudTab>

            <MudTab Label="Interested">
                <MudGrid Spacing="3" Class="mt-4">
                    @if (interestedEvents?.Any() ?? false)
                    {
                        @foreach (var eventDto in interestedEvents)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard Class="mud-card-hover" Style="height: 100%; border-radius: 15px;">
                                    <MudCardMedia Image="@GetBannerUrl(eventDto)" Alt="@eventDto.Name" Style="height: 180px;" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">@eventDto.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@eventDto.Category</MudText>
                                        <MudText Typo="Typo.body2">Starts: @eventDto.StartDate.ToString("MMMM dd, yyyy")</MudText>
                                        <MudText Typo="Typo.body2">Ends: @eventDto.EndDate.ToString("MMMM dd, yyyy")</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewEvent(eventDto.Id)">
                                            <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Style="font-size: 1rem;" /> 
                                            View Details
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Align="Align.Center" Class="mt-6">You haven't marked interest in any events yet.</MudText>
                    }
                </MudGrid>
            </MudTab>
        </MudTabs>
    </MudContainer>
</AuthWrapper>

@code {
    private List<EventDto> signedUpEvents = new();
    private List<EventDto> interestedEvents = new();
    private bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();

        _isAuthenticated = IdentityService.IsAuthenticated;
        if (_isAuthenticated)
        {
            await LoadUserEvents();
        }
        else
        {
            NavigationManager.NavigateTo("/signin", forceLoad: true);
        }
    }

    private async Task LoadUserEvents()
    {
        try
        {
            var userId = IdentityService.GetCurrentUserId();

            // Load signed-up events
            var signedUpEventsResult = await EventsService.GetUserEventsAsync(userId, 1, int.MaxValue, "SignedUp");
            signedUpEvents = signedUpEventsResult.Items.ToList();

            // Load interested events
            var interestedEventsResult = await EventsService.GetUserEventsAsync(userId, 1, int.MaxValue, "InterestedIn");
            interestedEvents = interestedEventsResult.Items.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user events: {ex.Message}");
        }
    }

    private void ViewEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/events/event/{eventId}");
    }

    private string GetBannerUrl(EventDto eventDto)
    {
        return eventDto != null && !string.IsNullOrWhiteSpace(eventDto.BannerUrl) ? eventDto.BannerUrl : "/images/default_media_file_image.png";
    }
}
