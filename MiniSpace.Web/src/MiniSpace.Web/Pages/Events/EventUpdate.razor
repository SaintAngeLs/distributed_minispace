@page "/events/{EventId}/update"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Http
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Models.Events
@using Radzen
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager

<AuthWrapper>
<h3>Update your event</h3>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized && organizerId != Guid.Empty)
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" ShowIcon="false" Variant="Variant.Flat"
                 Shade="Shade.Lighter">
            @errorMessage
    </RadzenAlert>
    <RadzenTemplateForm Data="@updateEventModel" Submit="@(async (UpdateEventModel args) => { await HandleUpdateEvent(); })">
        <RadzenFieldset>
            <RadzenStack Gap="1rem">
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeSM="4">
                        <RadzenStack>
                            <RadzenFormField Text="Name" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.Name" Name="name" />
                                <RadzenRequiredValidator Component="name" Style="position: relative"
                                                         Text="Name is required" />
                                <RadzenLengthValidator Component="name"  Max="300" Style="position: relative"
                                                       Text="Name should have at most 300 characters" />
                            </RadzenFormField>
                            <RadzenFormField Text="Start date" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenDatePicker @bind-Value="@updateEventModel.StartDate" Name="start-date"
                                                  ShowTime="true" MinutesStep="5" DateFormat="@dateFormat" />
                                <RadzenCustomValidator Component="start-date" Style="position: relative"
                                                       Validator="@(() => ValidateDates(updateEventModel.StartDate, DateTime.Now))"
                                                       Text="Start date should be in the future"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Building name" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.BuildingName" Name="building-name" />
                                <RadzenRequiredValidator Component="building-name" Style="position: relative"
                                                         Text="Building name is required" />
                            </RadzenFormField>
                            <RadzenFormField Text="Building number" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.BuildingNumber" Name="building-number" />
                                <RadzenRequiredValidator Component="building-number" Style="position: relative"
                                                         Text="Building number is required"/>
                            </RadzenFormField>
                            <RadzenFormField Text="City" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.City" Name="city" />
                                <RadzenRequiredValidator Component="city" Style="position: relative"
                                                         Text="City is required"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Capacity" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenNumeric @bind-Value="@updateEventModel.Capacity" Name="capacity" />
                                <RadzenNumericRangeValidator Component="capacity" Min="1" Max="1000" Style="position: relative"
                                                             Text="Capacity should be between 1 and 1000" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeSM="4">
                        <RadzenStack>
                            <RadzenFormField Text="Category" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                 <RadzenDropDown Data=@categories @bind-Value="@updateEventModel.Category" />
                             </RadzenFormField>
                            <RadzenFormField Text="End date" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                 <RadzenDatePicker @bind-Value="@updateEventModel.EndDate" Name="end-date"
                                                   ShowTime="true" MinutesStep="5" DateFormat="@dateFormat" />
                                 <RadzenCustomValidator Component="end-date" Style="position: relative"
                                                        Validator="@(() => ValidateDateDivisibility(updateEventModel.EndDate))"
                                                        Text="Minute number has to be divisible by 5"/>
                                 <RadzenCustomValidator Component="end-date" Style="position: relative"
                                                        Validator="@(() => ValidateDates(updateEventModel.EndDate, updateEventModel.StartDate))"
                                                        Text="End date should be later than start date"/>
                             </RadzenFormField>
                            <RadzenFormField Text="Street" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.Street" Name="street" />
                                <RadzenRequiredValidator Component="street" Style="position: relative"
                                                         Text="Street is required" />
                            </RadzenFormField>
                            <RadzenFormField Text="Apartment number" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.ApartmentNumber" />
                            </RadzenFormField>
                            <RadzenFormField Text="Zip code" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextBox @bind-Value="@updateEventModel.ZipCode" Name="zip-code" />
                                <RadzenRequiredValidator Component="zip-code" Style="position: relative"
                                                         Text="Zip code is required" />
                            </RadzenFormField>
                            <RadzenFormField Text="Fee" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenNumeric @bind-Value="@updateEventModel.Fee" Placeholder="0.00" Step="0.01" Name="fee"/>
                                <RadzenNumericRangeValidator Component="fee" Min="0.0" Max="1000.0" Style="position: relative"
                                                             Text="Fee should be between 0.0 and 1000.0" />
                            </RadzenFormField>
                            <RadzenFormField Text="Publish time" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenRadioButtonList @bind-Value="@publishInfo" TValue="int" class="rz-m-4 rz-mt-8">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="Publish now" Value="1"/>
                                            <RadzenRadioButtonListItem Text="Publish in future" Value="2"/>
                                        </Items>
                                    </RadzenRadioButtonList>
                                    @if (publishInfo == 2)
                                    {
                                        <RadzenFormField Text="Publish date" Variant="Variant.Outlined"
                                                         AllowFloatingLabel="false">
                                            <RadzenDatePicker @bind-Value="@updateEventModel.PublishDate" Name="publish-date"
                                                              ShowTime="true" MinutesStep="5" DateFormat="@dateFormat" />
                                            <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                                   Validator="@(() => ValidateDateDivisibility(updateEventModel.PublishDate))"
                                                                   Text="Minute number has to be divisible by 5"/>
                                            <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                                    Validator="@(() => ValidateDates(updateEventModel.StartDate, updateEventModel.PublishDate))"
                                                                    Text="Publish date should be earlier than start date"/>
                                             <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                                    Validator="@(() => ValidateDates(updateEventModel.PublishDate, DateTime.Now))"
                                                                    Text="Publish date should be in the future"/>
                                        </RadzenFormField>
                                    }
                                </RadzenStack>
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeSM="8">
                        <RadzenStack>
                            <RadzenFormField Text="Description" Variant="Variant.Outlined"
                                             AllowFloatingLabel="false">
                                <RadzenTextArea Style="height: 100px" @bind-Value="@updateEventModel.Description" Name="description"/>
                                <RadzenRequiredValidator Component="description" Style="position: relative"
                                                         Text="Description is required" />
                                <RadzenLengthValidator Component="description"  Max="1000" Style="position: relative"
                                                       Text="Description should have at most 1000 characters" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Submit"/>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenTemplateForm>
}
</AuthWrapper>
@code {
    [Parameter]
    public string EventId { get; set; }
    
    private const string dateFormat = "dd/MM/yyyy HH:mm";
    
    private Guid organizerId;
    private EventDto eventDto;
    private bool pageInitialized = false;
    
    private UpdateEventModel updateEventModel = new();
    private bool showError = false;
    private string errorMessage = string.Empty;
    private int publishInfo = 1;
    
    private List<string> categories =
    [
        "Music",
        "Sports",
        "Education",
        "Science",
        "Technology",
        "Art",
        "Business",
        "Health",
        "Charity",
        "Other"
    ];
    
    private static bool ValidateDateDivisibility(DateTime dateTime)
    {
        return dateTime.Minute % 5 == 0;
    }
    
    private static bool ValidateDates(DateTime laterDate, DateTime earlierDate)
    {
        return laterDate > earlierDate;
    }

    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "organizer")
        {
            organizerId = IdentityService.GetCurrentUserId();
            
            eventDto = await EventsService.GetEventAsync(new Guid(EventId), false);
            updateEventModel.EventId = eventDto.Id;
            updateEventModel.Name = eventDto.Name;
            updateEventModel.OrganizerId = eventDto.Organizer.Id;
            updateEventModel.StartDate = eventDto.StartDate.ToLocalTime();
            updateEventModel.EndDate = eventDto.EndDate.ToLocalTime();
            updateEventModel.BuildingName = eventDto.Location.BuildingName;
            updateEventModel.Street = eventDto.Location.Street;
            updateEventModel.BuildingNumber = eventDto.Location.BuildingNumber;
            updateEventModel.ApartmentNumber = eventDto.Location.ApartmentNumber;
            updateEventModel.City = eventDto.Location.City;
            updateEventModel.ZipCode = eventDto.Location.ZipCode;
            updateEventModel.MediaFiles = eventDto.MediaFiles;
            updateEventModel.Description = eventDto.Description;
            updateEventModel.Capacity = eventDto.Capacity;
            updateEventModel.Fee = eventDto.Fee;
            updateEventModel.Category = eventDto.Category;
        }

        pageInitialized = true;
    }
    
    private async Task HandleUpdateEvent()
    {
        var response = await EventsService.UpdateEventAsync(updateEventModel.EventId,
            updateEventModel.Name, updateEventModel.OrganizerId,
            updateEventModel.StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            updateEventModel.EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"), 
            updateEventModel.BuildingName, updateEventModel.Street,  updateEventModel.BuildingNumber,
            updateEventModel.ApartmentNumber, updateEventModel.City, updateEventModel.ZipCode, updateEventModel.MediaFiles,
            updateEventModel.Description, updateEventModel.Capacity, updateEventModel.Fee, updateEventModel.Category,
            publishInfo == 2 ? updateEventModel.PublishDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ") : string.Empty);
        
        if (response.ErrorMessage != null)
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
        }
        else
        {
            NavigationManager.NavigateTo($"/events/{EventId}");
        }
    }
}
