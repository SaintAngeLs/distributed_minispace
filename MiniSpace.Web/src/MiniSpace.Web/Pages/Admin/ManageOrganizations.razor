@page "/admin/organizations"
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Organizations
@using MiniSpace.Web.Models.Organizations
@using MiniSpace.Web.Pages.Admin.Dialogs
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IOrganizationsService OrganizationsService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager

<AuthWrapper>
<h1>Manage organizations</h1>

@if (!pageInitialized)
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light"
                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </div>
}
else
{
    <h4 class="rz-p-8">Max depth of organization tree - 10 levels (with root included).
        Please to note this fact during formation of new organizations. </h4>
    
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween"
                 Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Size="ButtonSize.Medium" Text="Add root organization"
                          class="rz-border-radius-1" Icon="note_add"
                          Click="@(() => OpenAddOrganizationDialog(selectedItem as OrganizationModel, true))" />
            <RadzenButton Size="ButtonSize.Medium" Text="Add child organization" Disabled="@(selectedItem == null)"
                          class="rz-border-radius-1" Icon="note_add"
                          Click="@(() => OpenAddOrganizationDialog(selectedItem as OrganizationModel, false))" />
            <RadzenButton Size="ButtonSize.Medium" Text="Delete organization" Disabled="@(selectedItem == null)"
                          class="rz-border-radius-1" Icon="delete_forever" ButtonStyle="ButtonStyle.Warning"
                          Click="@(() => OpenDeleteOrganizationDialog(selectedItem as OrganizationModel))" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Size="ButtonSize.Medium" Text="Clear selection" Disabled="@(selectedItem == null)"
                          class="rz-border-radius-1" Icon="close"
                          Click="@(() => selectedItem = null)" />
            <RadzenButton Size="ButtonSize.Medium" Text="Manage organizers" Disabled="@(selectedItem == null)"
                          class="rz-border-radius-1" Icon="build" ButtonStyle="ButtonStyle.Secondary"
                          Click="@(() => OpenOrganizationDetailsDialog(selectedItem as OrganizationModel, organizers))" />
        </RadzenStack>
    </RadzenStack>
    
    <RadzenStack class="rz-p-8" Gap="1rem" Style="height: 100%">
        @if (totalRootOrganizations == 0)
        {
            <h3>There are not any organizations created.</h3>
        }
        
        <RadzenTree Data="@rootOrganizations" Expand="@OnExpand" @bind-Value=@selectedItem>
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" Expanded="@(data => ((OrganizationModel)data).Expanded)" />
            <RadzenTreeLevel TextProperty="Name" HasChildren=@(org => false)/>
        </RadzenTree>

    </RadzenStack>
}
</AuthWrapper>
@code {
    private bool pageInitialized = false;
    
    private int totalRootOrganizations = 0;
    private List<OrganizationModel> rootOrganizations = new();
    private object selectedItem;
    
    private IEnumerable<OrganizerModel> organizers;
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "admin")
        {
            var tmpOrganizations = await OrganizationsService.GetRootOrganizationsAsync();
            ConvertOrganizationDtoList(tmpOrganizations, rootOrganizations, null, null);
            totalRootOrganizations = rootOrganizations.Count;
        }
        
        pageInitialized = true;

        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "admin")
        {
            var paginatedResponse = await StudentsService.GetStudentsAsync();
            organizers = paginatedResponse.Results
                .Where(o => o.IsOrganizer)
                .Select(s => new OrganizerModel(s.Id, s.Email, $"{s.FirstName} {s.LastName}"));   
        }
    }
    
    private async void OnExpand(TreeExpandEventArgs args)
    {
        var parent = (OrganizationModel)args.Value;
        var childOrganizations = await OrganizationsService.GetChildrenOrganizationsAsync(parent.Id, parent.RootId);
        ConvertOrganizationDtoList(childOrganizations, parent.Children, parent.RootId, parent);
        StateHasChanged();
    }

    private static void ConvertOrganizationDtoList(IEnumerable<OrganizationDto> input, IList<OrganizationModel> result,
        Guid? rootId, OrganizationModel parent)
    {
        result.Clear();
        foreach (var organization in input)
        {
            result.Add(new OrganizationModel()
            {
                Id = organization.Id,
                Name = organization.Name,
                RootId = rootId ?? organization.Id,
                Parent = parent,
                Children = new List<OrganizationModel>()
            });
        }
    }
    
    private async Task OpenAddOrganizationDialog(OrganizationModel parentOrganization, bool isRootOrganization)
    {
        await DialogService.OpenAsync<AddOrganizationDialog>("Add new organization:",
            new Dictionary<string, object>()
            {
                { "ParentOrganization", parentOrganization },
                { "IsRootOrganization", isRootOrganization }
            },
            new DialogOptions()
            {
                Width = "500px", Height = "230px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });

        if (isRootOrganization)
        {
            await OnInitializedAsync();
        }
        else if (selectedItem is OrganizationModel selectedOrg)
        {
            var childOrganizations = await OrganizationsService.GetChildrenOrganizationsAsync(selectedOrg.Id, selectedOrg.RootId);
            ConvertOrganizationDtoList(childOrganizations, selectedOrg.Children, selectedOrg.RootId, selectedOrg.Parent);
            selectedOrg.Expanded = true;
            StateHasChanged();
        }
    }
    
    private async Task OpenOrganizationDetailsDialog(OrganizationModel Organization, IEnumerable<OrganizerModel> organizers)
    {
        await DialogService.OpenAsync<OrganizationDetailsDialog>("Details of the organization:",
            new Dictionary<string, object>()
            {
                { "Organization", Organization },
                { "Organizers", organizers }
            },
            new DialogOptions()
            {
                Width = "700px", Height = "650px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenDeleteOrganizationDialog(OrganizationModel organization)
    {
        await DialogService.OpenAsync<DeleteOrganizationDialog>("Are you sure? This action cannot be undone!",
            new Dictionary<string, object>() { { "Organization", organization } },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = false, Draggable = false,
                AutoFocusFirstElement = false
            });
        if (organization.Parent == null)
        {
            await OnInitializedAsync();
        }
        else
        {
            var childOrganizations = await OrganizationsService.GetChildrenOrganizationsAsync(organization.Parent.Id,
                organization.Parent.RootId);
            ConvertOrganizationDtoList(childOrganizations, organization.Parent.Children, organization.Parent.RootId,
                organization.Parent.Parent);
            StateHasChanged();
        }
    }
}
