@page "/security"
@inject IIdentityService IdentityService
@using MudBlazor

<MudText Typo="Typo.h6" GutterBottom="true">Security</MudText>
@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudStack>
        <MudSwitch @bind-Checked="IsTwoFactorEnabled" Label="Enable Two-Factor Authentication" Color="Color.Primary" />
        @if (IsTwoFactorEnabled)
        {
            @if (string.IsNullOrEmpty(TwoFactorSecret))
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@GenerateTwoFactorSecret">Generate Secret Token</MudButton>
            }
            else
            {
                <MudTextField Value="@TwoFactorSecret" Label="Two-Factor Authentication Secret" ReadOnly="true" />
                <MudText Typo="Typo.body1">Please save this secret to set up your two-factor authentication.</MudText>
            }
        }
    </MudStack>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveTwoFactorSettingsAsync" Disabled="@(IsTwoFactorEnabled && string.IsNullOrEmpty(TwoFactorSecret))" Class="button-margins">Save 2FA Settings</MudButton>
}

@code {
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool IsTwoFactorEnabled { get; set; }
    [Parameter] public string TwoFactorSecret { get; set; }
    [Parameter] public EventCallback<bool> ToggleTwoFactor { get; set; }

    private async Task GenerateTwoFactorSecret()
    {
        try
        {
            var userId = IdentityService.GetCurrentUserId();
            TwoFactorSecret = await IdentityService.GenerateTwoFactorSecretAsync(userId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating two-factor secret: {ex.Message}");
        }
    }

    private async Task SaveTwoFactorSettingsAsync()
    {
        try
        {
            if (IsTwoFactorEnabled)
            {
                if (string.IsNullOrEmpty(TwoFactorSecret))
                {
                    throw new InvalidOperationException("Secret token must be generated before enabling 2FA.");
                }
                await IdentityService.EnableTwoFactorAsync(IdentityService.GetCurrentUserId(), TwoFactorSecret);
            }
            else
            {
                await IdentityService.DisableTwoFactorAsync(IdentityService.GetCurrentUserId());
                TwoFactorSecret = null; // Clear the secret if 2FA is disabled
            }
            StateHasChanged(); // Update the UI after saving the settings
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving 2FA settings: {ex.Message}");
        }
    }
}
