@page "/security"
@inject IIdentityService IdentityService
@using MudBlazor

<MudText Typo="Typo.h6" GutterBottom="true">Security</MudText>
@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudStack>
        <MudCard Outlined="true">
            <MudCardContent>
                <!-- Brief instructions for 2FA -->
                <MudText Typo="Typo.body1" GutterBottom="true">
                    To enable Two-Factor Authentication (2FA), switch on the button below. Once activated, a button to generate a 2FA secret code will appear. 
                    Click this button to generate your security code. After the code is generated, click the "Save 2FA Settings" button to enable 2FA on your account. 
                    When logging in with 2FA enabled, you will be required to enter a code that you will receive via email after attempting to log in. 
                    Input the code on the screen you will be redirected to after logging in.
                </MudText>
            </MudCardContent>
        </MudCard>

        <MudSwitch @bind-Checked="IsTwoFactorEnabled" Label="Enable Two-Factor Authentication" Color="Color.Primary" />
        @if (IsTwoFactorEnabled)
        {
            @if (string.IsNullOrEmpty(TwoFactorSecret))
            {
                 <div style="display: flex; justify-content: flex-start; margin-bottom: 1rem;">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@GenerateTwoFactorSecret" Class="small-button">
                        Generate Secret Token
                    </MudButton>
                </div>

            }
            else
            {
                <MudTextField Value="@TwoFactorSecret" Label="Two-Factor Authentication Secret" ReadOnly="true" />
                <MudText Typo="Typo.body1">This secret will be used to set up your two-factor authentication.</MudText>
            }
        }
    </MudStack>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveTwoFactorSettingsAsync" Disabled="@(IsTwoFactorEnabled && string.IsNullOrEmpty(TwoFactorSecret))" Class="button-margins">Save 2FA Settings</MudButton>
}

@code {
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool IsTwoFactorEnabled { get; set; }
    [Parameter] public string TwoFactorSecret { get; set; }
    [Parameter] public EventCallback<bool> ToggleTwoFactor { get; set; }

    private async Task GenerateTwoFactorSecret()
    {
        try
        {
            var userId = IdentityService.GetCurrentUserId();
            TwoFactorSecret = await IdentityService.GenerateTwoFactorSecretAsync(userId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating two-factor secret: {ex.Message}");
        }
    }

    private async Task SaveTwoFactorSettingsAsync()
    {
        try
        {
            if (IsTwoFactorEnabled)
            {
                if (string.IsNullOrEmpty(TwoFactorSecret))
                {
                    throw new InvalidOperationException("Secret token must be generated before enabling 2FA.");
                }
                await IdentityService.EnableTwoFactorAsync(IdentityService.GetCurrentUserId(), TwoFactorSecret);
            }
            else
            {
                await IdentityService.DisableTwoFactorAsync(IdentityService.GetCurrentUserId());
                TwoFactorSecret = null; // Clear the secret if 2FA is disabled
            }
            StateHasChanged(); // Update the UI after saving the settings
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving 2FA settings: {ex.Message}");
        }
    }
}
