@page "/account-new"
@using System.Globalization
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.Shared
@using MudBlazor
@using System.IO
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager


<AuthWrapper>
    <MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
    <div class="breadcrumbs-container">
        <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
    </div>

    @code {
        private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Account settings", href: "/events/follow", disabled: true, icon: @Icons.Material.Filled.ManageAccounts),
        };

        private List<string> availableLanguages = new List<string>
        {
            "English",
            "Spanish",
            "French",
            "German",
            "Chinese",
            "Japanese",
            "Korean",
            "Italian",
            "Russian",
            "Portuguese"
        };
    }

    <MudContainer Class="account-container">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudNavMenu Elevation="1" Class="navigation-panel">
                    <MudNavLink Href="#profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                    <MudNavLink Href="#security" Icon="@Icons.Material.Filled.Security">Security</MudNavLink>
                    <MudNavLink Href="#notifications" Icon="@Icons.Material.Filled.Notifications">Notifications</MudNavLink>
                    <MudNavLink Href="#privacy" Icon="@Icons.Material.Filled.PrivacyTip">Privacy</MudNavLink>
                    <MudNavLink Href="#languages-interests" Icon="@Icons.Material.Filled.Language">Languages & Interests</MudNavLink>
                    <MudNavLink Href="#gallery" Icon="@Icons.Material.Filled.PhotoLibrary">Gallery</MudNavLink>
                </MudNavMenu>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudPaper Elevation="1" Class="content-panel">
                    <MudTabs>
                        <MudTabPanel Text="Profile" Icon="@Icons.Material.Filled.Person">
                            @ProfileContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Security" Icon="@Icons.Material.Filled.Security">
                            @SecurityContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Notifications" Icon="@Icons.Material.Filled.Notifications">
                            @NotificationsContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Privacy" Icon="@Icons.Material.Filled.PrivacyTip">
                            @PrivacyContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Languages & Interests" Icon="@Icons.Material.Filled.Language">
                            @LanguagesAndInterestsContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Gallery" Icon="@Icons.Material.Filled.PhotoLibrary">
                            @GalleryContent()
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</AuthWrapper>

<style>
    .account-container {
        margin-top: 20px;
    }

    .navigation-panel {
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
    }

    .content-panel {
        padding: 20px;
    }

    .mud-tabs {
        margin-top: 20px;
    }

    .mud-tabpanel {
        padding: 20px;
    }

    .mud-text-field {
        margin-bottom: 10px;
    }

    .mud-switch {
        margin-bottom: 10px;
    }

    .image-upload-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .profile-image {
        height: 150px;
        width: 150px;
    }

    .mud-input > textarea.mud-input-root {
        padding: 10px !important;
    }
</style>

@code {
    private StudentDto studentDto = new();
    private bool isLoading = true;
    private string profileImage = string.Empty;
    private bool isUploading = false;
    private IBrowserFile file;
    private long maxFileSize = 10 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                var studentId = IdentityService.GetCurrentUserId();
                studentDto = await StudentsService.GetStudentAsync(studentId);
                profileImage = studentDto.ProfileImageUrl;
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            // If a file is selected, upload it first
            if (file != null)
            {
                isUploading = true;
                StateHasChanged();

                try
                {
                    var stream = file.OpenReadStream(maxFileSize);
                    byte[] bytes = await ReadFully(stream);
                    var base64Content = Convert.ToBase64String(bytes);
                    var response = await MediaFilesService.UploadMediaFileAsync(IdentityService.UserDto.Id,
                        MediaFileContextType.StudentProfileImage.ToString(), IdentityService.UserDto.Id,
                        file.Name, file.ContentType, base64Content);
                    if (response.Content != null && !string.IsNullOrEmpty(response.Content.FileUrl))
                    {
                        studentDto.ProfileImageUrl = response.Content.FileUrl;
                        profileImage = response.Content.FileUrl;
                    }

                    stream.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error uploading image: {ex.Message}");
                }
                finally
                {
                    isUploading = false;
                    StateHasChanged();
                }
            }

            // Update student information
            await StudentsService.UpdateStudentAsync(studentDto.Id, studentDto.ProfileImageUrl, studentDto.Description, studentDto.EmailNotifications, studentDto.ContactEmail, studentDto.Languages, studentDto.Interests);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private RenderFragment ProfileContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Profile</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <div class="image-upload-container">
                        <MudAvatar Class="profile-image" Square="true" Image="@GetImage()" Alt="Profile image" Style="height:200px; width: 200px; font-size:2rem;"/>
                        <MudFileUpload T="IBrowserFile" @bind-Files="file" Accept=".jpg,.jpeg,.png">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context">
                                    Upload Image
                                </MudButton>
                            </ButtonTemplate>
                            <SelectedTemplate>
                                @if (file != null)
                                {
                                    <MudText> <MudIcon Icon="@Icons.Material.Filled.Attachment" /> @file.Name </MudText>
                                }
                                else
                                {
                                    <MudText><MudIcon Icon="@Icons.Material.Filled.Attachment" /> No Files Selected</MudText>
                                }
                            </SelectedTemplate>
                        </MudFileUpload>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="6" md="8">
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="studentDto.FirstName" Label="First Name" HelperText="Your first name" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="studentDto.LastName" Label="Last Name" HelperText="Your last name" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="studentDto.Email" Label="Email" HelperText="Your email address" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="studentDto.Education" Label="Education" HelperText="Your education background" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="studentDto.WorkPosition" Label="Work Position" HelperText="Your current work position" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="studentDto.Company" Label="Company" HelperText="Your current company" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="studentDto.Description" Label="Description" HelperText="A brief description about yourself" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="5"/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>

            @if (isUploading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
        }
    </div>;

    private RenderFragment SecurityContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Security</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudSwitch @bind-Checked="studentDto.IsTwoFactorEnabled" Label="Two-Factor Authentication" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private RenderFragment NotificationsContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Notifications</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudSwitch @bind-Checked="studentDto.EmailNotifications" Label="Email Notifications" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private RenderFragment PrivacyContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Privacy</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudTextField @bind-Value="studentDto.ContactEmail" Label="Contact Email" ReadOnly="true" HelperText="Your contact email" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private RenderFragment LanguagesAndInterestsContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Languages & Interests</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Languages</MudText>
                    <MudSelect @bind-SelectedValues="studentDto.Languages" Label="Select Languages" Variant="Variant.Outlined" T="string" MultiSelection="true">
                        @foreach (var language in availableLanguages)
                        {
                            <MudSelectItem Value="@language">@language</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Interests</MudText>
                    <MudTextField @bind-Value="studentDto.Interests" Label="Interests" HelperText="Your interests" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudItem>
            </MudGrid>
        }
    </div>;

    private RenderFragment GalleryContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Gallery</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                @foreach (var imageUrl in studentDto.GalleryOfImageUrls)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard>
                            <MudCardMedia Image="@imageUrl" Alt="Gallery image" />
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </div>;

    private string GetImage()
    {
        return !string.IsNullOrEmpty(profileImage) ? profileImage : "images/default_profile_image.webp";
    }

    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }
}
