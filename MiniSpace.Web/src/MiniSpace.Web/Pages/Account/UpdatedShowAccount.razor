@page "/account-new"
@using System.Globalization
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.Shared
@using MudBlazor
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager

<MudThemeProvider />
<AuthWrapper>
    <div class="breadcrumbs-container">
        <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
    </div>

    @code {
        private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Account settings", href: "/events/follow", disabled: true, icon: @Icons.Material.Filled.ManageAccounts),
        };
    }

    <MudContainer Class="account-container">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudNavMenu Elevation="1" Class="navigation-panel">
                    <MudNavLink Href="#profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                    <MudNavLink Href="#security" Icon="@Icons.Material.Filled.Security">Security</MudNavLink>
                    <MudNavLink Href="#notifications" Icon="@Icons.Material.Filled.Notifications">Notifications</MudNavLink>
                    <MudNavLink Href="#privacy" Icon="@Icons.Material.Filled.PrivacyTip">Privacy</MudNavLink>
                </MudNavMenu>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudPaper Elevation="1" Class="content-panel">
                    <MudTabs>
                        <MudTabPanel Text="Profile" Icon="@Icons.Material.Filled.Person">
                            @ProfileContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Security" Icon="@Icons.Material.Filled.Security">
                            @SecurityContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Notifications" Icon="@Icons.Material.Filled.Notifications">
                            @NotificationsContent()
                        </MudTabPanel>
                        <MudTabPanel Text="Privacy" Icon="@Icons.Material.Filled.PrivacyTip">
                            @PrivacyContent()
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</AuthWrapper>

<style>
.account-container {
    margin-top: 20px;
}

.navigation-panel {
    background-color: #f5f5f5;
    padding: 10px;
    border-radius: 5px;
}

.content-panel {
    padding: 20px;
}

.mud-tabs {
    margin-top: 20px;
}

.mud-tabpanel {
    padding: 20px;
}

.mud-text-field {
    margin-bottom: 10px;
}

.mud-switch {
    margin-bottom: 10px;
}
</style>

@code {
    private StudentDto studentDto = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                var studentId = IdentityService.GetCurrentUserId();
                studentDto = await StudentsService.GetStudentAsync(studentId);
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            await StudentsService.UpdateStudentAsync(studentDto.Id, studentDto.ProfileImageUrl, studentDto.Description, studentDto.EmailNotifications, studentDto.ContactEmail);
            // Add any additional success handling here
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // Add any error handling here
        }
    }

    private RenderFragment ProfileContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Profile</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudAvatar Size="Size.Large" Image="@GetImage()" Alt="Profile image" />
                <MudTextField Value="@studentDto.FullName" Label="Fullname" HelperText="Your full name" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly="true"/>
                <MudTextField @bind-Value="studentDto.Email" Label="Email" HelperText="Your email address" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="studentDto.Education" Label="Education" HelperText="Your education background" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="studentDto.WorkPosition" Label="Work Position" HelperText="Your current work position" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="studentDto.Company" Label="Company" HelperText="Your current company" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="studentDto.Description" Label="Description" Lines="3" HelperText="A brief description about yourself" AutoGrow Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private RenderFragment SecurityContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Security</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudSwitch @bind-Checked="studentDto.IsTwoFactorEnabled" Label="Two-Factor Authentication" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private RenderFragment NotificationsContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Notifications</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudSwitch @bind-Checked="studentDto.EmailNotifications" Label="Email Notifications" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private RenderFragment PrivacyContent() => @<div>
        <MudText Typo="Typo.h4" GutterBottom="true">Privacy</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudTextField @bind-Value="studentDto.ContactEmail" Label="Contact Email" ReadOnly="true" HelperText="Your contact email" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save</MudButton>
            </MudStack>
        }
    </div>;

    private string GetImage()
    {
        return !string.IsNullOrEmpty(studentDto.ProfileImageUrl) ? studentDto.ProfileImageUrl : "images/default_profile_image.webp";
    }
}
