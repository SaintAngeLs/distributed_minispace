@page "/account"
@using System.Globalization
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.Shared
@using MudBlazor
@using System.IO
@using System.Text.Json
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager

<AuthWrapper>
    <MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
    <div class="breadcrumbs-container">
        <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
    </div>

    <MudContainer Class="account-container">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudNavMenu Elevation="1">
                    <MudNavLink OnClick="() => SetActiveTabIndex(0)" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                    <MudNavLink OnClick="() => SetActiveTabIndex(1)" Icon="@Icons.Material.Filled.Security">Security</MudNavLink>
                    <MudNavLink OnClick="() => SetActiveTabIndex(2)" Icon="@Icons.Material.Filled.Notifications">Notifications</MudNavLink>
                    <MudNavLink OnClick="() => SetActiveTabIndex(3)" Icon="@Icons.Material.Filled.PrivacyTip">Privacy</MudNavLink>
                    <MudNavLink OnClick="() => SetActiveTabIndex(4)" Icon="@Icons.Material.Filled.Language">Languages & Interests</MudNavLink>
                    <MudNavLink OnClick="() => SetActiveTabIndex(5)" Icon="@Icons.Material.Filled.PhotoLibrary">Gallery</MudNavLink>
                    <MudNavLink OnClick="() => SetActiveTabIndex(6)" Icon="@Icons.Material.Filled.Settings">User Settings</MudNavLink>
                </MudNavMenu>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudPaper Elevation="1" Class="content-panel">
                    @if (activeTabIndex == 0)
                    {
                        @ProfileContent()
                    }
                    else if (activeTabIndex == 1)
                    {
                        @SecurityContent()
                    }
                    else if (activeTabIndex == 2)
                    {
                        @NotificationsContent()
                    }
                    else if (activeTabIndex == 3)
                    {
                        @PrivacyContent()
                    }
                    else if (activeTabIndex == 4)
                    {
                        @LanguagesAndInterestsContent()
                    }
                    else if (activeTabIndex == 5)
                    {
                        @GalleryContent()
                    }
                    else if (activeTabIndex == 6)
                    {
                        @UserSettingsContent()
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</AuthWrapper>

<style>
    .account-container {
        margin-top: 20px;
    }

    .navigation-panel {
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
    }

    .content-panel {
        padding: 20px;
    }

    .mud-tabs {
        margin-top: 20px;
    }

    .mud-tabpanel {
        padding: 20px;
    }

    .mud-text-field {
        margin-bottom: 10px;
    }

    .mud-switch {
        margin-bottom: 10px;
    }

    .image-upload-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .profile-image {
        height: 150px;
        width: 150px;
    }

    textarea.mud-input-slot.mud-input-root.mud-input-root-outlined {
        padding: 10px !important;
    }
    .mud-input>input.mud-input-root {
        padding: 10px !important;
    }

    .button-margins {
        margin: 10px 0 !important;
    }
</style>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Account settings", href: "/events/follow", disabled: true, icon: @Icons.Material.Filled.ManageAccounts),
    };

    private List<string> availableLanguages = new List<string>
    {
        "English",
        "Spanish",
        "French",
        "German",
        "Chinese",
        "Japanese",
        "Korean",
        "Italian",
        "Russian",
        "Portuguese"
    };

    private int activeTabIndex = 0;
    private bool isTwoFactorEnabled;
    private string twoFactorSecret;
    private bool isLoading = true;
    private string profileImage = string.Empty;
    private bool isUploading = false;
    private IBrowserFile file;
    private long maxFileSize = 10 * 1024 * 1024;
    private StudentWithGalleryImagesDto studentWithGalleryImagesDto = new();
    private NotificationPreferencesDto notificationPreferencesDto = new NotificationPreferencesDto();
    private AvailableSettingsDto availableSettingsDto = new AvailableSettingsDto();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await IdentityService.InitializeAuthenticationState();

            if (IdentityService.IsAuthenticated)
            {
                var studentId = IdentityService.GetCurrentUserId();
                studentWithGalleryImagesDto = await StudentsService.GetStudentWithGalleryImagesAsync(studentId);
                var studentDto = studentWithGalleryImagesDto.Student;

                if (studentDto.EmailNotifications)
                {
                    notificationPreferencesDto = await StudentsService.GetUserNotificationPreferencesAsync(studentId);
                }
                profileImage = studentDto.ProfileImageUrl;
                isTwoFactorEnabled = studentDto.IsTwoFactorEnabled;
                twoFactorSecret = studentDto.IsTwoFactorEnabled ? studentDto.TwoFactorSecret : null;

                availableSettingsDto = await StudentsService.GetUserSettingsAsync(studentId);
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            var studentDto = studentWithGalleryImagesDto.Student;
            var updateStudentData = new
            {
                studentDto.Id,
                studentDto.FirstName,
                studentDto.LastName,
                studentDto.ProfileImageUrl,
                studentDto.Description,
                studentDto.EmailNotifications,
                studentDto.ContactEmail,
                studentDto.Languages,
                studentDto.Interests,
                studentDto.Education,
                studentDto.Work,
                studentDto.PhoneNumber,
                IsTwoFactorEnabled = isTwoFactorEnabled,
                TwoFactorSecret = isTwoFactorEnabled ? twoFactorSecret : null
            };

            var jsonData = JsonSerializer.Serialize(updateStudentData);
            Console.WriteLine($"Sending UpdateStudent request: {jsonData}");

            await StudentsService.UpdateStudentAsync(
                studentDto.Id,
                studentDto.FirstName,
                studentDto.LastName,
                studentDto.ProfileImageUrl,
                studentDto.Description,
                studentDto.EmailNotifications,
                studentDto.ContactEmail,
                studentDto.Languages,
                studentDto.Interests,
                isTwoFactorEnabled,
                !isTwoFactorEnabled,
                isTwoFactorEnabled ? twoFactorSecret : null,
                studentDto.Education,
                studentDto.Work,
                studentDto.PhoneNumber
            );

            if (studentDto.EmailNotifications)
            {
                await StudentsService.UpdateUserNotificationPreferencesAsync(studentDto.Id, notificationPreferencesDto);
            }

            await StudentsService.UpdateUserSettingsAsync(studentDto.Id, availableSettingsDto);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SaveImageAsync()
    {
        try
        {
            if (file != null)
            {
                isUploading = true;
                StateHasChanged();

                try
                {
                    var stream = file.OpenReadStream(maxFileSize);
                    byte[] bytes = await ReadFully(stream);
                    var base64Content = Convert.ToBase64String(bytes);
                    var response = await MediaFilesService.UploadMediaFileAsync(IdentityService.UserDto.Id,
                        MediaFileContextType.StudentProfileImage.ToString(), IdentityService.UserDto.Id,
                        file.Name, file.ContentType, base64Content);
               
                    studentWithGalleryImagesDto.Student.ProfileImageUrl = response.Content.FileUrl;
                    profileImage = response.Content.FileUrl;

                    stream.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error uploading image: {ex.Message}");
                }
                finally
                {
                    isUploading = false;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private RenderFragment ProfileContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">Profile</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <div class="image-upload-container">
                        <MudAvatar Class="profile-image" Square="true" Image="@GetImage()" Alt="Profile image" Style="height:200px; width: 200px; font-size:2rem;"/>
                        <MudFileUpload T="IBrowserFile" @bind-Files="file" Accept=".jpg,.jpeg,.png">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.CloudUpload"
                                    Class="button-margins"
                                    for="@context">
                                    Upload Image
                                </MudButton>
                            </ButtonTemplate>
                            <SelectedTemplate>
                                @if (file != null)
                                {
                                    <MudText> <MudIcon Icon="@Icons.Material.Filled.Attachment" /> @file.Name </MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveImageAsync">Save Image</MudButton>
                                }
                                else
                                {
                                    <MudText><MudIcon Icon="@Icons.Material.Filled.Attachment" /> No Files Selected</MudText>
                                }
                            </SelectedTemplate>
                        </MudFileUpload>
                    </div>
                </MudItem>
                <MudItem xs="11" sm="11">
                    <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.FirstName" Label="First Name" HelperText="Your first name" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                </MudItem>
                <MudItem xs="11" sm="11">
                    <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.LastName" Label="Last Name" HelperText="Your last name" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                </MudItem>
                <MudItem xs="12" sm="11" md="11">
                    <MudGrid>
                        <MudItem xs="11">
                            <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.Email" Label="Email" HelperText="Your email address" Variant="Variant.Outlined" ReadOnly="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="11">
                            <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.PhoneNumber" Label="Phone Number" HelperText="Your phone number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="11">
                            <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.Description" Label="Description" HelperText="A brief description about yourself" Variant="Variant.Outlined"  Lines="5"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
            <MudStack>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save profile</MudButton>
                @if (isUploading)
                {
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                }
            </MudStack>
        }
    </div>;

    private RenderFragment SecurityContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">Security</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudSwitch @bind-Checked="isTwoFactorEnabled" Label="Enable Two-Factor Authentication" OnChange="ToggleTwoFactor" Color="Color.Primary"/>
                @if (isTwoFactorEnabled)
                {
                    @if (string.IsNullOrEmpty(twoFactorSecret))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateTwoFactorSecret">Generate Secret Token</MudButton>
                    }
                    else
                    {
                        <MudTextField @bind-Value="twoFactorSecret" Label="Two-Factor Authentication Secret" ReadOnly="true" />
                    }
                }
            </MudStack>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveTwoFactorSettingsAsync" Disabled="@(!isTwoFactorEnabled || (isTwoFactorEnabled && string.IsNullOrEmpty(twoFactorSecret)))" Class="button-margins">Save 2FA Settings</MudButton>
        }
    </div>;

    private async Task SaveTwoFactorSettingsAsync()
    {
        try
        {
            if (isTwoFactorEnabled)
            {
                if (string.IsNullOrEmpty(twoFactorSecret))
                {
                    throw new InvalidOperationException("Secret token must be generated before enabling 2FA.");
                }

                await IdentityService.EnableTwoFactorAsync(IdentityService.GetCurrentUserId(), twoFactorSecret);
            }
            else
            {
                await IdentityService.DisableTwoFactorAsync(IdentityService.GetCurrentUserId());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving 2FA settings: {ex.Message}");
        }
    }

    private async Task ToggleTwoFactor(bool enabled)
    {
        isTwoFactorEnabled = enabled;
        if (!enabled)
        {
            await IdentityService.DisableTwoFactorAsync(IdentityService.GetCurrentUserId());
            twoFactorSecret = null;
        }
        else
        {
            twoFactorSecret = await IdentityService.GenerateTwoFactorSecretAsync(IdentityService.GetCurrentUserId());
            await IdentityService.EnableTwoFactorAsync(IdentityService.GetCurrentUserId(), twoFactorSecret);
        }
        StateHasChanged();
    }

    private async Task GenerateTwoFactorSecret()
    {
        var userId = IdentityService.GetCurrentUserId();
        twoFactorSecret = await IdentityService.GenerateTwoFactorSecretAsync(userId);
        StateHasChanged();
    }

    private RenderFragment NotificationsContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">Notifications</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudSwitch @bind-Checked="studentWithGalleryImagesDto.Student.EmailNotifications" Label="Email Notifications" />
                @if (studentWithGalleryImagesDto.Student.EmailNotifications)
                {
                    <MudSwitch @bind-Checked="notificationPreferencesDto.AccountChanges" Label="Account Changes" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.SystemLogin" Label="System Login" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.NewEvent" Label="New Event" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.InterestBasedEvents" Label="Interest Based Events" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.EventNotifications" Label="Event Notifications" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.CommentsNotifications" Label="Comments Notifications" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.PostsNotifications" Label="Posts Notifications" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="notificationPreferencesDto.FriendsNotifications" Label="Friends Notifications" Color="Color.Primary"/>
                }
            </MudStack>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save preferences</MudButton>
        }
    </div>;

    private RenderFragment PrivacyContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">Privacy</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudStack>
                <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.ContactEmail" Label="Contact Email" HelperText="Your contact email" Variant="Variant.Outlined" Margin="Margin.Dense" />
            </MudStack>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangesAsync">Save privacy</MudButton>
        }
    </div>;

    private RenderFragment LanguagesAndInterestsContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">Languages & Interests</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Languages</MudText>
                    <MudSelect @bind-SelectedValues="studentWithGalleryImagesDto.Student.Languages" Label="Select Languages" Variant="Variant.Outlined" T="string" MultiSelection="true">
                        @foreach (var language in availableLanguages)
                        {
                            <MudSelectItem Value="@language">@language</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Interests</MudText>
                    <MudTextField @bind-Value="studentWithGalleryImagesDto.Student.Interests" Label="Interests" HelperText="Your interests" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudItem>
            </MudGrid>
        }
    </div>;

    private RenderFragment GalleryContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">Gallery</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                @foreach (var galleryImage in studentWithGalleryImagesDto.GalleryImages)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard>
                            <MudCardMedia Image="@galleryImage.ImageUrl" Alt="Gallery image" />
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </div>;

    private RenderFragment UserSettingsContent() => @<div>
        <MudText Typo="Typo.h6" GutterBottom="true">User Settings</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.CreatedAtVisibility" Label="Created At Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.DateOfBirthVisibility" Label="Date of Birth Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.InterestedInEventsVisibility" Label="Interested In Events Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.SignedUpEventsVisibility" Label="Signed Up Events Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.EducationVisibility" Label="Education Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.WorkPositionVisibility" Label="Work Position Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.LanguagesVisibility" Label="Languages Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.InterestsVisibility" Label="Interests Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.ContactEmailVisibility" Label="Contact Email Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.PhoneNumberVisibility" Label="Phone Number Visibility" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (Visibility visibility in Enum.GetValues(typeof(Visibility)))
                        {
                            <MudSelectItem Value="@visibility">@visibility</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.PreferredLanguage" Label="Preferred Language" HelperText="Preferred language for the interface" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (PreferredLanguage language in Enum.GetValues(typeof(PreferredLanguage)))
                        {
                            <MudSelectItem Value="@language">@language</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="availableSettingsDto.FrontendVersion" Label="Frontend Version" Variant="Variant.Outlined" Margin="Margin.Dense">
                        @foreach (FrontendVersion version in Enum.GetValues(typeof(FrontendVersion)))
                        {
                            <MudSelectItem Value="@version">@version</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveUserSettingsAsync">Save Settings</MudButton>
        }
    </div>;

    private string GetImage()
    {
        return !string.IsNullOrEmpty(profileImage) ? profileImage : "images/default_profile_image.webp";
    }

    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }

    private async Task SaveUserSettingsAsync()
    {
    
            var studentId = IdentityService.GetCurrentUserId();
            await StudentsService.UpdateUserSettingsAsync(studentId, availableSettingsDto);
            Console.WriteLine("Student settings updated successfully.");

    }



    private void SetActiveTabIndex(int index)
    {
        activeTabIndex = index;
    }
}
