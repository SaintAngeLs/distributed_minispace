@page "/edit-gallery"
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.Areas.Students
@inject IMediaFilesService MediaFilesService
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using System.IO
@inject IJSRuntime JS
@using Microsoft.JSInterop

<MudDialogProvider/>

<AuthWrapper>
    <MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
    <div class="breadcrumbs-container">
        <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
    </div>

    <div>
        <MudText Typo="Typo.h6" GutterBottom="true">Edit Gallery</MudText>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" GutterBottom="true">Gallery Images</MudText>
                    @if (studentDto.GalleryOfImageUrls == null || !studentDto.GalleryOfImageUrls.Any(IsValidImageUrl))
                    {
                        <MudText Typo="Typo.subtitle2" Color="Color.Secondary">No gallery images available</MudText>
                    }
                    else
                    {
                        <MudGrid class="spotlight-group" Spacing="3">
                            @foreach (var imageUrl in studentDto.GalleryOfImageUrls.Where(IsValidImageUrl))
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudCard>
                                        <MudCardMedia Image="@imageUrl" Alt="Gallery image" />
                                        <MudCardActions>
                                            <MudCheckBox @bind-Checked="selectedImages[imageUrl]" />
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    <div class="image-upload-container">
                        <InputFile id="fileInput" OnChange="OnGalleryFilesChanged" multiple accept="image/*" style="display: none;" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TriggerFileInputClick">Add Gallery Images</MudButton>
                        @if (galleryFiles != null && galleryFiles.Any())
                        {
                            <MudText> <MudIcon Icon="@Icons.Material.Filled.Attachment" /> @galleryFiles.Count() files selected </MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UploadGalleryImagesAsync">Upload</MudButton>
                        }
                        @if (selectedImages.Values.Any(v => v))
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteSelectedImages">Delete Selected Images</MudButton>
                        }
                        @if (isUploading)
                        {
                            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                        }
                    </div>
                </MudItem>
            </MudGrid>
        }
    </div>
</AuthWrapper>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Account settings", href: "/account", icon: @Icons.Material.Filled.ManageAccounts),
        new BreadcrumbItem("Gallery", href: "/edit-gallery", disabled: true, icon: @Icons.Material.Filled.ManageAccounts),
    };

    private bool isLoading = true;
    private bool isUploading = false;
    private StudentDto studentDto = new();
    private List<IBrowserFile> galleryFiles = new List<IBrowserFile>();
    private long maxFileSize = 32 * 1024 * 1024;
    private Dictionary<string, bool> selectedImages = new();
    private readonly List<string> validImageExtensions = new List<string> { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            await IdentityService.InitializeAuthenticationState();
            if (IdentityService.IsAuthenticated)
            {
                var studentId = IdentityService.GetCurrentUserId();
                studentDto = await StudentsService.GetStudentAsync(studentId);
                selectedImages = studentDto.GalleryOfImageUrls.ToDictionary(url => url, url => false);
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnGalleryFilesChanged(InputFileChangeEventArgs args)
    {
        galleryFiles = args.GetMultipleFiles().ToList();
        StateHasChanged();
    }

    private async Task UploadGalleryImagesAsync()
    {
        if (galleryFiles != null && galleryFiles.Count > 0)
        {
            isUploading = true;
            StateHasChanged();
            try
            {
                foreach (var file in galleryFiles)
                {
                    using var stream = file.OpenReadStream(maxFileSize);
                    byte[] bytes = await ReadFully(stream);
                    var base64Content = Convert.ToBase64String(bytes);
                    var response = await MediaFilesService.UploadMediaFileAsync(IdentityService.GetCurrentUserId(),
                        MediaFileContextType.StudentGalleryImage.ToString(), IdentityService.GetCurrentUserId(),
                        file.Name, file.ContentType, base64Content);
                    if (response.Content != null && !string.IsNullOrEmpty(response.Content.FileUrl))
                    {
                        studentDto.GalleryOfImageUrls = studentDto.GalleryOfImageUrls.Append(response.Content.FileUrl).ToList();
                        selectedImages.Add(response.Content.FileUrl, false);
                    }
                }
            }
            finally
            {
                galleryFiles.Clear();
                isUploading = false;
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
    }

    private async Task DeleteSelectedImages()
    {
        var imagesToDelete = selectedImages.Where(kv => kv.Value).Select(kv => kv.Key).ToList();
        foreach (var imageUrl in imagesToDelete)
        {
            await MediaFilesService.DeleteMediaFileAsync(imageUrl);
            studentDto.GalleryOfImageUrls = studentDto.GalleryOfImageUrls.Where(url => url != imageUrl).ToList();
            selectedImages.Remove(imageUrl);
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }

    private async Task TriggerFileInputClick()
    {
        var fileInput = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "fileInput");
        await fileInput.InvokeVoidAsync("click");
    }

    private bool IsValidImageUrl(string url)
    {
        return validImageExtensions.Contains(Path.GetExtension(url)?.ToLower());
    }
}
