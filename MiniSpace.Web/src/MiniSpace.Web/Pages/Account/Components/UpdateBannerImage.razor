@page "/update-banner"
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.MediaFiles
@using Microsoft.AspNetCore.Components.Forms
@inject IMediaFilesService MediaFilesService
@inject IIdentityService IdentityService
@inject IJSRuntime JSRuntime
@using System.IO
@inject NavigationManager NavigationManager
@using MudBlazor

<MudDialogProvider/>
<div>
    <MudText Typo="Typo.h6" GutterBottom="true">Update Banner Image</MudText>
    <InputFile OnChange="HandleImageSelected" accept="image/*" id="file-input" />
    
    <div id="image-container" class="img-container"></div>

    @if (!string.IsNullOrEmpty(croppedImageBase64))
    {
        <!-- Display of cropped image -->
        <div class="cropped-image-preview">
            <img src="@croppedImageBase64" alt="Cropped Image" style="max-width: 100%;" />
        </div>
    }
</div>

<RadzenDialog />

<style>
    .img-container {
        max-height: 900px;
        width: 100%;
        display: block;
        position: relative;
        overflow: hidden;
    }
    .cropped-image-preview img {
        max-width: 100%;
        height: auto;
    }
</style>

@code {
    private string croppedImageBase64;

    private DotNetObjectReference<UpdateBannerImage> dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", dotNetRef);
        }
    }

    private async Task HandleImageSelected(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            // Define a new maximum size limit for the file, e.g., 5 MB
            long maxAllowedSize = 5 * 1024 * 1024; // 5 MB in bytes

            try
            {
                using var stream = imageFile.OpenReadStream(maxAllowedSize);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var buffer = ms.ToArray();
                var base64String = Convert.ToBase64String(buffer);
                await JSRuntime.InvokeVoidAsync("displayImageAndInitializeCropper", base64String);
            }
            catch (System.IO.IOException ex)
            {
                Console.Error.WriteLine($"File size exceeds the maximum limit: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public async Task ReceiveCroppedImage(string base64Result)
    {
        croppedImageBase64 = base64Result;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SaveCroppedImage()
    {
        try
        {
            var base64Content = croppedImageBase64.Split(',')[1];
            var response = await MediaFilesService.UploadMediaFileAsync(
                IdentityService.GetCurrentUserId(),
                MediaFileContextType.StudentBannerImage.ToString(),
                IdentityService.GetCurrentUserId(),
                "banner.jpg",
                "image/jpeg",
                base64Content
            );

            if (response != null)
            {
                NavigationManager.NavigateTo("/student-profile");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving the cropped image: {ex.Message}");
        }
    }
}
