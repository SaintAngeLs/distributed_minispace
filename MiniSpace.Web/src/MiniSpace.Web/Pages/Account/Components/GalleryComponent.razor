@page "/student-profile"
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.Areas.Students
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@inject IMediaFilesService MediaFilesService
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using MudBlazor

<MudDialogProvider/>
<div>
    <MudText Typo="Typo.h6" GutterBottom="true">Gallery</MudText>
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6" GutterBottom="true">Current Banner</MudText>
                @if (!string.IsNullOrEmpty(studentDto.BannerUrl))
                {
                    <MudCard>
                        <MudCardMedia Image="@studentDto.BannerUrl" Alt="Banner image" />
                    </MudCard>
                }
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToBannerUpdate">Change Banner Image</MudButton>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6" GutterBottom="true">Gallery Images</MudText>
                <div class="spotlight-group">
                    @foreach (var imageUrl in studentDto.GalleryOfImageUrls)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <a class="spotlight" href="@imageUrl">
                                <MudCard>
                                    <MudCardMedia Image="@imageUrl" Alt="Gallery image" />
                                </MudCard>
                            </a>
                        </MudItem>
                    }
                </div>
                <div class="image-upload-container">
                    <MudImageInput T="IBrowserFile" OnChange="OnGalleryFilesChanged" Label="Choose Gallery Files" Accept="image/*" Multiple Color="Color.Primary" />
                    @if (galleryFiles != null && galleryFiles.Any())
                    {
                        <MudText> <MudIcon Icon="@Icons.Material.Filled.Attachment" /> @galleryFiles.Count() files selected </MudText>
                    }
                    else
                    {
                        <MudText><MudIcon Icon="@Icons.Material.Filled.Attachment" /> No Files Selected</MudText>
                    }
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UploadGalleryImagesAsync">Upload to Gallery</MudButton>
                </div>
            </MudItem>
        </MudGrid>
    }
</div>

<RadzenDialog />

@code {
    private bool isLoading = true;
    private StudentDto studentDto = new();
    private IList<IBrowserFile> galleryFiles = new List<IBrowserFile>();

    private long maxFileSize = 32 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            await IdentityService.InitializeAuthenticationState();
            if (IdentityService.IsAuthenticated)
            {
                var studentId = IdentityService.GetCurrentUserId();
                studentDto = await StudentsService.GetStudentAsync(studentId);
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnGalleryFilesChanged(InputFileChangeEventArgs args)
    {
        galleryFiles = args.GetMultipleFiles().ToList();
        StateHasChanged();
    }

    private async Task UploadGalleryImagesAsync()
    {
        if (galleryFiles != null && galleryFiles.Count > 0)
        {
            foreach (var file in galleryFiles)
            {
                var stream = file.OpenReadStream(maxFileSize);
                byte[] bytes = await ReadFully(stream);
                var base64Content = Convert.ToBase64String(bytes);
                var response = await MediaFilesService.UploadMediaFileAsync(IdentityService.GetCurrentUserId(),
                    MediaFileContextType.StudentGalleryImage.ToString(), IdentityService.GetCurrentUserId(),
                    file.Name, file.ContentType, base64Content);
                if (response.Content != null && !string.IsNullOrEmpty(response.Content.FileUrl))
                {
                    studentDto.GalleryOfImageUrls = studentDto.GalleryOfImageUrls.Append(response.Content.FileUrl).ToList();
                }
                stream.Close();
            }
            StateHasChanged();
        }
    }

    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }

    private void NavigateToBannerUpdate()
    {
        NavigationManager.NavigateTo("/update-banner");
    }
}
