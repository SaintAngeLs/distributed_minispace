@page "/reset-password/"
@page "/reset-password/{Token}/page"
@using MiniSpace.Web.Models.Identity
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Http
@using MiniSpace.Web.DTO
@using MudBlazor
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudThemeProvider />
<style>
    body {
        margin: 0;
        font-family: 'Roboto', sans-serif;
        background: #f4f4f9;
        color: #333;
    }

    .split-container {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    .left-side, .right-side {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .left-side {
        background: black;
        position: relative;
    }

    .right-side {
        margin-top: 5rem !important;
    }

    video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .form-container {
        width: 100%;
        max-width: 400px;
        background: rgba(255, 255, 255, 0.85);
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    a, button {
        transition: color 0.3s ease, background-color 0.3s ease;
    }

    a:hover, button:hover {
        color: #007BFF;
    }
</style>

<div class="split-container">
    <div class="left-side">
        <video id="videoPlayer" autoplay muted loop>
            <source src="videos/video-component/video_1.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>
    <div class="right-side">
        <div class="form-container">
            <div class="reset-password-pre-info">
                <h2>Reset Your Password</h2>
                <p>Please enter your new password below.</p>
            </div>
            <EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="resetPasswordModel.Email" Label="Email" Variant="Variant.Outlined" Required="true" RequiredError="Email is required" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="resetPasswordModel.NewPassword" Label="New Password" Variant="Variant.Outlined" InputType="InputType.Password" Adornment="Adornment.End" AdornmentIcon="@passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Required="true" RequiredError="New Password is required" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="resetPasswordModel.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined" InputType="InputType.Password" Adornment="Adornment.End" AdornmentIcon="@passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Required="true" RequiredError="Confirm Password is required" />
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Reset Password</MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
            @if (showError)
            {
                <MudAlert Severity="Severity.Error" OnClose="OnAlertClose">
                    @errorMessage
                </MudAlert>
            }
            <div style="text-align: center; margin-top: 3rem !important;">
                <MudLink Href="/signin">Back to Sign In</MudLink>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Token { get; set; } = "";

    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private bool showError = false;
    private string errorMessage = string.Empty;
    private InputType passwordInputType = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        Console.WriteLine($"Current URL: {NavigationManager.Uri}");
        Console.WriteLine($"Token received: {Token}");

        if (string.IsNullOrEmpty(Token))
        {
            showError = true;
            errorMessage = "Invalid token.";
        }
        else
        {
            resetPasswordModel.Token = Token;
        }
    }

    private void OnAlertClose()
    {
        showError = false;
        errorMessage = string.Empty;
    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == InputType.Password)
        {
            passwordInputType = InputType.Text;
            passwordInputIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            passwordInputType = InputType.Password;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task HandleResetPassword()
    {
        Console.WriteLine($"NewPassword: {resetPasswordModel.NewPassword}, ConfirmPassword: {resetPasswordModel.ConfirmPassword}");
        try
        {
            var response = await IdentityService.ResetPasswordAsync(resetPasswordModel.Token, resetPasswordModel.Email, resetPasswordModel.NewPassword);
            if (response != null)
            {
                NavigationManager.NavigateTo("/signin", true);
            }
            else
            {
                showError = true;
                errorMessage = "Failed to reset password. Please try again.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            showError = true;
            errorMessage = $"Error during password reset: {ex.Message}";
            StateHasChanged();
        }
    }
}
