@page "/gallery"
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IMediaFilesService MediaFilesService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.IO
@using MudBlazor

<MudText Typo="Typo.h6" GutterBottom="true">Gallery</MudText>

@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudGrid GutterSize="16px">
        <MudItem xs="12">
            <MudText Typo="Typo.body1">Add a new image to your gallery</MudText>

            <MudFileUpload T="IBrowserFile" FilesChanged="OnFilesChanged" Accept=".png,.jpg,.jpeg">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">
                        Choose Image
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            @if (selectedFile != null)
            {
                <MudCardMedia Image="@previewImageUrl" Alt="Selected image preview" Height="200" />
            }

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await UploadImage())" Disabled="@IsUploadButtonDisabled">
                Upload Image
            </MudButton>

            @if (IsUploading)
            {
                <MudProgressLinear Indeterminate="true" />
            }
        </MudItem>

        @if (StudentWithGalleryImagesDto?.GalleryImages != null && StudentWithGalleryImagesDto.GalleryImages.Any())
        {
            @foreach (var galleryImage in StudentWithGalleryImagesDto.GalleryImages)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard>
                        <MudCardMedia Image="@galleryImage.ImageUrl" Alt="Gallery image" />
                        <MudCardContent>
                            <MudText Typo="Typo.body2">Added on: @galleryImage.DateAdded.ToString("MMMM dd, yyyy")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12">
                <MudText Typo="Typo.body1">No images found in your gallery.</MudText>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public StudentWithGalleryImagesDto StudentWithGalleryImagesDto { get; set; }

    private IBrowserFile selectedFile;
    private string previewImageUrl;
    private bool IsUploading = false;

    // Computed property for button's Disabled state
    private bool IsUploadButtonDisabled => IsUploading || selectedFile == null;

    private void OnFilesChanged(IBrowserFile file)
    {
        selectedFile = file;

        // Generate a preview URL for the selected image
        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            using var stream = selectedFile.OpenReadStream();
            stream.Read(buffer, 0, (int)selectedFile.Size);
            previewImageUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task UploadImage()
    {
        if (selectedFile != null)
        {
            IsUploading = true;
            StateHasChanged();

            try
            {
                using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB max size
                byte[] bytes = new byte[stream.Length];
                await stream.ReadAsync(bytes);
                var base64Image = Convert.ToBase64String(bytes);

                var response = await MediaFilesService.UploadMediaFileAsync(
                    sourceId: IdentityService.GetCurrentUserId(),
                    sourceType: "StudentGalleryImage",
                    uploaderId: IdentityService.GetCurrentUserId(),
                    fileName: selectedFile.Name,
                    fileContentType: selectedFile.ContentType,
                    base64Content: base64Image
                );

                var newImageId = Guid.NewGuid();

                StudentWithGalleryImagesDto.GalleryImages.Add(new GalleryImageDto(
                    imageId: newImageId,
                    imageUrl: response.Content.FileUrl,
                    dateAdded: DateTime.UtcNow
                ));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading image: {ex.Message}");
            }
            finally
            {
                IsUploading = false;
                selectedFile = null; // Reset the selected file after upload
                previewImageUrl = null; // Clear the preview
                StateHasChanged();
            }
        }
    }
}
