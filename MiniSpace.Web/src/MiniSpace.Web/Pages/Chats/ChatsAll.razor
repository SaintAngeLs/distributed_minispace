@page "/chats/all"
@using MiniSpace.Web.HttpClients
@using MiniSpace.Web.Areas.Communication
@using MiniSpace.Web.DTO.Communication
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject ICommunicationService CommunicationService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ChatSignalRService ChatSignalRService
@using MudBlazor
@using System.Threading
@implements IAsyncDisposable

<MudContainer Class="all-chats-container">
    <MudPaper Class="search-container" Elevation="1">
        <MudTextField @bind-Value="searchQuery" Placeholder="Search chats..." Class="search-bar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" />
    </MudPaper>
    
    <MudPaper Class="conversation-list" Elevation="1">
        @if (filteredChats.Any())
        {
            @foreach (var chat in filteredChats)
            {
                var lastMessage = lastMessages.ContainsKey(chat.Id) ? lastMessages[chat.Id] : null;
                var isTyping = typingStatus.TryGetValue(chat.Id, out var typingUser) && !string.IsNullOrEmpty(typingUser.UserName);
                <MudItem @onclick="@(() => SelectChat(chat.Id))" Class="chat-item">
                    <MudAvatar Class="chat-avatar">
                        <MudImage Src="@GetChatImage(chat.Id)" Size="Size.Large" />
                    </MudAvatar>
                    <div class="chat-details">
                        <MudText Class="chat-name">@GetChatName(chat.Id)</MudText>
                        <MudText Class="last-message">
                            @if (isTyping)
                            {
                                <span class="typing-status">@typingUser.UserName is typing...</span>
                            }
                            else
                            {
                                <span class="message-author">@GetSenderName(lastMessage?.SenderId ?? Guid.Empty):</span> @lastMessage?.Content
                            }
                        </MudText>
                    </div>
                    <MudText Class="chat-timestamp">@lastMessage?.Timestamp.ToString("MMM d, h:mm tt")</MudText>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Class="chat-menu">
                        <MudButton OnClick="@(() => ShowDeleteChatDialog(chat.Id))">Delete Chat</MudButton>
                    </MudMenu>
                </MudItem>
                <MudDivider />
            }
        }
        else
        {
            <MudText Class="no-results">No chats found.</MudText>
        }
    </MudPaper>
</MudContainer>

<style>
    .all-chats-container {
        padding: 20px;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: #f4f4f9;
    }

    .search-container {
        width: 100%;
        max-width: 1200px;
        margin-bottom: 20px;
        padding: 10px;
        background-color: white;
        border-radius: 8px;
    }

    .search-bar {
        width: 100%;
    }

    .conversation-list {
        width: 100%;
        max-width: 1200px;
        padding: 0;
        margin: 0;
        border-radius: 8px;
        box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .chat-item {
        display: flex;
        align-items: center;
        padding: 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        width: 100%;
    }

    .chat-item:hover {
        background-color: #f1f3f5;
    }

    .chat-avatar {
        margin-right: 20px;
        width: 64px;
        height: 64px;
        border-radius: 50%;
    }

    .chat-details {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .chat-name {
        font-weight: 600;
        margin-bottom: 4px;
        color: #343a40;
        font-size: 1.1rem;
    }

    .last-message {
        font-size: 0.875rem;
        color: #495057;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .message-author {
        font-weight: 500;
        color: #6c757d;
    }

    .typing-status {
        font-style: italic;
        color: #6c757d;
    }

    .chat-timestamp {
        font-size: 0.875rem;
        color: #adb5bd;
        margin-left: auto;
        white-space: nowrap;
    }

    .chat-menu {
        margin-left: auto;
        padding: 0;
    }

    .no-results {
        padding: 20px;
        color: #6c757d;
        text-align: center;
        font-size: 1rem;
    }
</style>

@code {
    private List<ChatDto> userChats = new();
    private Dictionary<Guid, MessageDto> lastMessages = new();
    private Dictionary<Guid, string> userNames = new();
    private Dictionary<Guid, string> userImages = new();
    private Dictionary<Guid, (string UserName, Timer Timer)> typingStatus = new();
    private string searchQuery = string.Empty;

    private IEnumerable<ChatDto> filteredChats => userChats
        .Where(chat => string.IsNullOrEmpty(searchQuery) || 
                       GetChatName(chat.Id).Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                       (lastMessages.ContainsKey(chat.Id) && lastMessages[chat.Id]?.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true))
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();

        if (IdentityService.IsAuthenticated)
        {
            await LoadUserChats();

            var userId = IdentityService.GetCurrentUserId();
            await ChatSignalRService.StartAsync(userId);
            ChatSignalRService.MessageReceived += OnMessageReceived;
            ChatSignalRService.TypingNotificationReceived += OnTypingNotificationReceived;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadUserChats()
    {
        try
        {
            var userId = IdentityService.GetCurrentUserId();
            var result = await CommunicationService.GetUserChatsAsync(userId, 1, 20);

            if (result != null)
            {
                userChats = result.Items.SelectMany(u => u.Chats).ToList();
                await LoadLastMessages();
                await LoadUserDetails();

                userChats = userChats
                    .OrderByDescending(c => lastMessages.ContainsKey(c.Id) ? lastMessages[c.Id]?.Timestamp : DateTime.MinValue)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load chats: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadLastMessages()
    {
        foreach (var chat in userChats)
        {
            var messages = await CommunicationService.GetMessagesForChatAsync(chat.Id);
            lastMessages[chat.Id] = messages.OrderByDescending(m => m.Timestamp).FirstOrDefault();
        }
    }

    private async Task LoadUserDetails()
    {
        var allUserIds = userChats.SelectMany(c => c.ParticipantIds).Distinct().ToList();

        foreach (var userId in allUserIds)
        {
            if (!userNames.ContainsKey(userId))
            {
                var user = await StudentsService.GetStudentAsync(userId);
                if (user != null)
                {
                    userNames[userId] = $"{user.FirstName} {user.LastName}";
                    userImages[userId] = string.IsNullOrWhiteSpace(user.ProfileImageUrl) ? "images/default_profile_image.webp" : user.ProfileImageUrl;
                }
            }
        }
    }

    private void SelectChat(Guid chatId)
    {
        NavigationManager.NavigateTo($"/chats/{chatId}");
    }

    private async Task ShowDeleteChatDialog(Guid chatId)
    {
        var parameters = new DialogParameters
        {
            ["Message"] = "Are you sure you want to delete this chat? This action cannot be undone."
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true, 
            MaxWidth = MaxWidth.Small,
            CloseButton = true, 
            DisableBackdropClick = true,
            ClassBackground = "mud-dialog-blur-backdrop" 
        };

        var dialog = DialogService.Show<DeleteChatDialog>("Delete Chat", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteChat(chatId);
        }
    }

    private async Task DeleteChat(Guid chatId)
    {
        try
        {
            var userId = IdentityService.GetCurrentUserId(); 

            await CommunicationService.DeleteChatAsync(chatId, userId); 

            userChats = userChats.Where(c => c.Id != chatId).ToList(); 
            Snackbar.Add("Chat deleted successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to delete chat: {ex.Message}", Severity.Error);
        }
    }

    private string GetChatName(Guid chatId)
    {
        var chat = userChats.FirstOrDefault(c => c.Id == chatId);

        if (chat != null && chat.ParticipantIds.Count == 2)
        {
            var otherParticipantId = chat.ParticipantIds.FirstOrDefault(id => id != IdentityService.GetCurrentUserId());
            return userNames.TryGetValue(otherParticipantId, out var otherParticipantName) ? otherParticipantName : "Unknown Chat";
        }

        return chat?.Name ?? "Group Chat";
    }

    private string GetChatImage(Guid chatId)
    {
        var chat = userChats.FirstOrDefault(c => c.Id == chatId);
        if (chat == null) return "/images/default_profile_image.webp";

        var userId = IdentityService.GetCurrentUserId();
        if (chat.ParticipantIds.Count == 2)
        {
            var otherParticipantId = chat.ParticipantIds.FirstOrDefault(id => id != userId);
            return GetSenderImage(otherParticipantId);
        }

        return "/images/default_profile_image.webp";
    }

    private string GetSenderImage(Guid senderId)
    {
        return userImages.TryGetValue(senderId, out var imageUrl) ? imageUrl : "/images/default_profile_image.webp";
    }

    private string GetSenderName(Guid senderId)
    {
        return userNames.TryGetValue(senderId, out var name) ? name : "Unknown";
    }

    private async void OnMessageReceived(MessageDto message)
    {
        await InvokeAsync(async () =>
        {
            // Update last message in chat
            lastMessages[message.ChatId] = message;

            // Move chat to the top of the list
            var chat = userChats.FirstOrDefault(c => c.Id == message.ChatId);
            if (chat != null)
            {
                userChats.Remove(chat);
                userChats.Insert(0, chat);
            }
            else
            {
                // Load chat if not found (e.g., was deleted locally)
                await LoadUserChats();
            }

            StateHasChanged();
        });
    }

    private async void OnTypingNotificationReceived(string userId, bool isTyping)
    {
        await InvokeAsync(() =>
        {
            var parsedUserId = Guid.Parse(userId);
            var chatId = userChats.FirstOrDefault(c => c.ParticipantIds.Contains(parsedUserId))?.Id ?? Guid.Empty;

            if (chatId != Guid.Empty)
            {
                if (isTyping)
                {
                    if (userNames.TryGetValue(parsedUserId, out var typingUserName))
                    {
                        typingStatus[chatId] = (typingUserName, new Timer(OnTypingTimeout, chatId, 1000, Timeout.Infinite));
                    }
                }
                else
                {
                    if (typingStatus.TryGetValue(chatId, out var typingEntry))
                    {
                        typingEntry.Timer.Dispose();
                        typingStatus.Remove(chatId);
                    }
                }

                StateHasChanged();
            }
        });
    }

    private void OnTypingTimeout(object state)
    {
        if (state is Guid chatId && typingStatus.TryGetValue(chatId, out var typingEntry))
        {
            typingEntry.Timer.Dispose();
            typingStatus.Remove(chatId);

            InvokeAsync(() => StateHasChanged());
        }
    }

    public async ValueTask DisposeAsync()
    {
        foreach (var (_, timer) in typingStatus.Values)
        {
            timer.Dispose();
        }

        ChatSignalRService.MessageReceived -= OnMessageReceived;
        ChatSignalRService.TypingNotificationReceived -= OnTypingNotificationReceived;
        await ChatSignalRService.DisposeAsync();
    }
}
