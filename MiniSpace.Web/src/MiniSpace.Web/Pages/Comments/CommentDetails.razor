@page "/comments/{CommentId:guid}/details"
@using MiniSpace.Web.Areas.Comments
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.DTO
@using Radzen
@inject ICommentsService CommentsService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IPostsService PostsService
@inject NavigationManager NavigationManager

@if (pageInitialized)
{
    <h3 class="rz-p-6">Comment Details</h3>
    <RadzenCard Class="rz-border-radius-3">
        <RadzenRow Gap="0.5rem">
            <RadzenColumn Size="5">
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-6" Style="color: darkred"
                            Text=@(comment.StudentName)/>
            </RadzenColumn>
            <RadzenColumn Size="7">
                @if (comment.IsDeleted)
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-6"
                                Text="(Content Deleted)"/>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-6"
                                Style="word-wrap: anywhere" Text=@(comment.TextContent)/>
                }
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="5">
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                    Created at: @(comment.CreatedAt.ToLocalTime().ToString(dateFormat))
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                    Last updated at: @(comment.LastUpdatedAt.ToLocalTime().ToString(dateFormat))
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-4" Style="color: dodgerblue">
                    Last reply at: @(comment.LastReplyAt.ToLocalTime().ToString(dateFormat))
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                    Likes count: @(comment.Likes.Count)
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                    Replies count: @(comment.RepliesCount)
                </RadzenText>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="@showError" ShowIcon="false"
                     Variant="Variant.Flat" Shade="Shade.Lighter" class="rz-my-3">
            @errorMessage
        </RadzenAlert>
        
        @if (comment.CommentContext == "event")
        {
            <RadzenButton Size="ButtonSize.Medium" Text="Go to context event page"
                          ButtonStyle="ButtonStyle.Secondary" class="rz-border-radius-1"
                          Click="@(() => NavigationManager.NavigateTo($"/events/{comment.ContextId}"))" />
        }
        else if (comment.CommentContext == "post")
        {
            <RadzenButton Size="ButtonSize.Medium" Text="Go to context post page"
                          ButtonStyle="ButtonStyle.Secondary" class="rz-border-radius-1"
                          Click="@(() => GoToContextPost(comment))" />
        }
    </RadzenCard>   
}

@code {
    [Parameter]
    public Guid CommentId { get; set; }
    
    private const string dateFormat = "dd/MM/yyyy HH:mm";
    
    private CommentDto comment;
    private bool pageInitialized;
    
    private string errorMessage = string.Empty;
    public bool showError;
    
    protected override async Task OnInitializedAsync()
    {
        comment = await CommentsService.GetCommentAsync(CommentId);
        pageInitialized = true;
    }
    
    private async void GoToContextPost(CommentDto commentDto)
    {
        var post = await PostsService.GetPostAsync(commentDto.ContextId);
        if (post == null)
        {
            errorMessage = "Post above reported comment not found! Probably has been deleted!";
            showError = true;
            StateHasChanged();
            return;
        }
        var ev = await EventsService.GetEventAsync(post.EventId);
        if (ev == null)
        {
            errorMessage = "Event above reported comment not found! Probably has been deleted!";
            showError = true;
            StateHasChanged();
            return;
        }
        var authorName = post.OrganizerId == ev.Organizer.Id ? ev.Organizer.Name : "Author unknown";
        NavigationManager.NavigateTo($"/events/{ev.Id}/posts/{post.Id}/author/{authorName}");
    }
}
