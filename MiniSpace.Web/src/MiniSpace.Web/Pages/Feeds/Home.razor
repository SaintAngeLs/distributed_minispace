@page "/home"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Data.Posts
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService
@inject IPostsService PostsService
@using MudBlazor

<AuthWrapper>
    <MudContainer>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <UserInformation UserId="studentId" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.h4" Align="Align.Center">Discover What's New</MudText>
                @if (pageInitialized)
                {
                    @if (posts.Any())
                    {
                        <MudList>
                            @foreach (var post in posts)
                            {
                                <MudListItem>
                                    <PostCard Post="post" />
                                </MudListItem>
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Align="Align.Center">No activity found</MudText>
                        <MudButton Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/events/search"))">Please join an event first</MudButton>
                    }
                }
            </MudItem>
            <MudItem xs="12" sm="4">
                <UserRelatedContent UserId="studentId" />
            </MudItem>
        </MudGrid>
    </MudContainer>
</AuthWrapper>

@code {
    private IEnumerable<PostDto> posts;
    private Guid studentId;
    private bool pageInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (IdentityService != null && IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
            var result = await PostsService.GetUserFeedAsync(studentId, 1, 8, "PublishDate", "desc");
            
            if (result.IsSuccessStatusCode)
            {
                posts = result.Content.Items;
            }
            else
            {
                posts = new List<PostDto>(); // Handle error gracefully
                // Optionally, log the error or display a message
                Console.WriteLine($"Error: {result.ErrorMessage.Reason}");
            }
            pageInitialized = true;
        }
        else
        {
            NavigationManager.NavigateTo("");
        }
    }
}
