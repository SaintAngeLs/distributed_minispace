@page "/user-information/{UserId:guid}"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Students
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@using MudBlazor

<MudPaper Class="profile-paper">
    @if (student != null)
    {
        <MudGrid>
            <MudItem xs="12">
                <MudCard Class="profile-card">
                    <MudCardContent>
                        <div class="profile-header">
                            <MudAvatar Image="@GetProfileImage()" Style="height:150px; width:150px; font-size:2rem;" Class="profile-avatar" />
                            <div class="profile-info">
                                <MudText Typo="Typo.h4" Class="profile-name">@($"{student.FirstName} {student.LastName}")</MudText>
                                <MudText Typo="Typo.subtitle1" Class="profile-description">@student.Description</MudText>
                                <MudButton Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Primary" OnClick="@NavigateToProfileSettings">Edit Profile</MudButton>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            @if (!string.IsNullOrEmpty(student.ContactEmail))
            {
                <MudItem xs="12">
                    <MudCard Class="info-card">
                        <MudCardHeader>
                            <MudIcon Icon="@Icons.Material.Filled.Email" Class="icon-margin" />
                            <MudText Typo="Typo.h5">Contact Information</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">Contact Email: <a href="mailto:@student.ContactEmail">@student.ContactEmail</a></MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            @if (student.Education != null && student.Education.Any())
            {
                <MudItem xs="12">
                    <MudCard Class="info-card">
                        <MudCardHeader>
                            <MudIcon Icon="@Icons.Material.Filled.School" Class="icon-margin" />
                            <MudText Typo="Typo.h5">Education</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @foreach (var education in student.Education)
                            {
                                <MudText Typo="Typo.body2">Institution: @education.InstitutionName, Degree: @education.Degree, Period: @education.StartDate?.ToString("yyyy-MM-dd") - @education.EndDate?.ToString("yyyy-MM-dd")</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            @if (student.Work != null && student.Work.Any())
            {
                <MudItem xs="12">
                    <MudCard Class="info-card">
                        <MudCardHeader>
                            <MudIcon Icon="@Icons.Material.Filled.Work" Class="icon-margin" />
                            <MudText Typo="Typo.h5">Work Experience</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @foreach (var work in student.Work)
                            {
                                <MudText Typo="Typo.body2">Position: @work.Position, Company: @work.Company, Period: @work.StartDate?.ToString("yyyy-MM-dd") - @work.EndDate?.ToString("yyyy-MM-dd")</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            @if ((student.Languages != null && student.Languages.Any()) || (student.Interests != null && student.Interests.Any()))
            {
                <MudItem xs="12">
                    <MudCard Class="info-card">
                        <MudCardHeader>
                            <MudIcon Icon="@Icons.Material.Filled.Interests" Class="icon-margin" />
                            <MudText Typo="Typo.h5">Skills and Interests</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (student.Languages != null && student.Languages.Any())
                            {
                                <MudText Typo="Typo.body2">Languages: @string.Join(", ", student.Languages.Select(l => l.ToString()))</MudText>
                            }
                            @if (student.Interests != null && student.Interests.Any())
                            {
                                <MudText Typo="Typo.body2">Interests: @string.Join(", ", student.Interests.Select(i => i.ToString()))</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            @if ((student.InterestedInEvents != null && student.InterestedInEvents.Any()) || (student.SignedUpEvents != null && student.SignedUpEvents.Any()))
            {
                <MudItem xs="12">
                    <MudCard Class="info-card">
                        <MudCardHeader>
                            <MudIcon Icon="@Icons.Material.Filled.Event" Class="icon-margin" />
                            <MudText Typo="Typo.h5">Events</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (student.InterestedInEvents != null && student.InterestedInEvents.Any())
                            {
                                <MudText Typo="Typo.body2">Interested in Events: @string.Join(", ", student.InterestedInEvents.Select(e => e.ToString()))</MudText>
                            }
                            @if (student.SignedUpEvents != null && student.SignedUpEvents.Any())
                            {
                                <MudText Typo="Typo.body2">Signed Up for Events: @string.Join(", ", student.SignedUpEvents.Select(e => e.ToString()))</MudText>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudPaper>

@code {
    [Parameter]
    public Guid UserId { get; set; }

    private StudentDto student;

    protected override async Task OnInitializedAsync()
    {
        student = await StudentsService.GetStudentAsync(UserId);
    }

    private string GetProfileImage()
    {
        var defaultImage = "path/to/default/image.png"; // Set path to your default image
        var validExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };

        if (string.IsNullOrEmpty(student?.ProfileImageUrl) || !validExtensions.Contains(System.IO.Path.GetExtension(student.ProfileImageUrl)?.ToLower()))
        {
            return defaultImage;
        }

        return student.ProfileImageUrl;
    }

    private void NavigateToProfileSettings()
    {
        NavigationManager.NavigateTo("/account");
    }
}

<style>
    .profile-paper {
        padding: 20px;
        margin: 20px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .profile-header {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;
        margin-bottom: 20px;
    }

    .profile-avatar {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        margin-bottom: 10px;
    }

    .profile-info {
        margin-top: 10px;
    }

    .profile-name {
        font-weight: bold;
        color: #333;
    }

    .profile-description {
        color: #555;
    }

    .profile-id {
        color: #777;
        margin-top: 10px;
    }

    .info-card {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .icon-margin {
        margin-right: 8px;
    }

    a {
        color: #1e88e5;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }
</style>
