@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Events
@inject IEventsService EventsService
@using MudBlazor

<MudPaper>
    <MudText Typo="Typo.h5">Event Recommendations</MudText>

    @if (loadingRecommendations)
    {
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
    }
    else if (recommendations != null && recommendations.Any())
    {
        <MudList>
            @foreach (var recommendation in recommendations)
            {
                <MudListItem>
                    <MudText Typo="Typo.body1">@recommendation.Name - @recommendation.StartDate.ToString("MMMM dd, yyyy")</MudText>
                </MudListItem>
            }
        </MudList>
    }
    else
    {
        <MudText Typo="Typo.body1">No recommendations available at the moment.</MudText>
    }
</MudPaper>

@code {
    [Parameter]
    public Guid UserId { get; set; }

    private List<EventDto> recommendations;
    private bool loadingRecommendations = true;

    protected override async Task OnInitializedAsync()
    {
        recommendations = await FetchRecommendationsAsync(UserId);
        loadingRecommendations = false;
    }

    private async Task<List<EventDto>> FetchRecommendationsAsync(Guid userId)
    {
        try
        {
            var result = await EventsService.GetUserEventsFeedAsync(userId, pageNumber: 1, pageSize: 10, sortBy: "PublishDate", direction: "asc");
            return result.Items.ToList();
        }
        catch (Exception ex)
        {
            // Handle error (you could also use a Snackbar or some other UI component to display errors)
            Console.Error.WriteLine($"Failed to fetch recommendations: {ex.Message}");
            return new List<EventDto>();
        }
    }
}
