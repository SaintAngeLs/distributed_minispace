@page "/friends"
@using MiniSpace.Web.HttpClients
@using Radzen.Blazor
@using MiniSpace.Web.Areas.Friends
@using MiniSpace.Web.DTO;
@inject IIdentityService IdentityService
@inject IFriendsService FriendsService
@inject NavigationManager NavigationManager
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService
@using MiniSpace.Web.Areas.MediaFiles
@inject IMediaFilesService MediaFilesService
@using MudBlazor
@using Radzen


<AuthWrapper>

<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", icon: Icons.Material.Filled.PersonSearch),
        new BreadcrumbItem("Friends", href: "/friends", disabled: true, icon: Icons.Material.Filled.LibraryAddCheck),
    };
}


    <div class="left-panel">
    <div class="search-bar">
        <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 100%;" />
        <RadzenButton Text="Search" Click="@SearchFriends" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="search" Style="width: 100%; margin-top: 10px;" />
    </div>
    <div class="friends-container">
        @if (friends != null && friends.Any())
        {
            foreach (var friend in friends)
            {
                <div class="friend-card">
                    <img src="@GetImage(friend.StudentDetails.Id)" alt="Friend Image" class="friend-img">
                    <div class="friend-info">
                        <h5>@friend.StudentDetails.FirstName @friend.StudentDetails.LastName</h5>
                        <p><RadzenIcon Icon="email" Style="color: #30445f;"/>@friend.StudentDetails.Email</p>
                        <div class="buttons">
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Secondary" Text="Details" Click="@(() => ViewDetails(friend.FriendId))"/>
                            <RadzenButton Text="Remove" Click="@(() => ConfirmRemoveFriend(friend.StudentDetails.Id))" ButtonStyle="Radzen.ButtonStyle.Danger" />
                        </div>
                    </div>
                </div>
            }
        }
        else if (!pageInitialized)
        {
            <div style="display: flex; justify-content: center; align-items: center;">
                <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light" 
                                           Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                    <Template>Loading...</Template>
                </RadzenProgressBarCircular>
            </div>
        }
        else
        {
            <p>No friends to show. Start connecting now!</p>
        }
    </div>
</div>

</AuthWrapper>

<style>
    .main-container { 
        display: flex; 
        padding: 50px;
    }

    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
        width: 100%;
    }

    .friends-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        overflow-y: auto;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    @* .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin-right: 20px;
        object-fit: cover;
        border: 3px solid #007BFF; 
    } *@

    .friend-info {
        flex: 1;
        font-family: 'Segoe UI', 'Arial', sans-serif;
        padding-left: 20px;
    }

     .left-panel, .right-panel {
        background-color: #f7f7f7;
        border-radius: 8px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    }


    h5, p {
        margin-bottom: 5px;
        @* color: #333; *@
    }

    .buttons {
        
        align-items: center;
    }
</style>


@code {
    private List<FriendDto> friends;
    private Guid studentId;
    private string searchTerm;
    private Dictionary<Guid, string> images = new ();
    private bool pageInitialized;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();
        if (IdentityService.IsAuthenticated)
        { 

            try 
            {
                studentId = IdentityService.GetCurrentUserId();
                var friendsResult = await FriendsService.GetAllFriendsAsync(studentId);
                if (friendsResult != null) 
                {
                    friends = friendsResult.ToList();
                    await LoadImages();
                } 
                else 
                {
                    friends = new List<FriendDto>();  
                }
            }
            catch (Exception ex) {
                NotificationService.Notify(Radzen.NotificationSeverity.Error, "Failed to Load Friends", $"An error occurred: {ex.Message}", 5000);
                friends = new List<FriendDto>();  
            }

            pageInitialized = true;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadImages() {
        foreach (var friend in friends) {
            @* var result = await MediaFilesService.GetFileAsync(friend.StudentDetails.ProfileImageUrl);
            if (result != null) {
                images[friend.StudentDetails.Id] = result.Base64Content;
            } *@
        }
    }

    private void ViewDetails(Guid friendId)
    {
        NavigationManager.NavigateTo($"/student-details/{friendId}");
    }

    private async Task RemoveFriend(Guid friendId)
    {
        await FriendsService.RemoveFriendAsync(friendId);
        friends.RemoveAll(f => f.StudentId == friendId);
    
        NotificationService.Notify(Radzen.NotificationSeverity.Warning, "Friend Removed", $"You have removed a friend.", 5000);
        StateHasChanged();
    }

    private string GetImage(Guid studentId)
    {
        if (images.TryGetValue(studentId, out var image))
        {
            return $"data:image/webp;base64,{image}";
        }

        return "images/default_profile_image.webp";
    }


    private async Task ConfirmRemoveFriend(Guid friendId)
    {
        var confirm = await DialogService.Confirm("Are you sure you want to remove this friend?", "Confirm Removal", new Radzen.ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm.HasValue && confirm.Value)
        {
            await RemoveFriend(friendId);
        }
    }

     private async Task LoadFriends()
    {
        try
        {
            var friendsResult = await FriendsService.GetAllFriendsAsync(studentId);
            if (friendsResult != null)
            {
                friends = friendsResult.ToList();
            }
            else
            {
                friends = new List<FriendDto>();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Failed to Load Friends", $"An error occurred: {ex.Message}", 5000);
            friends = new List<FriendDto>();
        }
    }

    private void SearchFriends()
    {
        searchTerm = searchTerm.Trim();
        if (!string.IsNullOrEmpty(searchTerm))
        {
            friends = friends.Where(f => f.StudentDetails.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || f.StudentDetails.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            LoadFriends().Wait(); 
        }
        StateHasChanged();
    }
}
