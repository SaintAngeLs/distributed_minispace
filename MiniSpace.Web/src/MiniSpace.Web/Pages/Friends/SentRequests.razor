@page "/friends/sent-requests"
@using MiniSpace.Web.HttpClients
@using MudBlazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Identity
@inject IIdentityService IdentityService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthWrapper>
<div class="center-container"> 
    
<MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", icon: Icons.Material.Filled.PersonSearch),
        new BreadcrumbItem("Friends", href: "/friends", icon: Icons.Material.Filled.LibraryAddCheck),
        new BreadcrumbItem("Requests", href: "/friends/requests", icon: Icons.Material.Filled.GroupAdd),
        new BreadcrumbItem("Sent Requests", href: "/friends/sent-requests", disabled: true, icon: Icons.Material.Filled.PersonAddAlt1),
    };
}

<div style="display: flex;">
    <div class="left-panel">
        <div class="search-bar">
            <MudTextField @bind-Value="searchTerm" Placeholder="Search sent requests..." Style="width: 75%;" />
            <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@SearchSentRequests" Style="margin-left: 10px; width: 23%;">
                <MudIcon Icon="@Icons.Material.Filled.Search" />
                <span class="button-text">Search</span>
            </MudButton>
        </div>
        @if (sentRequests == null)
        {
            <div style="display: flex; justify-content: center; align-items: center;">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            </div>
        }
        else if (filteredSentRequests.Any())
        {
            @foreach (var request in filteredSentRequests)
            {
                <div class="friend-card" @onclick="@(() => RedirectToDetails(request.InviteeId))">
                    <div class="friend-row">
                        <img src="@GetProfileImageUrl(request.InviteeImage)" alt="Invitee Image" class="friend-img" onerror="this.onerror=null;this.src='images/default_profile_image.webp';">
                        <div class="friend-info">
                            <h5>@request.InviteeName</h5>
                            <p>@request.InviteeEmail</p>
                            <p>@request.RequestedAt.ToLocalTime().ToString("yyyy-MM-dd")</p>
                            <p>@request.State</p>
                        </div>
                        <div class="buttons">
                            <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@(() => WithdrawRequest(request.InviteeId))" Class="action-button">
                                <MudIcon Icon="@Icons.Material.Filled.Cancel" />
                                <span class="button-text">Withdraw</span>
                            </MudButton>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No sent requests.</p>
        }
    </div>
</div>
</div>
</AuthWrapper>

<style>
    .notification-block {
        position: fixed; 
        top: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 300px;
    }

    .main-container { 
        overflow: visible; 
        display: flex;   
        align-items: 
        flex-start; 
    }

    .left-panel {  
        width: 100%;   
        overflow-y: auto; 
    }

    .right-panel {
        width: 70%; 
        padding: 25px;
        position: sticky;
        top: 100px; 
        background-color: white; 
    }

    .left-panel, .right-panel {
        background-color: #f7f7f7; 
        border-radius: 8px;
       
        box-shadow: 0 4px 10px rgba(0,0,0,0.05); 
    }
    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
        }
    
    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-row {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #007BFF;
        margin-right: 20px;
    }

    .friend-info {
        flex: 2;
    }

    .buttons {
        display: flex;
        flex-direction: row;
        gap: 8px;
        margin-left: auto;
    }

    .action-button {
        display: flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .button-text {
        display: inline-block;
        margin-left: 8px;
    }

   
    .search-bar input:focus {
        outline: none;
        border: 2px solid #0056b3;
        box-shadow: 0 0 5px rgba(0, 86, 179, 0.5);
    }

</style>

@code {
    private string searchTerm;
    private IEnumerable<FriendRequestDto> sentRequests;
    private IEnumerable<FriendRequestDto> filteredSentRequests;
    private bool pageInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();

        if (IdentityService.IsAuthenticated)
        {
            sentRequests = await FriendsService.GetSentFriendRequestsAsync();
            filteredSentRequests = sentRequests;
            pageInitialized = true;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private string GetProfileImageUrl(string profileImageUrl)
    {
        return string.IsNullOrEmpty(profileImageUrl) ? "images/default_profile_image.webp" : profileImageUrl;
    }

    private void SearchSentRequests()
    {
        filteredSentRequests = string.IsNullOrWhiteSpace(searchTerm)
            ? sentRequests
            : sentRequests.Where(x => x.InviteeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    }

    private void RedirectToDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/student-details/{id}");
    }

    private async Task WithdrawRequest(Guid inviteeId)
    {
        var inviterId = IdentityService.GetCurrentUserId();
        if (inviterId != Guid.Empty)
        {
            await FriendsService.WithdrawFriendRequestAsync(inviterId, inviteeId);
            sentRequests = await FriendsService.GetSentFriendRequestsAsync();
            SearchSentRequests(); // Reapply search filter to update the UI
        }
        else
        {
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Error", "Invalid user ID.");
        }
    }
}
