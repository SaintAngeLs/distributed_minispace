@page "/friends/sent-requests"
@using MiniSpace.Web.HttpClients
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Services.Friends.Application.Dto
@inject IIdentityService IdentityService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime
@using MiniSpace.Web.Areas.MediaFiles
@inject IMediaFilesService MediaFilesService
@using MudBlazor
@using Radzen

<AuthWrapper>
<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", icon: Icons.Material.Filled.PersonSearch),
        new BreadcrumbItem("Friends", href: "/friends", icon: Icons.Material.Filled.LibraryAddCheck),
        new BreadcrumbItem("Requests", href: "/friends/requests", icon: Icons.Material.Filled.GroupAdd),
        new BreadcrumbItem("Sent Requests", href: "/friends/sent-requests", disabled: true, icon: Icons.Material.Filled.PersonAddAlt1),
    };
}

<h3>Sent Friend Requests</h3>

<div style="display: flex;">
    <div class="left-panel">
        <div class="search-bar">
            <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search sent requests..." Style="width: 75%;" />
            <RadzenButton Text="Search" Click="@SearchSentRequests" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="search" Style="margin-left: 10px; width: 23%;" />
        </div>
        <div class="card-container">
            @if (sentRequests == null)
            {
                <div style="display: flex; justify-content: center; align-items: center;">
                    <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light" 
                                               Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                        <Template>Loading...</Template>
                    </RadzenProgressBarCircular>
                </div>
            }
            else if (filteredSentRequests.Any())
            {
                @foreach (var request in filteredSentRequests)
                {
                    <div class="friend-card" @onclick="@(() => RedirectToDetails(request.InviteeId))">
                        @if (images.ContainsKey(request.InviteeId))
                        {
                            <img src="@GetImage(request.InviteeId)" alt="Invitee Image" class="friend-img">
                        }
                        <div class="friend-info">
                            <h5><RadzenIcon Icon="user" Style="color: #30445f;"/> @request.InviteeName</h5>
                            <p><RadzenIcon Icon="email" Style="color: #30445f;"/> @request.InviteeEmail</p>
                            <p><RadzenIcon Icon="event" Style="color: #30445f;"/> @request.RequestedAt.ToLocalTime().ToString("yyyy-MM-dd")</p>
                            <p><RadzenIcon Icon="info" Style="color: #30445f;"/> @request.State</p>

                        </div>
                         <RadzenButton Text="Withdraw" Click="@(() => WithdrawRequest(request.InviteeId))" ButtonStyle="Radzen.ButtonStyle.Danger" Icon="cancel" />
                    </div>
                   
                }
            }
            else
            {
                <p>No sent requests.</p>
            }
        </div>
    </div>
</div>
</AuthWrapper>

<style>
    .notification-block {
        position: fixed; 
        top: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 300px;
    }

    .main-container { 
        overflow: visible; 
        display: flex;   
        align-items: 
        flex-start; 
    }

    .left-panel {  
        width: 100%;   
        overflow-y: auto; 
    }

    .right-panel {
        width: 70%; 
        padding: 25px;
        position: sticky;
        top: 100px; 
        background-color: white; 
    }

    .left-panel, .right-panel {
        background-color: #f7f7f7; /* Soft background color for subtle contrast */
        border-radius: 8px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05); /* Light shadow for depth */
    }

    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
    }
    
    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin-right: 20px;
        object-fit: cover;
        border: 3px solid #007BFF; 
    }

    .friend-info {
        flex: 1;
        display: flex;
        flex-direction: column; /* Aligns content vertically */
    }

    .friend-info h5, .friend-info p {
        display: flex;
        align-items: center; /* Aligns items horizontally in a line */
        margin: 0; /* Removes default margin */
        margin-left: 20px !important;
        padding: 2px 0; /* Adds slight padding */
    }

    .friend-info h5 RadzenIcon, .friend-info p RadzenIcon {
        margin-right: 15px; /* Right margin for spacing between icon and text */
    }


    .search-bar input:focus {
        outline: none;
        border: 2px solid #0056b3;
        box-shadow: 0 0 5px rgba(0, 86, 179, 0.5);
    }

    .profile-image {
        width: 400px; 
        height: 400px;
        border-radius: 5%;
        object-fit: cover;
        border: 4px solid #ffffff; 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
        transition: transform 0.3s ease-in-out; 
    }

    .profile-image:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); 
    }

    .info-block {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-top: 15px;
    }

    .details-list {
        list-style: none;
        padding: 0;
        margin-top: 10px;
    }

    .details-list li {
        margin-bottom: 8px;
        font-size: 16px; /* Larger font for readability */
    }
</style>

@code {
    private string searchTerm;
    private List<StudentDto> students = new List<StudentDto>();
    private IEnumerable<FriendRequestDto> sentRequests;
    private IEnumerable<FriendRequestDto> filteredSentRequests;
    private Dictionary<Guid, string> images = new();

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();

        if (IdentityService.IsAuthenticated)
        { 
            sentRequests = await FriendsService.GetSentFriendRequestsAsync();
            
            var inviteeIds = sentRequests.Select(r => r.InviteeId).Distinct();
            var studentTasks = inviteeIds.Select(id => FriendsService.GetStudentAsync(id));

            students = (await Task.WhenAll(studentTasks)).ToList();

            var imageTasks = students.Select(student => FetchImageAsync(student.Id, student.ProfileImage));
            await Task.WhenAll(imageTasks);

            foreach (var request in sentRequests)
            {
                var student = students.FirstOrDefault(s => s.Id == request.InviteeId);
                if (student != null)
                {
                    request.InviteeName = $"{student.FirstName} {student.LastName}";
                    request.InviteeEmail = student.Email;
                    if (images.ContainsKey(student.Id))
                    {
                        request.InviteeImage = images[student.Id];
                    }
                }
            }

            filteredSentRequests = sentRequests;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task FetchImageAsync(Guid inviteeId, Guid profileImage)
    {
        if (profileImage == Guid.Empty)
        {
            images[inviteeId] = "images/default_profile_image.webp";
            return;
        }

        try
        {
            var result = await MediaFilesService.GetFileAsync(profileImage);
            if (result != null && !string.IsNullOrWhiteSpace(result.Base64Content))
            {
                images[inviteeId] = result.Base64Content;
            }
            else
            {
                images[inviteeId] = "images/default_profile_image.webp";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to fetch image for {inviteeId}: {ex.Message}");
            images[inviteeId] = "images/default_profile_image.webp";
        }
    }




    private string GetImage(Guid studentId)
    {
        if (images.TryGetValue(studentId, out var image))
        {
            if (image.StartsWith("data:image"))
            {
                return image;  
            }
            else
            {
                return image;  
            }
        }

        return "images/default_profile_image.webp";
    }


    private void SearchSentRequests()
    {
        filteredSentRequests = string.IsNullOrWhiteSpace(searchTerm) 
            ? sentRequests 
            : sentRequests.Where(x => x.InviteeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    }

    private void RedirectToDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/student-details/{id}");
    }

    private async Task WithdrawRequest(Guid inviteeId)
    {
        var inviterId = IdentityService.GetCurrentUserId();
        if (inviterId != Guid.Empty)
        {
            await FriendsService.WithdrawFriendRequestAsync(inviterId, inviteeId);
            sentRequests = await FriendsService.GetSentFriendRequestsAsync();
            SearchSentRequests(); // Reapply search filter to update the UI
        }
        else
        {
            // Optionally show an error notification
            NotificationService.Notify(Radzen.NotificationSeverity.Error, "Error", "Invalid user ID.");
        }
    }
}
