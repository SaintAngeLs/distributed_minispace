@page "/friends/search"
@using MiniSpace.Services.Friends.Application.Dto
@using MiniSpace.Web.HttpClients
@using MudBlazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Identity
@inject IIdentityService IdentityService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthWrapper>
<MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", disabled: true, icon: Icons.Material.Filled.PersonSearch)
    };
}

<div style="display: flex;">
    <div class="left-panel">
        <div class="search-bar">
            <MudTextField @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 75%;" />
            <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@SearchFriends" Style="margin-left: 10px; width: 23%;">
                <MudIcon Icon="@Icons.Material.Filled.Search" />
                <span class="button-text">Search</span>
            </MudButton>
        </div>
        @if (!pageInitialized)
        {
            <div style="display: flex; justify-content: center; align-items: center;">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            </div>
        }
        <div class="card-container">
            @foreach (var student in students)
            {
                <div class="friend-card" @onclick="@(() => ViewDetails(student.Id))">
                    <div class="friend-row">
                        <img src="@GetProfileImageUrl(student.ProfileImageUrl)" alt="Student Image" class="friend-img" onerror="this.onerror=null;this.src='images/default_profile_image.webp';">
                        <div class="friend-info">
                            <h5>@student.FirstName @student.LastName</h5>
                            <p>@student.Email</p>
                        </div>
                        <div class="buttons">
                            @if (student.Id != IdentityService.GetCurrentUserId() && !sentRequests.Any(r => r.InviteeId == student.Id) && !allFriends.Any(f => f.FriendId == student.Id))
                            {
                                <MudButton Variant="MudBlazor.Variant.Outlined" OnClick="@(e => ConnectWithStudent(student.Id, e))" Class="action-button">
                                    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" />
                                    <span class="button-text">Connect</span>
                                </MudButton>
                            }
                            else if (allFriends.Any(f => f.FriendId == student.Id))
                            {
                                <MudButton Disabled="true" Class="action-button" Style="background-color: white; color: black; border: 1px solid #ccc; border-radius: 5px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Check" />
                                    <span class="button-text">Connected</span>
                                </MudButton>
                            }
                            else if (sentRequests.Any(r => r.InviteeId == student.Id))
                            {
                                <MudButton Disabled="true" Class="action-button" Style="background-color: #ccc; color: black; border-radius: 5px;">
                                    <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty" />
                                    <span class="button-text">Pending</span>
                                </MudButton>
                            }
                            else if (incomingRequests.Any(r => r.InviteeId == IdentityService.GetCurrentUserId() && r.State == DTO.States.FriendState.Requested))
                            {
                                <MudButton Disabled="true" Class="action-button" Style="background-color: blue; color: white; border-radius: 5px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Notifications" />
                                    <span class="button-text">Incoming Request</span>
                                </MudButton>
                            }
                            else if (student.Id == IdentityService.GetCurrentUserId())
                            {
                                <MudButton Disabled="true" Class="action-button" Style="background-color: grey; color: white; border-radius: 5px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    <span class="button-text">It's You</span>
                                </MudButton>
                            }
                        </div>
                    </div>
                </div>
            }
            <div id="end-of-list"></div>
        </div>
    </div>
</div>
</AuthWrapper>

<style>
    .notification-block {
        position: fixed; 
        top: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 300px;
    }

    .main-container { 
        overflow: visible; 
        display: flex;   
        align-items: 
        flex-start; 
    }

    .left-panel {  
        width: 100%;   
        overflow-y: auto; 
    }

    .right-panel {
        width: 70%; 
        padding: 25px;
        position: sticky;
        top: 100px; 
        background-color: white; 
    }

    .left-panel, .right-panel {
        background-color: #f7f7f7; 
        border-radius: 8px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05); 
    }
    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
        }
    
    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-row {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #007BFF;
        margin-right: 20px;
    }

    .friend-info {
        flex: 2;
    }

    .buttons {
        display: flex;
        flex-direction: row;
        gap: 8px;
        margin-left: auto;
    }

    .action-button {
        display: flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .button-text {
        display: inline-block;
        margin-left: 8px;
    }

  

    .search-bar input:focus {
        outline: none;
        border: 2px solid #0056b3;
        box-shadow: 0 0 5px rgba(0, 86, 179, 0.5);
    }

</style>

@code {
    private string searchTerm;
    private List<StudentDto> students = new List<StudentDto>();
    private IEnumerable<FriendRequestDto> sentRequests;
    private StudentDto student;
    RadzenNotification notificationComponent;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalStudents;
    private IEnumerable<FriendDto> allFriends;
    private IEnumerable<FriendRequestDto> incomingRequests;
    private bool pageInitialized;
    private DotNetObjectReference<FriendsSearch> _dotNetRef;

    protected override async Task OnInitializedAsync() 
    {
        await IdentityService.InitializeAuthenticationState(); 

        if (IdentityService.IsAuthenticated)
        {
            sentRequests = await FriendsService.GetSentFriendRequestsAsync();
            incomingRequests = await FriendsService.GetIncomingFriendRequestsAsync();
            allFriends = await FriendsService.GetAllFriendsAsync(IdentityService.GetCurrentUserId());

            await LoadStudents();
            pageInitialized = true;
            StateHasChanged();

            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("infiniteScroll.initialize", _dotNetRef);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private string GetProfileImageUrl(string profileImageUrl)
    {
        return string.IsNullOrEmpty(profileImageUrl) ? "images/default_profile_image.webp" : profileImageUrl;
    }

    private async Task LoadStudents(string searchArgument = null) 
    {
        var response = await FriendsService.GetAllStudentsAsync(currentPage, pageSize, searchArgument);
        if (response != null) {
            students.AddRange(response.Results);
            totalStudents = response.Total; 
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreData()
    {
        currentPage++;
        await LoadStudents(searchTerm);
    }

    private async Task SearchFriends() {
        currentPage = 1;
        students.Clear();
        await LoadStudents(searchTerm);
    }

    private async Task ConnectWithStudent(Guid studentId, MouseEventArgs e) 
    {
        var currentUserId = IdentityService.GetCurrentUserId();
        await FriendsService.InviteStudent(currentUserId, studentId);

        var student = students.FirstOrDefault(s => s.Id == studentId);
        if (student != null)
        {
            student.InvitationSent = true;
            student.IsInvitationPending = true;
        }
        sentRequests = await FriendsService.GetSentFriendRequestsAsync();
        NotificationService.Notify(Radzen.NotificationSeverity.Success, "Invitation Sent", "The invitation has been successfully sent.", 10000);
        await JSRuntime.InvokeVoidAsync("playNotificationSound");
        StateHasChanged(); 
    }

    private void ViewDetails(Guid studentId)
    {
        NavigationManager.NavigateTo($"/student-details/{studentId}");
    }

}
