@page "/student-details/{Id:guid}"
@using MiniSpace.Web.Areas.Friends
@inject NavigationManager NavigationManager
@inject IFriendsService FriendsService
@using MiniSpace.Web.Areas.MediaFiles
@inject IMediaFilesService MediaFilesService
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Reports.Dialogs
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@using MiniSpace.Web.DTO
@using Radzen
@using MudBlazor

<AuthWrapper>
<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", icon: Icons.Material.Filled.PersonSearch),
        new BreadcrumbItem("Friends", href: "/friends", icon: Icons.Material.Filled.LibraryAddCheck),
        new BreadcrumbItem("Requests", href: "/friends/requests", icon: Icons.Material.Filled.GroupAdd),
        new BreadcrumbItem("Sent Requests", href: "/friends/sent-requests", icon: Icons.Material.Filled.PersonAddAlt1),
        new BreadcrumbItem("Student details", href: "/student-details/{Id:guid}",  disabled: true, icon: Icons.Material.Filled.Person),
    };
}

<h3>Student Profile</h3>

@if (studentNotFound)
{
    <h3 class="rz-p-12">Student profile not found!</h3>
    <h3>Probably has been deleted!</h3>
}

@if (student == null)
{
    <RadzenProgress Label="Loading profile..." Mode="ProgressMode.Indeterminate" />
}
else
{
    <div class="card">
        <div class="card-header">
            <img src="@profileImage" alt="Profile Image" class="profile-image" /> <!-- Update the src attribute -->
            <h3>@student.FirstName @student.LastName</h3>
            <p>@student.Email</p>
        </div>
        <div class="card-body">
            <p><strong>Description:</strong> @student.Description</p>
            <p><strong>Number of Friends:</strong> @student.NumberOfFriends</p>
            <p><strong>Date of Birth:</strong> @student.DateOfBirth.ToLocalTime().ToString("yyyy-MM-dd")</p>
            <p><strong>State:</strong> @student.State</p>
            <p><strong>Joined:</strong> @student.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd")</p>
        </div>
        @if (IdentityService.IsAuthenticated)
        {
            <RadzenButton Size="ButtonSize.Medium" Text="Report profile" ButtonStyle="ButtonStyle.Primary"
                          Click="@(() => ReportStudentProfile(student))" />
        }
    </div>
}
</AuthWrapper>
<style>
    .card {
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 20px;
    }

    .card-header {
        background-color: #f5f5f5;
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid #eee;
    }

    .card-body {
        padding: 20px;
    }

    .profile-image {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 10px;
    }
</style>
@code {
    [Parameter] public Guid Id { get; set; }
    private StudentDto student;
    private string profileImage; 
    private bool studentNotFound;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();
        if (IdentityService.IsAuthenticated)
        { 
            student = await FriendsService.GetStudentAsync(Id);
            if (student == null)
            {
                studentNotFound = true;
                return;
            }
            @* var imageResult = await MediaFilesService.GetFileAsync(student.ProfileImageUrl); *@
            profileImage = student.ProfileImageUrl != null ? $"data:image/webp;base64,{student.ProfileImageUrl}" : "images/default_profile_image.webp";
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    
    private async Task OpenReportStudentProfileDialog(CreateReportModel createReportModel)
    {
        await DialogService.OpenAsync<CreateReportDialog>("Report profile of the student:",
            new Dictionary<string, object>() { { "CreateReportModel", createReportModel } },
            new DialogOptions()
            {
                Width = "700px", Height = "350px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task ReportStudentProfile(StudentDto studentDto)
    {
        var createReportModel = new CreateReportModel
        {
            IssuerId = IdentityService.GetCurrentUserId(),
            TargetId = studentDto.Id,
            TargetOwnerId = studentDto.Id,
            ContextType = "StudentProfile"
        };

        await OpenReportStudentProfileDialog(createReportModel);
    }
}

