@page "/notification/{NotificationId:guid}"
@using MiniSpace.Web.Areas.Notifications
@inject NavigationManager NavigationManager
@inject INotificationsService NotificationsService
@using MiniSpace.Web.DTO.Notifications
@inject IIdentityService IdentityService
@using System.Globalization
@using MudBlazor

<AuthWrapper>
<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/home", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Notifications", href: "/notifications/all", icon: Icons.Material.Filled.Notifications),
        new BreadcrumbItem("New Notifications", href: "/notifications/new", icon: Icons.Material.Filled.NotificationsActive),
        new BreadcrumbItem("Notifications History", href: "/notifications/history", icon: Icons.Material.Filled.NotificationsPaused),
        new BreadcrumbItem("Notification", href: "/notification/{NotificationId:guid}", disabled: true, icon: @Icons.Material.Filled.NotificationAdd)
    };
}



<MudContainer Class="pt-4">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="10" sm="10" md="10" lg="10">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h4" GutterBottom="true" Class="text-center">
                        <div class="notifications-page-title">
                            <h3>Notification Details</h3>
                        </div>
                    </MudText>
                    @if (notification != null)
                    {
                        <MudList>
                            <MudListItem>
                                <MudText Typo="Typo.body1"><strong>Message:</strong> @RenderMessage(notification)</MudText>
                            </MudListItem>
                            <MudListItem>
                                <MudText Typo="Typo.body1"><strong>Details:</strong> @RenderHtml(notification.Details)</MudText>
                            </MudListItem>
                            <MudListItem>
                                <MudText Typo="Typo.body1"><strong>Date:</strong> @notification.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</MudText>
                            </MudListItem>
                            <MudListItem>
                                <MudText Typo="Typo.body1"><strong>Status:</strong> @notification.Status</MudText>
                            </MudListItem>
                        </MudList>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Italic="true" Class="text-center">Loading notification details...</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>
</AuthWrapper>

<style>
    /* Add this CSS to your site.css or appropriate stylesheet file */

.notifications-page-title h3 {
    color: #333;
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 20px;
    text-align: center;
}

.custom-breadcrumbs .mud-breadcrumbs-root {
    padding-bottom: 10px;
}

.mud-card-content {
    background-color: #fff; /* Ensures that the card has a white background */
    border-radius: 8px; /* Adds rounded corners for a softer look */
    box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Subtle shadow for depth */
    padding: 20px;
    margin: 20px 0;
}

.mud-text {
    color: #424242; /* Slightly dark gray color for text for better readability */
}

.mud-list {
    list-style: none; /* Removes default list styling */
    padding: 0;
    margin: 0;
}

.mud-list-item {
    margin-bottom: 10px; /* Space between list items */
    display: block;
}


/* Enhance link appearance */
a .view-details-notification {
    color: #1a73e8; /* Google's blue link color for a familiar look */
    text-decoration: none; /* No underline */
}

a:hover, a:focus {
    text-decoration: underline; /* Adds underline on hover/focus for better user interaction */
}

</style>

@code {
    [Parameter] public Guid NotificationId { get; set; }
    private NotificationDto notification;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();
        if (IdentityService.IsAuthenticated)
        { 
            var userId = IdentityService.GetCurrentUserId();
            notification = await NotificationsService.GetNotificationByIdAsync(userId, NotificationId);
            if (notification.Status == "Unread") 
            {
                await UpdateNotificationStatus(userId, NotificationId, "Read");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task UpdateNotificationStatus(Guid userId, Guid notificationId, string newStatus)
    {
        await NotificationsService.UpdateNotificationStatusAsync(userId, notificationId, newStatus);
        notification.Status = newStatus;
        StateHasChanged();
    }

    private MarkupString RenderMessage(NotificationDto notification)
    {
        string link = NotificationLinkFactory.GetNotificationLink(notification);
        if (!string.IsNullOrEmpty(link))
        {
            return new MarkupString($"{notification.Message} <a href='{link}' class='view-details-notification'>View Details</a>");
        }
        else
        {
            return new MarkupString(notification.Message);
        }
    }

    private MarkupString RenderHtml(string htmlContent)
    {
        return new MarkupString(htmlContent);
    }

}
