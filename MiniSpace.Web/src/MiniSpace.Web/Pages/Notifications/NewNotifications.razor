@page "/notifications/new"
@using MiniSpace.Web.Areas.Notifications
@inject INotificationsService NotificationsService
@inject NavigationManager NavigationManager
@using MiniSpace.Web.DTO.Notifications
@inject IIdentityService IdentityService
@using MudBlazor
@using System.Collections.Generic
@using System.Threading.Tasks

<AuthWrapper>
    <div class="breadcrumbs-container">
        <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
    </div>

    @code {
        private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Notifications", href: "/notifications/all", icon: Icons.Material.Filled.Notifications),
            new BreadcrumbItem("New Notifications", href: "/notifications/new", disabled: true, icon: Icons.Material.Filled.NotificationsActive)
        };
    }

    <div class="notifications-page-title">
        <h3>Recent Notifications</h3>
    </div>

    @if (notifications == null)
    {
        <div style="display: flex; justify-content: center; align-items: center;">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (notifications.Any())
    {
        <MudContainer MaxWidth="MaxWidth.Large" Class="notification-list">
            @foreach (var notification in notifications)
            {
                <MudPaper Elevation="4" Class="notification-card">
                    <MudGrid>
                        <MudItem xs="9">
                            <MudNavLink Href="@($"/notification/{notification.NotificationId}")">
                                <MudText Typo="Typo.h6">@notification.Message</MudText>
                                <MudText Typo="Typo.caption">@notification.CreatedAt.ToString("MMMM dd, yyyy")</MudText>
                            </MudNavLink>
                        </MudItem>

                        <MudItem xs="3" Class="action-buttons">
                            @if (notification.Status == "Unread")
                            {
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(async () => await UpdateNotificationStatus(notification.UserId, notification.NotificationId, "Read"))">
                                    <MudIcon Icon="@Icons.Material.Filled.MarkEmailUnread" />
                                    Mark as Read
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(async () => await UpdateNotificationStatus(notification.UserId, notification.NotificationId, "Unread"))">
                                    <MudIcon Icon="@Icons.Material.Filled.MarkEmailRead" />
                                    Mark as Unread
                                </MudButton>
                            }

                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(async () => await DeleteNotification(notification.UserId, notification.NotificationId))">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                                Delete
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudContainer>
    }
    else
    {
        <p>No notifications found.</p>
    }
</AuthWrapper>

<style>
    .breadcrumbs-container {
        margin-bottom: 20px;
    }

    .notifications-page-title {
        text-align: center;
        margin-bottom: 20px;
    }

    .notification-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .notification-card {
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 8px;
    }
</style>

@code {
    private List<NotificationDto> notifications = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalNotifications;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();
        if (IdentityService.IsAuthenticated)
        {
            await LoadNotifications();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadNotifications()
    {
        var userId = IdentityService.GetCurrentUserId();
        var response = await NotificationsService.GetNotificationsByUserAsync(userId, page: currentPage, pageSize: pageSize, sortOrder: "desc", status: "Unread");

        if (response != null)
        {
            notifications = response.Results;
            totalNotifications = response.Total;
            StateHasChanged();
        }
    }

    private async Task UpdateNotificationStatus(Guid userId, Guid notificationId, string newStatus)
    {
        await NotificationsService.UpdateNotificationStatusAsync(userId, notificationId, newStatus);
        var notification = notifications.Find(n => n.NotificationId == notificationId);
        if (notification != null)
        {
            notification.Status = newStatus;
            StateHasChanged();
        }
    }

    private async Task DeleteNotification(Guid userId, Guid notificationId)
    {
        await NotificationsService.DeleteNotificationAsync(userId, notificationId);
        notifications.RemoveAll(n => n.NotificationId == notificationId);
        StateHasChanged();
    }
}
