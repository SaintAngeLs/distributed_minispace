@page "/notifications/all"
@using MiniSpace.Web.Areas.Notifications
@inject INotificationsService NotificationsService
@inject NavigationManager NavigationManager
@using MiniSpace.Web.DTO.Notifications
@using Radzen
@using System.Linq
@inject IIdentityService IdentityService
@using MudBlazor

<AuthWrapper>
<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Notifications", href: "/notifications/all", icon: Icons.Material.Filled.Notifications)
    };
}

<div class="notifications-page-title">
    <h3>All Notifications</h3>
</div>

@if (notifications == null)
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light" 
                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </div>
}
else if (notifications.Any())
{
    <RadzenDataGrid Data="@notifications" TItem="NotificationDto" ColumnWidth="auto" AllowColumnResize="true"
    AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="@pageSize"
    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Count="@totalNotifications"
    LoadData="@LoadNotifications">
    <Columns>
        <RadzenDataGridColumn TItem="NotificationDto" Property="Message" Title="Message">
            <Template Context="notification">
                <RadzenLink Path="@($"/notification/{notification.NotificationId}")" Text="@notification.Message" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="NotificationDto" Property="CreatedAt" Title="Date" FormatString="{0:dd MMM yyyy}" />
        <RadzenDataGridColumn TItem="NotificationDto" Property="Status" Title="Read Status">
            <Template Context="notification">
                <RadzenToggleButton ButtonStyle="ButtonStyle.Light" ToggleButtonStyle="ButtonStyle.Dark"
                    Value=@(notification.Status == "Unread")
                    Text="@(notification.Status == "Unread" ? "Unread" : "Read")"
                    Change="@(args => UpdateNotificationStatus(notification.UserId, notification.NotificationId, args))"

                    Shade="Shade.Lighter" ToggleShade="Shade.Darker"
                    Style="margin-top: 0px; border-radius: 20px; border: 2px solid #e0e0e0" />


            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="NotificationDto" Context="notification">
            <Template>
                <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Primary"  
                Style="color: #fff; margin-top: 0px; border-radius: 20px; border: 2px solid #e0e0e0"  
                Click="@(async () => await DeleteNotification(notification.UserId, notification.NotificationId))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

}
else
{
    <p>No notifications found.</p>
}
</AuthWrapper>
@code {
    private List<NotificationDto> notifications;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalNotifications;

    protected override async Task OnInitializedAsync()
    {
        await IdentityService.InitializeAuthenticationState();
        if (IdentityService.IsAuthenticated)
        { 
            await LoadNotifications(new LoadDataArgs { Skip = 0, Top = pageSize, OrderBy = "createdAt desc" });
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

   
     private async Task LoadNotifications(LoadDataArgs args)
    {
        
        var skip = args.Skip ?? 0;
        var top = args.Top ?? pageSize;

        currentPage = (skip / top) + 1;
        pageSize = top;

        var userId = IdentityService.GetCurrentUserId();
        var response = await NotificationsService.GetNotificationsByUserAsync(userId, page: currentPage, pageSize: pageSize, sortOrder: "desc", status: null);

        if (response != null)
        {
            notifications = response.Results;
            totalNotifications = response.Total;
            StateHasChanged(); 
        }
    }


   private async Task UpdateNotificationStatus(Guid userId, Guid notificationId, bool isUnread)
    {
        string newStatus = isUnread ? "Unread" : "Read";
        await NotificationsService.UpdateNotificationStatusAsync(userId, notificationId, newStatus);

        // Refresh the notifications to reflect the change
        var notification = notifications.FirstOrDefault(n => n.NotificationId == notificationId);
        if (notification != null)
        {
            notification.Status = newStatus;
            await LoadNotifications(new LoadDataArgs { Skip = (currentPage - 1) * pageSize, Top = pageSize, OrderBy = "createdAt desc" });
            StateHasChanged(); //
            await OnInitializedAsync();
        }
        else
        {
            StateHasChanged(); // This will force the UI to update if for some reason the notification is not found
            await OnInitializedAsync();
        }
    }




   private async Task DeleteNotification(Guid userId, Guid notificationId)
    {
        await NotificationsService.DeleteNotificationAsync(userId, notificationId);
        // Use FindIndex to locate the specific notification and remove it if found
        int index = notifications.FindIndex(n => n.NotificationId == notificationId);
        if (index != -1)
        {
            notifications.RemoveAt(index);
            StateHasChanged(); // Update UI to reflect the removal
        }
    }

}
