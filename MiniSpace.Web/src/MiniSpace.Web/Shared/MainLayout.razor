@using MudBlazor
@using MiniSpace.Web.Areas.Students
@inherits LayoutComponentBase
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider

<MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
<MudLayout>
   <MudAppBar Elevation="4" >
        <MudGrid>
            <MudItem>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" OnClick="@ToggleDrawer"  />
                <span class="navbar-brand ml-2">Brand</span>
            </MudItem>
            <MudItem  class="d-flex justify-content-end">
                @if (_isUserAuthenticated)
                {
                    <nav class="navbar navbar-expand-lg navbar-light bg-light">
                        <div class="collapse navbar-collapse" id="navbarNav">
                            <ul class="navbar-nav">
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="/profile">
                                        <span class="oi oi-person" aria-hidden="true"></span> Profile
                                    </NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="/settings">
                                        <span class="oi oi-cog" aria-hidden="true"></span> Settings
                                    </NavLink>
                                </li>
                            </ul>
                            <ul class="navbar-nav">
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" id="userMenu" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="material-icons">person</i> Hello, @_userName
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="userMenu">
                                        <NavLink class="dropdown-item text-dark" href="/account">
                                            <i class="material-icons">settings</i> Account settings
                                        </NavLink>
                                        <NavLink class="dropdown-item text-dark" href="/notifications/all">
                                            <i class="material-icons">notifications</i> Notifications
                                        </NavLink>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item text-dark" href="#" @onclick="SignOut">
                                            <i class="material-icons">exit_to_app</i> Sign Out
                                        </a>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </nav>
                }
                else
                {
                    <nav class="navbar navbar-expand-lg navbar-light bg-light">
                        <div class="collapse navbar-collapse" id="navbarNav">
                            <ul class="navbar-nav mr-auto">
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="#home" @onclick="ScrollToHome">
                                        <span class="oi oi-home" aria-hidden="true"></span> Home
                                    </NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="#about" @onclick="ScrollToAbout">
                                        <span class="oi oi-info" aria-hidden="true"></span> About App
                                    </NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="#connect" @onclick="ScrollToConnect">
                                        <span class="oi oi-share-boxed" aria-hidden="true"></span> Connect
                                    </NavLink>
                                </li>
                            </ul>
                            <ul class="navbar-nav">
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="signin">
                                        <span class="oi oi-account-login" aria-hidden="true"></span> Sign In
                                    </NavLink>
                                </li>
                                <li class="nav-item">
                                    <NavLink class="nav-link text-dark" href="signup">
                                        <span class="oi oi-plus" aria-hidden="true"></span> Sign Up
                                    </NavLink>
                                </li>
                            </ul>
                        </div>
                    </nav>
                }
            </MudItem>
        </MudGrid>
    </MudAppBar>

    @if (_isUserAuthenticated)
    {
        <MudDrawer @bind-Open="_sidebarExpanded" Elevation="1" Class="drawer" 
                Anchor="Anchor.Left" Variant="@(isPC ? DrawerVariant.Mini : DrawerVariant.Responsive)">
            @if (!isPC)
            {
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Menu</MudText>
                </MudDrawerHeader>
            }
            <MudNavMenu>
                <MudNavLink Href="home" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="account" Icon="@Icons.Material.Filled.AccountBox">Account</MudNavLink>
                <MudNavGroup Text="Events" Icon="@Icons.Material.Filled.Event">
                    <MudNavLink Href="events/follow" Icon="@Icons.Material.Filled.Bookmark">Follow</MudNavLink>
                    <MudNavLink Href="events/search" Icon="@Icons.Material.Filled.FindInPage">Search</MudNavLink>
                    @if (IdentityService.GetCurrentUserRole() == "organizer")
                    {
                        <MudNavLink Href="events/organize" Icon="@Icons.Material.Filled.Assignment">Organize</MudNavLink>
                    }
                </MudNavGroup>
                <MudNavGroup Text="Friends" Icon="@Icons.Material.Filled.Group">
                    <MudNavLink Href="friends/search" Icon="@Icons.Material.Filled.Search">Search</MudNavLink>
                    <MudNavLink Href="friends" Icon="@Icons.Material.Filled.Group">Friends</MudNavLink>
                    <MudNavLink Href="friends/requests" Icon="@Icons.Material.Filled.MailOutline">Requests</MudNavLink>
                    <MudNavLink Href="friends/sent-requests" Icon="@Icons.Material.Filled.CompareArrows">Sent Requests</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Text="Notifications" Icon="@Icons.Material.Filled.Send">
                    <MudNavLink Href="notifications/all" Icon="@Icons.Material.Filled.Accessibility">All</MudNavLink>
                    <MudNavLink Href="notifications/new" Icon="@Icons.Material.Filled.Send">New</MudNavLink>
                    <MudNavLink Href="notifications/history" Icon="@Icons.Material.Filled.History">History</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="reports" Icon="@Icons.Material.Filled.AssignmentLate">Reports</MudNavLink>
                @if (IdentityService.GetCurrentUserRole() == "admin")
                {
                    <MudNavGroup Text="Admin" Icon="@Icons.Material.Filled.Build">
                        <MudNavLink Href="admin/students" Icon="@Icons.Material.Filled.AccountCircle">Students</MudNavLink>
                        <MudNavLink Href="admin/organizations" Icon="@Icons.Material.Filled.Assignment">Organizations</MudNavLink>
                        <MudNavLink Href="admin/reports" Icon="@Icons.Material.Filled.AssignmentLate">Reports</MudNavLink>
                    </MudNavGroup>
                }
            </MudNavMenu>
        </MudDrawer>
    }

    <MudMainContent>
        <div style="flex: 1; display: flex; flex-direction: column; min-height: 100vh;">
            <div style="flex: 1;">
                <div style="flex: 1; display: flex; justify-content: center; background: linear-gradient(to bottom, #f5f7fa, #c3cfe2);">
                    <div class="main-content" style="flex-grow: 1; max-width: 1400px;">
                        <div style="padding: 10px; margin: 20px;">
                            @Body
                        </div>
                    </div>
                    @if (_isUserAuthenticated)
                    {
                        <div style="max-width: 300px; align-self: stretch; padding: 10px;" class="notification-component">
                            <NotificationComponent />
                        </div>
                    }
                </div>
            </div>
            <FooterComponent />
        </div>
    </MudMainContent>
</MudLayout>

<MudDialog />

@code {
    private bool _sidebarExpanded = false;
    private bool isPC = true;
    private bool _isUserAuthenticated;
    private string _userName;
    private string _userEmail;
    private Guid _studentId;
    private string _studentState;

    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isUserAuthenticated = await IdentityService.CheckIfUserIsAuthenticated();
            if (_isUserAuthenticated)
            {
                var userDto = await IdentityService.GetAccountAsync(IdentityService.JwtDto); 
                if (userDto != null)
                {
                    _userName = userDto.Name;
                    _userEmail = userDto.Email; 
                    _studentId = userDto.Id;
                    var studentDto = await StudentsService.GetStudentAsync(_studentId);
                    if (studentDto != null)
                    {
                        _studentState = studentDto.State;
                    }
                }
            }
            await UpdateScreenSize();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task UpdateScreenSize()
    {
        var screenSize = await JSRuntime.InvokeAsync<ScreenSize>("getScreenSize");
        isPC = screenSize.Width > 868; // Adjust this width based on your breakpoint preference
        StateHasChanged();
    }

    private class ScreenSize
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    public async Task<bool> CheckAuthentication()
    {
        _isUserAuthenticated = await IdentityService.CheckIfUserIsAuthenticated();
        return _isUserAuthenticated;
    }

    public bool IsUserAuthenticated => _isUserAuthenticated;

    private void ToggleDrawer()
    {
        _sidebarExpanded = !_sidebarExpanded;
    }

    async Task SignOut()
    {
        await localStorage.ClearAsync();
        StateHasChanged();
        NavigationManager.NavigateTo("signin", forceLoad: true);
    }

     private async Task ScrollToHome(MouseEventArgs e)
    {
        await ScrollToSection("home");
    }

    private async Task ScrollToAbout(MouseEventArgs e)
    {
        await ScrollToSection("about");
    }

    private async Task ScrollToConnect(MouseEventArgs e)
    {
        await ScrollToSection("connect");
    }


    async Task ScrollToSection(string sectionId)
    {
        if (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            NavigationManager.NavigateTo("/", true);
        }
        while (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            await Task.Delay(100); // Check every 100ms
        }
        await JSRuntime.InvokeVoidAsync("scrollToSection", sectionId);
    }

    void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
