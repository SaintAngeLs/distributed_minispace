@using MudBlazor
@using MiniSpace.Web.Areas.Students
@inherits LayoutComponentBase
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider

<MudThemeProvider Theme="@MiniSpaceTheme.MiniSpaceCustomTheme" />
<MudLayout>
    <MudAppBar Elevation="4">
        <div class="container-fluid d-flex">
            <div class="d-flex align-items-center">
                @if (_isUserAuthenticated)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" OnClick="@ToggleDrawer" />
                }
                else
                {
                    <MudButton Variant="Variant.Text" OnClick="@ToggleDrawer">
                        <img src="icons/menu-left.svg" alt="Menu" style="height: 24px; width: 24px;" />
                    </MudButton>
                }
                <span class="ml-2">MiniSpace</span>
            </div>
            <MudSpacer />
            <div class="d-flex justify-content-end">
                @if (_isUserAuthenticated)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Primary" OnClick="@ToggleUserDrawer" />
                }
            </div>
        </div>
    </MudAppBar>

    @if (_isUserAuthenticated)
    {
        <MudDrawer @bind-Open="_userDrawerOpen" Elevation="1" Anchor="Anchor.Right" Variant="DrawerVariant.Temporary">
            <MudDrawerHeader>
                <div class="d-flex flex-column align-items-center">
                    <MudAvatar Image="@_userAvatar" Size="Size.Large" />
                    <MudText Typo="Typo.h6" Class="mt-2">@_userName</MudText>
                </div>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                <MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings">Settings</MudNavLink>
                <MudNavLink Href="/account" Icon="@Icons.Material.Filled.AccountBox">Account settings</MudNavLink>
                <MudNavLink Href="/notifications/all" Icon="@Icons.Material.Filled.Notifications">Notifications</MudNavLink>
                <MudNavLink OnClick="SignOut" Icon="@Icons.Material.Filled.ExitToApp">Sign Out</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    }
    else
    {
        <MudDrawer @bind-Open="_sidebarExpanded" Elevation="1" Anchor="Anchor.Left" Variant="@(isPC ? DrawerVariant.Mini : DrawerVariant.Responsive)" OpenMiniOnHover="true">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6"> </MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Href="#home" OnClick="ScrollToHome" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="#about" OnClick="ScrollToAbout" Icon="@Icons.Material.Filled.Info">About App</MudNavLink>
                <MudNavLink Href="#connect" OnClick="ScrollToConnect" Icon="@Icons.Material.Filled.ConnectWithoutContact">Connect</MudNavLink>
                <MudNavLink Href="signin" Icon="@Icons.Material.Filled.Login">Sign In</MudNavLink>
                <MudNavLink Href="signup" Icon="@Icons.Material.Filled.HowToReg">Sign Up</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    }
    @if (_isUserAuthenticated)
    {
        <MudDrawer @bind-Open="_sidebarExpanded" Elevation="1" Class="drawer" Anchor="Anchor.Left" Variant="@(isPC ? DrawerVariant.Mini : DrawerVariant.Temporary)" OpenMiniOnHover="true">
            
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Menu</MudText>
                </MudDrawerHeader>
            
            <MudNavMenu>
                <MudNavLink Href="home" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="account" Icon="@Icons.Material.Filled.AccountBox">Account</MudNavLink>
                <MudNavGroup Title="Events" Icon="@Icons.Material.Filled.Event" Expanded="true">
                    <MudNavLink Href="events/follow" Icon="@Icons.Material.Filled.Bookmark">Follow</MudNavLink>
                    <MudNavLink Href="events/search" Icon="@Icons.Material.Filled.FindInPage">Search</MudNavLink>
                    @if (IdentityService.GetCurrentUserRole() == "organizer")
                    {
                        <MudNavLink Href="events/organize" Icon="@Icons.Material.Filled.Assignment">Organize</MudNavLink>
                    }
                </MudNavGroup>
                <MudNavGroup Title="Friends" Icon="@Icons.Material.Filled.Group" Expanded="true" ExpandIcon="@Icons.Material.Filled.ExpandMore" CollapseIcon="@Icons.Material.Filled.ExpandLess">
                    <MudNavLink Href="friends/search" Icon="@Icons.Material.Filled.Search">Search</MudNavLink>
                    <MudNavLink Href="friends" Icon="@Icons.Material.Filled.Group">Friends</MudNavLink>
                    <MudNavLink Href="friends/requests" Icon="@Icons.Material.Filled.MailOutline">Requests</MudNavLink>
                    <MudNavLink Href="friends/sent-requests" Icon="@Icons.Material.Filled.CompareArrows">Sent Requests</MudNavLink>
                </MudNavGroup>
                
                <MudNavGroup Title="Organizations" Icon="@Icons.Material.Filled.Business" Expanded="true">
                    <MudNavLink Href="organizations/search" Icon="@Icons.Material.Filled.Search">Search</MudNavLink>
                    <MudNavLink Href="organizations/my" Icon="@Icons.Material.Filled.Home">My Organizations</MudNavLink>
                    <MudNavLink Href="organizations/following" Icon="@Icons.Material.Filled.Group">Organizations I Follow</MudNavLink>
                </MudNavGroup>

                <MudNavGroup Title="Notifications" Icon="@Icons.Material.Filled.Send" Expanded="true">
                    <MudNavLink Href="notifications/all" Icon="@Icons.Material.Filled.Accessibility">All</MudNavLink>
                    <MudNavLink Href="notifications/new" Icon="@Icons.Material.Filled.Send">New</MudNavLink>
                    <MudNavLink Href="notifications/history" Icon="@Icons.Material.Filled.History">History</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="reports" Icon="@Icons.Material.Filled.AssignmentLate">Reports</MudNavLink>
                @if (IdentityService.GetCurrentUserRole() == "admin")
                {
                    <MudNavGroup Title="Admin" Icon="@Icons.Material.Filled.Build" Expanded="true">
                        <MudNavLink Href="admin/students" Icon="@Icons.Material.Filled.AccountCircle">Students</MudNavLink>
                        <MudNavLink Href="admin/organizations" Icon="@Icons.Material.Filled.Assignment">Organizations</MudNavLink>
                        <MudNavLink Href="admin/reports" Icon="@Icons.Material.Filled.AssignmentLate">Reports</MudNavLink>
                    </MudNavGroup>
                }
            </MudNavMenu>
        </MudDrawer>
    }

    <MudMainContent>
        <div style="flex: 1; display: flex; flex-direction: column;">
            <div style="flex: 1;">
                <div style="flex: 1; display: flex; justify-content: center; background: linear-gradient(to bottom, #f5f7fa, #c3cfe2);">
                    <div  style="flex-grow: 1; max-width: 1400px;">
                        <div style="padding: 10px; margin: 20px;  min-height: 100vh;">
                            @Body
                        </div>
                    </div>
                    @if (_isUserAuthenticated)
                    {
                        <div style="max-width: 300px; align-self: stretch; padding: 10px;" class="notification-component">
                            <NotificationComponent />
                        </div>
                    }
                </div>
            </div>
            <FooterComponent />
        </div>
    </MudMainContent>
</MudLayout>

<MudDialog />

@code {
    private bool _sidebarExpanded = false;
    private bool _userDrawerOpen = false;
    private bool isPC = true;
    private bool _isUserAuthenticated;
    private string _userName;
    private string _userEmail;
    private Guid _studentId;
    private string _studentState;
    private string _userAvatar;

    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isUserAuthenticated = await IdentityService.CheckIfUserIsAuthenticated();
            if (_isUserAuthenticated)
            {
                var userDto = await IdentityService.GetAccountAsync(IdentityService.JwtDto); 
                if (userDto != null)
                {
                    _userName = userDto.Name;
                    _userEmail = userDto.Email; 
                    _studentId = userDto.Id;
                    var studentDto = await StudentsService.GetStudentAsync(_studentId);
                    if (studentDto != null)
                    {
                        _studentState = studentDto.State;
                        _userAvatar = studentDto.ProfileImageUrl; 
                    }
                }
            }
            await UpdateScreenSize();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task UpdateScreenSize()
    {
        var screenSize = await JSRuntime.InvokeAsync<ScreenSize>("getScreenSize");
        isPC = screenSize.Width > 868;
        StateHasChanged();
    }

    private class ScreenSize
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    public async Task<bool> CheckAuthentication()
    {
        _isUserAuthenticated = await IdentityService.CheckIfUserIsAuthenticated();
        return _isUserAuthenticated;
    }

    public bool IsUserAuthenticated => _isUserAuthenticated;

    private void ToggleDrawer()
    {
        _sidebarExpanded = !_sidebarExpanded;
    }

    private void OpenDrawer()
    {
        _sidebarExpanded = true;
    }

    private void ToggleUserDrawer()
    {
        _userDrawerOpen = !_userDrawerOpen;
    }

    async Task SignOut()
    {
        await localStorage.ClearAsync();
        await IdentityService.Logout();
        StateHasChanged();
        NavigationManager.NavigateTo("signin", forceLoad: true);
    }

    private async Task ScrollToHome(MouseEventArgs e)
    {
        await ScrollToSection("home");
    }

    private async Task ScrollToAbout(MouseEventArgs e)
    {
        await ScrollToSection("about");
    }

    private async Task ScrollToConnect(MouseEventArgs e)
    {
        await ScrollToSection("connect");
    }

    async Task ScrollToSection(string sectionId)
    {
        if (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            NavigationManager.NavigateTo("/", true);
        }
        while (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            await Task.Delay(100);
        }
        await JSRuntime.InvokeVoidAsync("scrollToSection", sectionId);
    }

    void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
